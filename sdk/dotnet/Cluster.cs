// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rke
{
    /// <summary>
    /// ## Import
    /// 
    /// rke_cluster can be imported using the RKE cluster config and state files as ID in the format `&lt;cluster_config_file&gt;:&lt;rke_state_file&gt;`
    /// 
    /// ```sh
    ///  $ pulumi import rke:index/cluster:Cluster foo &amp;lt;cluster_config_file&amp;gt;:&amp;lt;rke_state_file&amp;gt;
    /// ```
    ///  As experimental feature, dind rke_cluster can be also imported adding `dind` as 3rd import parameter `&lt;cluster_config_file&gt;:&lt;rke_state_file&gt;:dind`
    /// 
    /// ```sh
    ///  $ pulumi import rke:index/cluster:Cluster foo &amp;lt;cluster_config_file&amp;gt;:&amp;lt;rke_state_file&amp;gt;:dind
    /// ```
    /// </summary>
    [RkeResourceType("rke:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// RKE k8s cluster addon deployment timeout in seconds for status check (int)
        /// </summary>
        [Output("addonJobTimeout")]
        public Output<int?> AddonJobTimeout { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest to be deployed (string)
        /// </summary>
        [Output("addons")]
        public Output<string?> Addons { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
        /// </summary>
        [Output("addonsIncludes")]
        public Output<ImmutableArray<string>> AddonsIncludes { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster api server url (string)
        /// </summary>
        [Output("apiServerUrl")]
        public Output<string> ApiServerUrl { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster authentication configuration (list maxitems:1)
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.ClusterAuthentication?> Authentication { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster authorization mode configuration (list maxitems:1)
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.ClusterAuthorization?> Authorization { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster bastion Host configuration (list maxitems:1)
        /// </summary>
        [Output("bastionHost")]
        public Output<Outputs.ClusterBastionHost?> BastionHost { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
        /// </summary>
        [Output("caCrt")]
        public Output<string> CaCrt { get; private set; } = null!;

        /// <summary>
        /// Specify a certificate dir path (string)
        /// </summary>
        [Output("certDir")]
        public Output<string?> CertDir { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster certificates (string)
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.ClusterCertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster client certificate (string)
        /// </summary>
        [Output("clientCert")]
        public Output<string> ClientCert { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster client key (string)
        /// </summary>
        [Output("clientKey")]
        public Output<string> ClientKey { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
        /// </summary>
        [Output("cloudProvider")]
        public Output<Outputs.ClusterCloudProvider?> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// Cluster CIDR option for kube controller service (string)
        /// </summary>
        [Output("clusterCidr")]
        public Output<string> ClusterCidr { get; private set; } = null!;

        /// <summary>
        /// Cluster DNS Server option for kubelet service (string)
        /// </summary>
        [Output("clusterDnsServer")]
        public Output<string> ClusterDnsServer { get; private set; } = null!;

        /// <summary>
        /// Cluster Domain option for kubelet service. Default `cluster.local` (string)
        /// </summary>
        [Output("clusterDomain")]
        public Output<string> ClusterDomain { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster name used in the kube config (string)
        /// </summary>
        [Output("clusterName")]
        public Output<string?> ClusterName { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
        /// </summary>
        [Output("clusterYaml")]
        public Output<string?> ClusterYaml { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster control plane nodes (list)
        /// </summary>
        [Output("controlPlaneHosts")]
        public Output<ImmutableArray<Outputs.ClusterControlPlaneHost>> ControlPlaneHosts { get; private set; } = null!;

        /// <summary>
        /// Use custom certificates from a cert dir (string)
        /// </summary>
        [Output("customCerts")]
        public Output<bool?> CustomCerts { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster delay on creation (int)
        /// </summary>
        [Output("delayOnCreation")]
        public Output<int?> DelayOnCreation { get; private set; } = null!;

        /// <summary>
        /// Deploy RKE cluster on a dind environment. Default: `false` (bool)
        /// </summary>
        [Output("dind")]
        public Output<bool?> Dind { get; private set; } = null!;

        /// <summary>
        /// DinD RKE cluster dns (string)
        /// </summary>
        [Output("dindDnsServer")]
        public Output<string?> DindDnsServer { get; private set; } = null!;

        /// <summary>
        /// DinD RKE cluster storage driver (string)
        /// </summary>
        [Output("dindStorageDriver")]
        public Output<string?> DindStorageDriver { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
        /// </summary>
        [Output("disablePortCheck")]
        public Output<bool?> DisablePortCheck { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster DNS Config (list maxitems:1)
        /// </summary>
        [Output("dns")]
        public Output<Outputs.ClusterDns?> Dns { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable CRI dockerd for kubelet. Default `false` (bool)
        /// </summary>
        [Output("enableCriDockerd")]
        public Output<bool?> EnableCriDockerd { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster etcd nodes (list)
        /// </summary>
        [Output("etcdHosts")]
        public Output<ImmutableArray<Outputs.ClusterEtcdHost>> EtcdHosts { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
        /// </summary>
        [Output("ignoreDockerVersion")]
        public Output<bool?> IgnoreDockerVersion { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster inactive nodes (list)
        /// </summary>
        [Output("inactiveHosts")]
        public Output<ImmutableArray<Outputs.ClusterInactiveHost>> InactiveHosts { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster ingress controller configuration (list maxitems:1)
        /// </summary>
        [Output("ingress")]
        public Output<Outputs.ClusterIngress?> Ingress { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
        /// </summary>
        [Output("internalKubeConfigYaml")]
        public Output<string> InternalKubeConfigYaml { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster admin user (string)
        /// </summary>
        [Output("kubeAdminUser")]
        public Output<string> KubeAdminUser { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
        /// </summary>
        [Output("kubeConfigYaml")]
        public Output<string> KubeConfigYaml { get; private set; } = null!;

        /// <summary>
        /// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string?> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster monitoring Config (list maxitems:1)
        /// </summary>
        [Output("monitoring")]
        public Output<Outputs.ClusterMonitoring?> Monitoring { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster network configuration (list maxitems:1)
        /// </summary>
        [Output("network")]
        public Output<Outputs.ClusterNetwork?> Network { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster nodes (list)
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.ClusterNode>> Nodes { get; private set; } = null!;

        [Output("nodesConfs")]
        public Output<ImmutableArray<string>> NodesConfs { get; private set; } = null!;

        /// <summary>
        /// RKE k8s directory path (string)
        /// </summary>
        [Output("prefixPath")]
        public Output<string?> PrefixPath { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster private docker registries (list)
        /// </summary>
        [Output("privateRegistries")]
        public Output<ImmutableArray<Outputs.ClusterPrivateRegistry>> PrivateRegistries { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster restore configuration (list maxitems:1)
        /// </summary>
        [Output("restore")]
        public Output<Outputs.ClusterRestore?> Restore { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster config yaml (string)
        /// </summary>
        [Output("rkeClusterYaml")]
        public Output<string> RkeClusterYaml { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster state (string)
        /// </summary>
        [Output("rkeState")]
        public Output<string> RkeState { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster rotate certificates configuration (list maxitems:1)
        /// </summary>
        [Output("rotateCertificates")]
        public Output<Outputs.ClusterRotateCertificates?> RotateCertificates { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster running system images list (list)
        /// </summary>
        [Output("runningSystemImages")]
        public Output<ImmutableArray<Outputs.ClusterRunningSystemImage>> RunningSystemImages { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster services (list maxitems:1)
        /// </summary>
        [Output("services")]
        public Output<Outputs.ClusterServices?> Services { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.etcd instead (list maxitems:1)
        /// </summary>
        [Output("servicesEtcdDeprecated")]
        public Output<Outputs.ClusterServicesEtcdDeprecated?> ServicesEtcdDeprecated { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.kube_api instead (list maxitems:1)
        /// </summary>
        [Output("servicesKubeApiDeprecated")]
        public Output<Outputs.ClusterServicesKubeApiDeprecated?> ServicesKubeApiDeprecated { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.kube_controller instead (list maxitems:1)
        /// </summary>
        [Output("servicesKubeControllerDeprecated")]
        public Output<Outputs.ClusterServicesKubeControllerDeprecated?> ServicesKubeControllerDeprecated { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.kubeproxy instead (list maxitems:1)
        /// </summary>
        [Output("servicesKubeProxyDeprecated")]
        public Output<Outputs.ClusterServicesKubeProxyDeprecated?> ServicesKubeProxyDeprecated { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.scheduler instead (list maxitems:1)
        /// </summary>
        [Output("servicesKubeSchedulerDeprecated")]
        public Output<Outputs.ClusterServicesKubeSchedulerDeprecated?> ServicesKubeSchedulerDeprecated { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED) Use services.kubelet instead (list maxitems:1)
        /// </summary>
        [Output("servicesKubeletDeprecated")]
        public Output<Outputs.ClusterServicesKubeletDeprecated?> ServicesKubeletDeprecated { get; private set; } = null!;

        /// <summary>
        /// SSH Agent Auth enable (bool)
        /// </summary>
        [Output("sshAgentAuth")]
        public Output<bool> SshAgentAuth { get; private set; } = null!;

        /// <summary>
        /// SSH Certificate Path (string)
        /// </summary>
        [Output("sshCertPath")]
        public Output<string?> SshCertPath { get; private set; } = null!;

        /// <summary>
        /// SSH Private Key Path (string)
        /// </summary>
        [Output("sshKeyPath")]
        public Output<string?> SshKeyPath { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster system images list (list maxitems:1)
        /// </summary>
        [Output("systemImages")]
        public Output<Outputs.ClusterSystemImages?> SystemImages { get; private set; } = null!;

        /// <summary>
        /// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
        /// </summary>
        [Output("updateOnly")]
        public Output<bool?> UpdateOnly { get; private set; } = null!;

        /// <summary>
        /// RKE k8s cluster upgrade strategy (list maxitems:1)
        /// </summary>
        [Output("upgradeStrategy")]
        public Output<Outputs.ClusterUpgradeStrategy?> UpgradeStrategy { get; private set; } = null!;

        /// <summary>
        /// (Computed) RKE k8s cluster worker nodes (list)
        /// </summary>
        [Output("workerHosts")]
        public Output<ImmutableArray<Outputs.ClusterWorkerHost>> WorkerHosts { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("rke:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("rke:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCrt",
                    "certificates",
                    "clientCert",
                    "clientKey",
                    "clusterYaml",
                    "internalKubeConfigYaml",
                    "kubeConfigYaml",
                    "rkeClusterYaml",
                    "rkeState",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE k8s cluster addon deployment timeout in seconds for status check (int)
        /// </summary>
        [Input("addonJobTimeout")]
        public Input<int>? AddonJobTimeout { get; set; }

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest to be deployed (string)
        /// </summary>
        [Input("addons")]
        public Input<string>? Addons { get; set; }

        [Input("addonsIncludes")]
        private InputList<string>? _addonsIncludes;

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
        /// </summary>
        public InputList<string> AddonsIncludes
        {
            get => _addonsIncludes ?? (_addonsIncludes = new InputList<string>());
            set => _addonsIncludes = value;
        }

        /// <summary>
        /// RKE k8s cluster authentication configuration (list maxitems:1)
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ClusterAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// RKE k8s cluster authorization mode configuration (list maxitems:1)
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.ClusterAuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// RKE k8s cluster bastion Host configuration (list maxitems:1)
        /// </summary>
        [Input("bastionHost")]
        public Input<Inputs.ClusterBastionHostArgs>? BastionHost { get; set; }

        /// <summary>
        /// Specify a certificate dir path (string)
        /// </summary>
        [Input("certDir")]
        public Input<string>? CertDir { get; set; }

        /// <summary>
        /// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
        /// </summary>
        [Input("cloudProvider")]
        public Input<Inputs.ClusterCloudProviderArgs>? CloudProvider { get; set; }

        /// <summary>
        /// RKE k8s cluster name used in the kube config (string)
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterYaml")]
        private Input<string>? _clusterYaml;

        /// <summary>
        /// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
        /// </summary>
        public Input<string>? ClusterYaml
        {
            get => _clusterYaml;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterYaml = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Use custom certificates from a cert dir (string)
        /// </summary>
        [Input("customCerts")]
        public Input<bool>? CustomCerts { get; set; }

        /// <summary>
        /// RKE k8s cluster delay on creation (int)
        /// </summary>
        [Input("delayOnCreation")]
        public Input<int>? DelayOnCreation { get; set; }

        /// <summary>
        /// Deploy RKE cluster on a dind environment. Default: `false` (bool)
        /// </summary>
        [Input("dind")]
        public Input<bool>? Dind { get; set; }

        /// <summary>
        /// DinD RKE cluster dns (string)
        /// </summary>
        [Input("dindDnsServer")]
        public Input<string>? DindDnsServer { get; set; }

        /// <summary>
        /// DinD RKE cluster storage driver (string)
        /// </summary>
        [Input("dindStorageDriver")]
        public Input<string>? DindStorageDriver { get; set; }

        /// <summary>
        /// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
        /// </summary>
        [Input("disablePortCheck")]
        public Input<bool>? DisablePortCheck { get; set; }

        /// <summary>
        /// RKE k8s cluster DNS Config (list maxitems:1)
        /// </summary>
        [Input("dns")]
        public Input<Inputs.ClusterDnsArgs>? Dns { get; set; }

        /// <summary>
        /// Enable/Disable CRI dockerd for kubelet. Default `false` (bool)
        /// </summary>
        [Input("enableCriDockerd")]
        public Input<bool>? EnableCriDockerd { get; set; }

        /// <summary>
        /// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
        /// </summary>
        [Input("ignoreDockerVersion")]
        public Input<bool>? IgnoreDockerVersion { get; set; }

        /// <summary>
        /// RKE k8s cluster ingress controller configuration (list maxitems:1)
        /// </summary>
        [Input("ingress")]
        public Input<Inputs.ClusterIngressArgs>? Ingress { get; set; }

        /// <summary>
        /// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// RKE k8s cluster monitoring Config (list maxitems:1)
        /// </summary>
        [Input("monitoring")]
        public Input<Inputs.ClusterMonitoringArgs>? Monitoring { get; set; }

        /// <summary>
        /// RKE k8s cluster network configuration (list maxitems:1)
        /// </summary>
        [Input("network")]
        public Input<Inputs.ClusterNetworkArgs>? Network { get; set; }

        [Input("nodes")]
        private InputList<Inputs.ClusterNodeArgs>? _nodes;

        /// <summary>
        /// RKE k8s cluster nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterNodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterNodeArgs>());
            set => _nodes = value;
        }

        [Input("nodesConfs")]
        private InputList<string>? _nodesConfs;
        [Obsolete(@"Use cluster_yaml instead")]
        public InputList<string> NodesConfs
        {
            get => _nodesConfs ?? (_nodesConfs = new InputList<string>());
            set => _nodesConfs = value;
        }

        /// <summary>
        /// RKE k8s directory path (string)
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateRegistries")]
        private InputList<Inputs.ClusterPrivateRegistryArgs>? _privateRegistries;

        /// <summary>
        /// RKE k8s cluster private docker registries (list)
        /// </summary>
        public InputList<Inputs.ClusterPrivateRegistryArgs> PrivateRegistries
        {
            get => _privateRegistries ?? (_privateRegistries = new InputList<Inputs.ClusterPrivateRegistryArgs>());
            set => _privateRegistries = value;
        }

        /// <summary>
        /// RKE k8s cluster restore configuration (list maxitems:1)
        /// </summary>
        [Input("restore")]
        public Input<Inputs.ClusterRestoreArgs>? Restore { get; set; }

        /// <summary>
        /// RKE k8s cluster rotate certificates configuration (list maxitems:1)
        /// </summary>
        [Input("rotateCertificates")]
        public Input<Inputs.ClusterRotateCertificatesArgs>? RotateCertificates { get; set; }

        /// <summary>
        /// RKE k8s cluster services (list maxitems:1)
        /// </summary>
        [Input("services")]
        public Input<Inputs.ClusterServicesArgs>? Services { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.etcd instead (list maxitems:1)
        /// </summary>
        [Input("servicesEtcdDeprecated")]
        public Input<Inputs.ClusterServicesEtcdDeprecatedArgs>? ServicesEtcdDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kube_api instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeApiDeprecated")]
        public Input<Inputs.ClusterServicesKubeApiDeprecatedArgs>? ServicesKubeApiDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kube_controller instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeControllerDeprecated")]
        public Input<Inputs.ClusterServicesKubeControllerDeprecatedArgs>? ServicesKubeControllerDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kubeproxy instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeProxyDeprecated")]
        public Input<Inputs.ClusterServicesKubeProxyDeprecatedArgs>? ServicesKubeProxyDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.scheduler instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeSchedulerDeprecated")]
        public Input<Inputs.ClusterServicesKubeSchedulerDeprecatedArgs>? ServicesKubeSchedulerDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kubelet instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeletDeprecated")]
        public Input<Inputs.ClusterServicesKubeletDeprecatedArgs>? ServicesKubeletDeprecated { get; set; }

        /// <summary>
        /// SSH Agent Auth enable (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// SSH Certificate Path (string)
        /// </summary>
        [Input("sshCertPath")]
        public Input<string>? SshCertPath { get; set; }

        /// <summary>
        /// SSH Private Key Path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// RKE k8s cluster system images list (list maxitems:1)
        /// </summary>
        [Input("systemImages")]
        public Input<Inputs.ClusterSystemImagesArgs>? SystemImages { get; set; }

        /// <summary>
        /// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
        /// </summary>
        [Input("updateOnly")]
        public Input<bool>? UpdateOnly { get; set; }

        /// <summary>
        /// RKE k8s cluster upgrade strategy (list maxitems:1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<Inputs.ClusterUpgradeStrategyArgs>? UpgradeStrategy { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE k8s cluster addon deployment timeout in seconds for status check (int)
        /// </summary>
        [Input("addonJobTimeout")]
        public Input<int>? AddonJobTimeout { get; set; }

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest to be deployed (string)
        /// </summary>
        [Input("addons")]
        public Input<string>? Addons { get; set; }

        [Input("addonsIncludes")]
        private InputList<string>? _addonsIncludes;

        /// <summary>
        /// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
        /// </summary>
        public InputList<string> AddonsIncludes
        {
            get => _addonsIncludes ?? (_addonsIncludes = new InputList<string>());
            set => _addonsIncludes = value;
        }

        /// <summary>
        /// (Computed) RKE k8s cluster api server url (string)
        /// </summary>
        [Input("apiServerUrl")]
        public Input<string>? ApiServerUrl { get; set; }

        /// <summary>
        /// RKE k8s cluster authentication configuration (list maxitems:1)
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ClusterAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// RKE k8s cluster authorization mode configuration (list maxitems:1)
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.ClusterAuthorizationGetArgs>? Authorization { get; set; }

        /// <summary>
        /// RKE k8s cluster bastion Host configuration (list maxitems:1)
        /// </summary>
        [Input("bastionHost")]
        public Input<Inputs.ClusterBastionHostGetArgs>? BastionHost { get; set; }

        [Input("caCrt")]
        private Input<string>? _caCrt;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
        /// </summary>
        public Input<string>? CaCrt
        {
            get => _caCrt;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCrt = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specify a certificate dir path (string)
        /// </summary>
        [Input("certDir")]
        public Input<string>? CertDir { get; set; }

        [Input("certificates")]
        private InputList<Inputs.ClusterCertificateGetArgs>? _certificates;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster certificates (string)
        /// </summary>
        public InputList<Inputs.ClusterCertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.ClusterCertificateGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.ClusterCertificateGetArgs>());
                _certificates = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("clientCert")]
        private Input<string>? _clientCert;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster client certificate (string)
        /// </summary>
        public Input<string>? ClientCert
        {
            get => _clientCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientKey")]
        private Input<string>? _clientKey;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster client key (string)
        /// </summary>
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
        /// </summary>
        [Input("cloudProvider")]
        public Input<Inputs.ClusterCloudProviderGetArgs>? CloudProvider { get; set; }

        /// <summary>
        /// Cluster CIDR option for kube controller service (string)
        /// </summary>
        [Input("clusterCidr")]
        public Input<string>? ClusterCidr { get; set; }

        /// <summary>
        /// Cluster DNS Server option for kubelet service (string)
        /// </summary>
        [Input("clusterDnsServer")]
        public Input<string>? ClusterDnsServer { get; set; }

        /// <summary>
        /// Cluster Domain option for kubelet service. Default `cluster.local` (string)
        /// </summary>
        [Input("clusterDomain")]
        public Input<string>? ClusterDomain { get; set; }

        /// <summary>
        /// RKE k8s cluster name used in the kube config (string)
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("clusterYaml")]
        private Input<string>? _clusterYaml;

        /// <summary>
        /// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
        /// </summary>
        public Input<string>? ClusterYaml
        {
            get => _clusterYaml;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterYaml = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("controlPlaneHosts")]
        private InputList<Inputs.ClusterControlPlaneHostGetArgs>? _controlPlaneHosts;

        /// <summary>
        /// (Computed) RKE k8s cluster control plane nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterControlPlaneHostGetArgs> ControlPlaneHosts
        {
            get => _controlPlaneHosts ?? (_controlPlaneHosts = new InputList<Inputs.ClusterControlPlaneHostGetArgs>());
            set => _controlPlaneHosts = value;
        }

        /// <summary>
        /// Use custom certificates from a cert dir (string)
        /// </summary>
        [Input("customCerts")]
        public Input<bool>? CustomCerts { get; set; }

        /// <summary>
        /// RKE k8s cluster delay on creation (int)
        /// </summary>
        [Input("delayOnCreation")]
        public Input<int>? DelayOnCreation { get; set; }

        /// <summary>
        /// Deploy RKE cluster on a dind environment. Default: `false` (bool)
        /// </summary>
        [Input("dind")]
        public Input<bool>? Dind { get; set; }

        /// <summary>
        /// DinD RKE cluster dns (string)
        /// </summary>
        [Input("dindDnsServer")]
        public Input<string>? DindDnsServer { get; set; }

        /// <summary>
        /// DinD RKE cluster storage driver (string)
        /// </summary>
        [Input("dindStorageDriver")]
        public Input<string>? DindStorageDriver { get; set; }

        /// <summary>
        /// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
        /// </summary>
        [Input("disablePortCheck")]
        public Input<bool>? DisablePortCheck { get; set; }

        /// <summary>
        /// RKE k8s cluster DNS Config (list maxitems:1)
        /// </summary>
        [Input("dns")]
        public Input<Inputs.ClusterDnsGetArgs>? Dns { get; set; }

        /// <summary>
        /// Enable/Disable CRI dockerd for kubelet. Default `false` (bool)
        /// </summary>
        [Input("enableCriDockerd")]
        public Input<bool>? EnableCriDockerd { get; set; }

        [Input("etcdHosts")]
        private InputList<Inputs.ClusterEtcdHostGetArgs>? _etcdHosts;

        /// <summary>
        /// (Computed) RKE k8s cluster etcd nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterEtcdHostGetArgs> EtcdHosts
        {
            get => _etcdHosts ?? (_etcdHosts = new InputList<Inputs.ClusterEtcdHostGetArgs>());
            set => _etcdHosts = value;
        }

        /// <summary>
        /// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
        /// </summary>
        [Input("ignoreDockerVersion")]
        public Input<bool>? IgnoreDockerVersion { get; set; }

        [Input("inactiveHosts")]
        private InputList<Inputs.ClusterInactiveHostGetArgs>? _inactiveHosts;

        /// <summary>
        /// (Computed) RKE k8s cluster inactive nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterInactiveHostGetArgs> InactiveHosts
        {
            get => _inactiveHosts ?? (_inactiveHosts = new InputList<Inputs.ClusterInactiveHostGetArgs>());
            set => _inactiveHosts = value;
        }

        /// <summary>
        /// RKE k8s cluster ingress controller configuration (list maxitems:1)
        /// </summary>
        [Input("ingress")]
        public Input<Inputs.ClusterIngressGetArgs>? Ingress { get; set; }

        [Input("internalKubeConfigYaml")]
        private Input<string>? _internalKubeConfigYaml;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
        /// </summary>
        [Obsolete(@"Use kube_config_yaml instead")]
        public Input<string>? InternalKubeConfigYaml
        {
            get => _internalKubeConfigYaml;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _internalKubeConfigYaml = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Computed) RKE k8s cluster admin user (string)
        /// </summary>
        [Input("kubeAdminUser")]
        public Input<string>? KubeAdminUser { get; set; }

        [Input("kubeConfigYaml")]
        private Input<string>? _kubeConfigYaml;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
        /// </summary>
        public Input<string>? KubeConfigYaml
        {
            get => _kubeConfigYaml;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kubeConfigYaml = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// RKE k8s cluster monitoring Config (list maxitems:1)
        /// </summary>
        [Input("monitoring")]
        public Input<Inputs.ClusterMonitoringGetArgs>? Monitoring { get; set; }

        /// <summary>
        /// RKE k8s cluster network configuration (list maxitems:1)
        /// </summary>
        [Input("network")]
        public Input<Inputs.ClusterNetworkGetArgs>? Network { get; set; }

        [Input("nodes")]
        private InputList<Inputs.ClusterNodeGetArgs>? _nodes;

        /// <summary>
        /// RKE k8s cluster nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("nodesConfs")]
        private InputList<string>? _nodesConfs;
        [Obsolete(@"Use cluster_yaml instead")]
        public InputList<string> NodesConfs
        {
            get => _nodesConfs ?? (_nodesConfs = new InputList<string>());
            set => _nodesConfs = value;
        }

        /// <summary>
        /// RKE k8s directory path (string)
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateRegistries")]
        private InputList<Inputs.ClusterPrivateRegistryGetArgs>? _privateRegistries;

        /// <summary>
        /// RKE k8s cluster private docker registries (list)
        /// </summary>
        public InputList<Inputs.ClusterPrivateRegistryGetArgs> PrivateRegistries
        {
            get => _privateRegistries ?? (_privateRegistries = new InputList<Inputs.ClusterPrivateRegistryGetArgs>());
            set => _privateRegistries = value;
        }

        /// <summary>
        /// RKE k8s cluster restore configuration (list maxitems:1)
        /// </summary>
        [Input("restore")]
        public Input<Inputs.ClusterRestoreGetArgs>? Restore { get; set; }

        [Input("rkeClusterYaml")]
        private Input<string>? _rkeClusterYaml;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster config yaml (string)
        /// </summary>
        public Input<string>? RkeClusterYaml
        {
            get => _rkeClusterYaml;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rkeClusterYaml = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("rkeState")]
        private Input<string>? _rkeState;

        /// <summary>
        /// (Computed/Sensitive) RKE k8s cluster state (string)
        /// </summary>
        public Input<string>? RkeState
        {
            get => _rkeState;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rkeState = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// RKE k8s cluster rotate certificates configuration (list maxitems:1)
        /// </summary>
        [Input("rotateCertificates")]
        public Input<Inputs.ClusterRotateCertificatesGetArgs>? RotateCertificates { get; set; }

        [Input("runningSystemImages")]
        private InputList<Inputs.ClusterRunningSystemImageGetArgs>? _runningSystemImages;

        /// <summary>
        /// (Computed) RKE k8s cluster running system images list (list)
        /// </summary>
        public InputList<Inputs.ClusterRunningSystemImageGetArgs> RunningSystemImages
        {
            get => _runningSystemImages ?? (_runningSystemImages = new InputList<Inputs.ClusterRunningSystemImageGetArgs>());
            set => _runningSystemImages = value;
        }

        /// <summary>
        /// RKE k8s cluster services (list maxitems:1)
        /// </summary>
        [Input("services")]
        public Input<Inputs.ClusterServicesGetArgs>? Services { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.etcd instead (list maxitems:1)
        /// </summary>
        [Input("servicesEtcdDeprecated")]
        public Input<Inputs.ClusterServicesEtcdDeprecatedGetArgs>? ServicesEtcdDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kube_api instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeApiDeprecated")]
        public Input<Inputs.ClusterServicesKubeApiDeprecatedGetArgs>? ServicesKubeApiDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kube_controller instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeControllerDeprecated")]
        public Input<Inputs.ClusterServicesKubeControllerDeprecatedGetArgs>? ServicesKubeControllerDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kubeproxy instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeProxyDeprecated")]
        public Input<Inputs.ClusterServicesKubeProxyDeprecatedGetArgs>? ServicesKubeProxyDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.scheduler instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeSchedulerDeprecated")]
        public Input<Inputs.ClusterServicesKubeSchedulerDeprecatedGetArgs>? ServicesKubeSchedulerDeprecated { get; set; }

        /// <summary>
        /// (DEPRECATED) Use services.kubelet instead (list maxitems:1)
        /// </summary>
        [Input("servicesKubeletDeprecated")]
        public Input<Inputs.ClusterServicesKubeletDeprecatedGetArgs>? ServicesKubeletDeprecated { get; set; }

        /// <summary>
        /// SSH Agent Auth enable (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// SSH Certificate Path (string)
        /// </summary>
        [Input("sshCertPath")]
        public Input<string>? SshCertPath { get; set; }

        /// <summary>
        /// SSH Private Key Path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// RKE k8s cluster system images list (list maxitems:1)
        /// </summary>
        [Input("systemImages")]
        public Input<Inputs.ClusterSystemImagesGetArgs>? SystemImages { get; set; }

        /// <summary>
        /// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
        /// </summary>
        [Input("updateOnly")]
        public Input<bool>? UpdateOnly { get; set; }

        /// <summary>
        /// RKE k8s cluster upgrade strategy (list maxitems:1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<Inputs.ClusterUpgradeStrategyGetArgs>? UpgradeStrategy { get; set; }

        [Input("workerHosts")]
        private InputList<Inputs.ClusterWorkerHostGetArgs>? _workerHosts;

        /// <summary>
        /// (Computed) RKE k8s cluster worker nodes (list)
        /// </summary>
        public InputList<Inputs.ClusterWorkerHostGetArgs> WorkerHosts
        {
            get => _workerHosts ?? (_workerHosts = new InputList<Inputs.ClusterWorkerHostGetArgs>());
            set => _workerHosts = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
