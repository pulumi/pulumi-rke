// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rke.Outputs
{

    [OutputType]
    public sealed class ClusterNode
    {
        /// <summary>
        /// IP or FQDN that is fully resolvable and used for SSH communication
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Docker socket on the node that will be used in tunneling
        /// </summary>
        public readonly string? DockerSocket;
        /// <summary>
        /// Hostname override
        /// </summary>
        public readonly string? HostnameOverride;
        /// <summary>
        /// Internal address that will be used for components communication
        /// </summary>
        public readonly string? InternalAddress;
        /// <summary>
        /// Node Labels
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Name of the host provisioned via docker machine
        /// </summary>
        public readonly string? NodeName;
        /// <summary>
        /// Port used for SSH communication
        /// </summary>
        public readonly string? Port;
        /// <summary>
        /// Node roles in k8s cluster [controlplane/worker/etcd])
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// Node role in kubernetes cluster [controlplane/worker/etcd], specified by a comma-separated string
        /// </summary>
        public readonly string? RolesDeprecated;
        /// <summary>
        /// SSH Agent Auth enable (bool)
        /// </summary>
        public readonly bool? SshAgentAuth;
        /// <summary>
        /// SSH Certificate
        /// </summary>
        public readonly string? SshCert;
        /// <summary>
        /// SSH Certificate Path (string)
        /// </summary>
        public readonly string? SshCertPath;
        /// <summary>
        /// SSH Private Key
        /// </summary>
        public readonly string? SshKey;
        /// <summary>
        /// SSH Private Key Path (string)
        /// </summary>
        public readonly string? SshKeyPath;
        /// <summary>
        /// Node taints
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterNodeTaint> Taints;
        /// <summary>
        /// SSH user that will be used by RKE
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ClusterNode(
            string address,

            string? dockerSocket,

            string? hostnameOverride,

            string? internalAddress,

            ImmutableDictionary<string, string>? labels,

            string? nodeName,

            string? port,

            ImmutableArray<string> roles,

            string? rolesDeprecated,

            bool? sshAgentAuth,

            string? sshCert,

            string? sshCertPath,

            string? sshKey,

            string? sshKeyPath,

            ImmutableArray<Outputs.ClusterNodeTaint> taints,

            string user)
        {
            Address = address;
            DockerSocket = dockerSocket;
            HostnameOverride = hostnameOverride;
            InternalAddress = internalAddress;
            Labels = labels;
            NodeName = nodeName;
            Port = port;
            Roles = roles;
            RolesDeprecated = rolesDeprecated;
            SshAgentAuth = sshAgentAuth;
            SshCert = sshCert;
            SshCertPath = sshCertPath;
            SshKey = sshKey;
            SshKeyPath = sshKeyPath;
            Taints = taints;
            User = user;
        }
    }
}
