// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rke.Outputs
{

    [OutputType]
    public sealed class ClusterServicesKubelet
    {
        /// <summary>
        /// (Computed) RKE k8s cluster dns server (string)
        /// </summary>
        public readonly string? ClusterDnsServer;
        /// <summary>
        /// (Computed) RKE k8s cluster domain (string)
        /// </summary>
        public readonly string? ClusterDomain;
        /// <summary>
        /// Extra arguments that are added to the kubelet services
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ExtraArgs;
        /// <summary>
        /// Extra binds added to the worker nodes
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra env added to the nodes
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Fail if swap is enabled
        /// </summary>
        public readonly bool? FailSwapOn;
        public readonly bool? GenerateServingCertificate;
        /// <summary>
        /// Docker image of the kubelet service
        /// </summary>
        public readonly string? Image;
        /// <summary>
        /// The image whose network/ipc namespaces containers in each pod will use
        /// </summary>
        public readonly string? InfraContainerImage;

        [OutputConstructor]
        private ClusterServicesKubelet(
            string? clusterDnsServer,

            string? clusterDomain,

            ImmutableDictionary<string, object>? extraArgs,

            ImmutableArray<string> extraBinds,

            ImmutableArray<string> extraEnvs,

            bool? failSwapOn,

            bool? generateServingCertificate,

            string? image,

            string? infraContainerImage)
        {
            ClusterDnsServer = clusterDnsServer;
            ClusterDomain = clusterDomain;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            FailSwapOn = failSwapOn;
            GenerateServingCertificate = generateServingCertificate;
            Image = image;
            InfraContainerImage = infraContainerImage;
        }
    }
}
