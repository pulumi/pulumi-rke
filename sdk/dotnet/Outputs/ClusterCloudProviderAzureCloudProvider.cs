// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rke.Outputs
{

    [OutputType]
    public sealed class ClusterCloudProviderAzureCloudProvider
    {
        /// <summary>
        /// The password of the client certificate for an AAD application with RBAC access to talk to Azure RM APIs
        /// </summary>
        public readonly string? AadClientCertPassword;
        /// <summary>
        /// The path of a client certificate for an AAD application with RBAC access to talk to Azure RM APIs
        /// </summary>
        public readonly string? AadClientCertPath;
        /// <summary>
        /// The ClientID for an AAD application with RBAC access to talk to Azure RM APIs
        /// </summary>
        public readonly string AadClientId;
        /// <summary>
        /// The ClientSecret for an AAD application with RBAC access to talk to Azure RM APIs
        /// </summary>
        public readonly string AadClientSecret;
        /// <summary>
        /// The cloud environment identifier. Takes values from https://github.com/Azure/go-autorest/blob/ec5f4903f77ed9927ac95b19ab8e44ada64c1356/autorest/azure/environments.go#L13
        /// </summary>
        public readonly string? Cloud;
        /// <summary>
        /// Enable exponential backoff to manage resource request retries
        /// </summary>
        public readonly bool? CloudProviderBackoff;
        /// <summary>
        /// Backoff duration
        /// </summary>
        public readonly int? CloudProviderBackoffDuration;
        /// <summary>
        /// Backoff exponent
        /// </summary>
        public readonly int? CloudProviderBackoffExponent;
        /// <summary>
        /// Backoff jitter
        /// </summary>
        public readonly int? CloudProviderBackoffJitter;
        /// <summary>
        /// Backoff retry limit
        /// </summary>
        public readonly int? CloudProviderBackoffRetries;
        /// <summary>
        /// Enable rate limiting
        /// </summary>
        public readonly bool? CloudProviderRateLimit;
        public readonly int? CloudProviderRateLimitBucket;
        /// <summary>
        /// Rate limit QPS
        /// </summary>
        public readonly int? CloudProviderRateLimitQps;
        /// <summary>
        /// Load balancer type (basic | standard). Must be standard for auto-scaling
        /// </summary>
        public readonly string? LoadBalancerSku;
        /// <summary>
        /// The location of the resource group that the cluster is deployed in
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Maximum allowed LoadBalancer Rule Count is the limit enforced by Azure Load balancer
        /// </summary>
        public readonly int? MaximumLoadBalancerRuleCount;
        /// <summary>
        /// The name of the availability set that should be used as the load balancer backendIf this is set, the Azure cloudprovider will only add nodes from that availability set to the loadbalancer backend pool. If this is not set, and multiple agent pools (availability sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (availability sets), you MUST set this field.
        /// </summary>
        public readonly string? PrimaryAvailabilitySetName;
        /// <summary>
        /// The name of the scale set that should be used as the load balancer backend.If this is set, the Azure cloudprovider will only add nodes from that scale set to the loadbalancer backend pool. If this is not set, and multiple agent pools (scale sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (scale sets), you MUST set this field.
        /// </summary>
        public readonly string? PrimaryScaleSetName;
        /// <summary>
        /// The name of the resource group that the cluster is deployed in
        /// </summary>
        public readonly string? ResourceGroup;
        /// <summary>
        /// (Optional in 1.6) The name of the route table attached to the subnet that the cluster is deployed in
        /// </summary>
        public readonly string? RouteTableName;
        /// <summary>
        /// The name of the security group attached to the cluster's subnet
        /// </summary>
        public readonly string? SecurityGroupName;
        /// <summary>
        /// The name of the Subnet that the cluster is deployed in
        /// </summary>
        public readonly string? SubnetName;
        /// <summary>
        /// The ID of the Azure Subscription that the cluster is deployed in
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// The AAD Tenant ID for the Subscription that the cluster is deployed in
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Use instance metadata service where possible
        /// </summary>
        public readonly bool? UseInstanceMetadata;
        /// <summary>
        /// Use managed service identity for the virtual machine to access Azure ARM APIs
        /// </summary>
        public readonly bool? UseManagedIdentityExtension;
        /// <summary>
        /// The type of azure nodes. If not set, it will be default to standard.
        /// </summary>
        public readonly string? VmType;
        /// <summary>
        /// The name of the VNet that the cluster is deployed in
        /// </summary>
        public readonly string? VnetName;
        /// <summary>
        /// The name of the resource group that the Vnet is deployed in
        /// </summary>
        public readonly string? VnetResourceGroup;

        [OutputConstructor]
        private ClusterCloudProviderAzureCloudProvider(
            string? aadClientCertPassword,

            string? aadClientCertPath,

            string aadClientId,

            string aadClientSecret,

            string? cloud,

            bool? cloudProviderBackoff,

            int? cloudProviderBackoffDuration,

            int? cloudProviderBackoffExponent,

            int? cloudProviderBackoffJitter,

            int? cloudProviderBackoffRetries,

            bool? cloudProviderRateLimit,

            int? cloudProviderRateLimitBucket,

            int? cloudProviderRateLimitQps,

            string? loadBalancerSku,

            string? location,

            int? maximumLoadBalancerRuleCount,

            string? primaryAvailabilitySetName,

            string? primaryScaleSetName,

            string? resourceGroup,

            string? routeTableName,

            string? securityGroupName,

            string? subnetName,

            string subscriptionId,

            string tenantId,

            bool? useInstanceMetadata,

            bool? useManagedIdentityExtension,

            string? vmType,

            string? vnetName,

            string? vnetResourceGroup)
        {
            AadClientCertPassword = aadClientCertPassword;
            AadClientCertPath = aadClientCertPath;
            AadClientId = aadClientId;
            AadClientSecret = aadClientSecret;
            Cloud = cloud;
            CloudProviderBackoff = cloudProviderBackoff;
            CloudProviderBackoffDuration = cloudProviderBackoffDuration;
            CloudProviderBackoffExponent = cloudProviderBackoffExponent;
            CloudProviderBackoffJitter = cloudProviderBackoffJitter;
            CloudProviderBackoffRetries = cloudProviderBackoffRetries;
            CloudProviderRateLimit = cloudProviderRateLimit;
            CloudProviderRateLimitBucket = cloudProviderRateLimitBucket;
            CloudProviderRateLimitQps = cloudProviderRateLimitQps;
            LoadBalancerSku = loadBalancerSku;
            Location = location;
            MaximumLoadBalancerRuleCount = maximumLoadBalancerRuleCount;
            PrimaryAvailabilitySetName = primaryAvailabilitySetName;
            PrimaryScaleSetName = primaryScaleSetName;
            ResourceGroup = resourceGroup;
            RouteTableName = routeTableName;
            SecurityGroupName = securityGroupName;
            SubnetName = subnetName;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
            UseInstanceMetadata = useInstanceMetadata;
            UseManagedIdentityExtension = useManagedIdentityExtension;
            VmType = vmType;
            VnetName = vnetName;
            VnetResourceGroup = vnetResourceGroup;
        }
    }
}
