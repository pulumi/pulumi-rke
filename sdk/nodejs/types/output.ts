// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterAuthentication {
    /**
     * List of additional hostnames and IPs to include in the api server PKI cert (list)
     */
    sans: string[];
    /**
     * Authentication strategy that will be used in RKE k8s cluster. Default: `x509` (string)
     */
    strategy?: string;
    /**
     * Webhook configuration options (list maxitem: 1)
     */
    webhook: outputs.ClusterAuthenticationWebhook;
}

export interface ClusterAuthenticationWebhook {
    /**
     * Controls how long to cache authentication decisions (string)
     */
    cacheTimeout?: string;
    /**
     * Multiline string that represent a custom webhook config file (string)
     */
    configFile?: string;
}

export interface ClusterAuthorization {
    /**
     * RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)
     */
    mode?: string;
    /**
     * RKE options for authorization (map)
     */
    options?: {[key: string]: any};
}

export interface ClusterBastionHost {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Ignore proxy env vars at Bastion Host? Default: `false` (bool)
     */
    ignoreProxyEnvVars?: boolean;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * SSH Agent Auth enable (bool)
     */
    sshAgentAuth: boolean;
    /**
     * SSH Certificate Key (string)
     */
    sshCert?: string;
    /**
     * SSH Certificate Path (string)
     */
    sshCertPath: string;
    /**
     * SSH Private Key (string)
     */
    sshKey?: string;
    /**
     * SSH Private Key Path (string)
     */
    sshKeyPath: string;
    /**
     * SSH User to Bastion Host (string)
     */
    user: string;
}

export interface ClusterCertificate {
    certificate: string;
    commonName: string;
    config: string;
    configEnvName: string;
    configPath: string;
    envName: string;
    /**
     * (Computed) The ID of the resource (string)
     */
    id: string;
    /**
     * Use service instead
     */
    key: string;
    keyEnvName: string;
    keyPath: string;
    /**
     * Cloud Provider name. `aws`, `azure`, `custom`, `external`, `openstack`, `vsphere` are supported (string)
     */
    name: string;
    ouName: string;
    /**
     * Path for etcd service (string)
     */
    path: string;
}

export interface ClusterCloudProvider {
    /**
     * Use awsCloudProvider instead
     *
     * @deprecated Use aws_cloud_provider instead
     */
    awsCloudConfig?: outputs.ClusterCloudProviderAwsCloudConfig;
    /**
     * AWS Cloud Provider config [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
     */
    awsCloudProvider?: outputs.ClusterCloudProviderAwsCloudProvider;
    /**
     * Use azureCloudProvider instead
     *
     * @deprecated Use azure_cloud_provider instead
     */
    azureCloudConfig?: outputs.ClusterCloudProviderAzureCloudConfig;
    /**
     * Azure Cloud Provider config [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
     */
    azureCloudProvider?: outputs.ClusterCloudProviderAzureCloudProvider;
    /**
     * Use customCloudProvider instead
     *
     * @deprecated Use custom_cloud_provider instead
     */
    customCloudConfig?: string;
    /**
     * Custom Cloud Provider config (string)
     */
    customCloudProvider?: string;
    /**
     * Cloud Provider name. `aws`, `azure`, `custom`, `external`, `openstack`, `vsphere` are supported (string)
     */
    name: string;
    /**
     * Use openstackCloudProvider instead
     *
     * @deprecated Use openstack_cloud_provider instead
     */
    openstackCloudConfig?: outputs.ClusterCloudProviderOpenstackCloudConfig;
    /**
     * Openstack Cloud Provider config [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
     */
    openstackCloudProvider?: outputs.ClusterCloudProviderOpenstackCloudProvider;
    /**
     * Use vsphereCloudProvider instead
     *
     * @deprecated Use vsphere_cloud_provider instead
     */
    vsphereCloudConfig?: outputs.ClusterCloudProviderVsphereCloudConfig;
    /**
     * Vsphere Cloud Provider config [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtualCenter` configuration. (list maxitems:1)
     */
    vsphereCloudProvider?: outputs.ClusterCloudProviderVsphereCloudProvider;
}

export interface ClusterCloudProviderAwsCloudConfig {
    /**
     * (list maxitems:1)
     */
    global?: outputs.ClusterCloudProviderAwsCloudConfigGlobal;
    /**
     * (list)
     */
    serviceOverrides?: outputs.ClusterCloudProviderAwsCloudConfigServiceOverride[];
}

export interface ClusterCloudProviderAwsCloudConfigGlobal {
    /**
     * Disables the automatic ingress creation. Default `false` (bool)
     */
    disableSecurityGroupIngress?: boolean;
    /**
     * Setting this to true will disable the check and provide a warning that the check was skipped. Default `false` (bool)
     */
    disableStrictZoneCheck?: boolean;
    /**
     * Use these ELB security groups instead create new (string)
     */
    elbSecurityGroup?: string;
    /**
     * The cluster id we'll use to identify our cluster resources (string)
     */
    kubernetesClusterId?: string;
    /**
     * Legacy cluster id we'll use to identify our cluster resources (string)
     */
    kubernetesClusterTag?: string;
    /**
     * IAM role to assume when interaction with AWS APIs (string)
     */
    roleArn?: string;
    /**
     * Enables using a specific RouteTable (string)
     */
    routeTableId?: string;
    /**
     * Enables using a specific subnet to use for ELB's (string)
     */
    subnetId?: string;
    /**
     * The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided (string)
     */
    vpc?: string;
    /**
     * The AWS zone (string)
     */
    zone?: string;
}

export interface ClusterCloudProviderAwsCloudConfigServiceOverride {
    /**
     * Use service instead
     *
     * @deprecated Use service instead
     */
    key?: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * (string)
     */
    service: string;
    /**
     * (string)
     */
    signingMethod: string;
    /**
     * (string)
     */
    signingName?: string;
    /**
     * (string)
     */
    signingRegion?: string;
    /**
     * (string)
     */
    url?: string;
}

export interface ClusterCloudProviderAwsCloudProvider {
    /**
     * (list maxitems:1)
     */
    global?: outputs.ClusterCloudProviderAwsCloudProviderGlobal;
    /**
     * (list)
     */
    serviceOverrides?: outputs.ClusterCloudProviderAwsCloudProviderServiceOverride[];
}

export interface ClusterCloudProviderAwsCloudProviderGlobal {
    /**
     * Disables the automatic ingress creation. Default `false` (bool)
     */
    disableSecurityGroupIngress?: boolean;
    /**
     * Setting this to true will disable the check and provide a warning that the check was skipped. Default `false` (bool)
     */
    disableStrictZoneCheck?: boolean;
    /**
     * Use these ELB security groups instead create new (string)
     */
    elbSecurityGroup?: string;
    /**
     * The cluster id we'll use to identify our cluster resources (string)
     */
    kubernetesClusterId?: string;
    /**
     * Legacy cluster id we'll use to identify our cluster resources (string)
     */
    kubernetesClusterTag?: string;
    /**
     * IAM role to assume when interaction with AWS APIs (string)
     */
    roleArn?: string;
    /**
     * Enables using a specific RouteTable (string)
     */
    routeTableId?: string;
    /**
     * Enables using a specific subnet to use for ELB's (string)
     */
    subnetId?: string;
    /**
     * The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided (string)
     */
    vpc?: string;
    /**
     * The AWS zone (string)
     */
    zone?: string;
}

export interface ClusterCloudProviderAwsCloudProviderServiceOverride {
    /**
     * Use service instead
     *
     * @deprecated Use service instead
     */
    key?: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * (string)
     */
    service: string;
    /**
     * (string)
     */
    signingMethod: string;
    /**
     * (string)
     */
    signingName?: string;
    /**
     * (string)
     */
    signingRegion?: string;
    /**
     * (string)
     */
    url?: string;
}

export interface ClusterCloudProviderAzureCloudConfig {
    /**
     * (string)
     */
    aadClientCertPassword?: string;
    /**
     * (string)
     */
    aadClientCertPath?: string;
    /**
     * (string)
     */
    aadClientId: string;
    /**
     * (string)
     */
    aadClientSecret: string;
    /**
     * (string)
     */
    cloud?: string;
    /**
     * (bool)
     */
    cloudProviderBackoff?: boolean;
    /**
     * (int)
     */
    cloudProviderBackoffDuration?: number;
    /**
     * (int)
     */
    cloudProviderBackoffExponent?: number;
    /**
     * (int)
     */
    cloudProviderBackoffJitter?: number;
    /**
     * (int)
     */
    cloudProviderBackoffRetries?: number;
    /**
     * (bool)
     */
    cloudProviderRateLimit?: boolean;
    /**
     * (int)
     */
    cloudProviderRateLimitBucket: number;
    /**
     * (int)
     */
    cloudProviderRateLimitQps?: number;
    loadBalancerSku?: string;
    /**
     * (string)
     */
    location?: string;
    /**
     * (int)
     */
    maximumLoadBalancerRuleCount?: number;
    /**
     * (string)
     */
    primaryAvailabilitySetName?: string;
    /**
     * (string)
     */
    primaryScaleSetName?: string;
    /**
     * (string)
     */
    resourceGroup?: string;
    /**
     * (string)
     */
    routeTableName?: string;
    /**
     * (string)
     */
    securityGroupName?: string;
    /**
     * (string)
     */
    subnetName?: string;
    /**
     * (string)
     */
    subscriptionId: string;
    /**
     * (string)
     */
    tenantId: string;
    /**
     * (bool)
     */
    useInstanceMetadata?: boolean;
    /**
     * (bool)
     */
    useManagedIdentityExtension?: boolean;
    /**
     * (string)
     */
    vmType?: string;
    /**
     * (string)
     */
    vnetName?: string;
    /**
     * (string)
     */
    vnetResourceGroup?: string;
}

export interface ClusterCloudProviderAzureCloudProvider {
    /**
     * (string)
     */
    aadClientCertPassword?: string;
    /**
     * (string)
     */
    aadClientCertPath?: string;
    /**
     * (string)
     */
    aadClientId: string;
    /**
     * (string)
     */
    aadClientSecret: string;
    /**
     * (string)
     */
    cloud?: string;
    /**
     * (bool)
     */
    cloudProviderBackoff?: boolean;
    /**
     * (int)
     */
    cloudProviderBackoffDuration?: number;
    /**
     * (int)
     */
    cloudProviderBackoffExponent?: number;
    /**
     * (int)
     */
    cloudProviderBackoffJitter?: number;
    /**
     * (int)
     */
    cloudProviderBackoffRetries?: number;
    /**
     * (bool)
     */
    cloudProviderRateLimit?: boolean;
    /**
     * (int)
     */
    cloudProviderRateLimitBucket: number;
    /**
     * (int)
     */
    cloudProviderRateLimitQps?: number;
    loadBalancerSku?: string;
    /**
     * (string)
     */
    location?: string;
    /**
     * (int)
     */
    maximumLoadBalancerRuleCount?: number;
    /**
     * (string)
     */
    primaryAvailabilitySetName?: string;
    /**
     * (string)
     */
    primaryScaleSetName?: string;
    /**
     * (string)
     */
    resourceGroup?: string;
    /**
     * (string)
     */
    routeTableName?: string;
    /**
     * (string)
     */
    securityGroupName?: string;
    /**
     * (string)
     */
    subnetName?: string;
    /**
     * (string)
     */
    subscriptionId: string;
    /**
     * (string)
     */
    tenantId: string;
    /**
     * (bool)
     */
    useInstanceMetadata?: boolean;
    /**
     * (bool)
     */
    useManagedIdentityExtension?: boolean;
    /**
     * (string)
     */
    vmType?: string;
    /**
     * (string)
     */
    vnetName?: string;
    /**
     * (string)
     */
    vnetResourceGroup?: string;
}

export interface ClusterCloudProviderOpenstackCloudConfig {
    /**
     * (list maxitems:1)
     */
    blockStorage: outputs.ClusterCloudProviderOpenstackCloudConfigBlockStorage;
    /**
     * (list maxitems:1)
     */
    global: outputs.ClusterCloudProviderOpenstackCloudConfigGlobal;
    /**
     * (list maxitems:1)
     */
    loadBalancer: outputs.ClusterCloudProviderOpenstackCloudConfigLoadBalancer;
    /**
     * (list maxitems:1)
     */
    metadata: outputs.ClusterCloudProviderOpenstackCloudConfigMetadata;
    /**
     * (list maxitems:1)
     */
    route: outputs.ClusterCloudProviderOpenstackCloudConfigRoute;
}

export interface ClusterCloudProviderOpenstackCloudConfigBlockStorage {
    /**
     * (string)
     */
    bsVersion?: string;
    /**
     * (string)
     */
    ignoreVolumeAz?: boolean;
    /**
     * (string)
     */
    trustDevicePath?: boolean;
}

export interface ClusterCloudProviderOpenstackCloudConfigGlobal {
    /**
     * (string)
     */
    authUrl: string;
    /**
     * (string)
     */
    caFile?: string;
    /**
     * Required if `domainName` not provided. (string)
     */
    domainId?: string;
    /**
     * Required if `domainId` not provided. (string)
     */
    domainName?: string;
    /**
     * (string)
     */
    password: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * (string)
     */
    tenantId?: string;
    /**
     * Required if `tenantId` not provided. (string)
     */
    tenantName?: string;
    /**
     * (string)
     */
    trustId?: string;
    /**
     * Required if `username` not provided. (string)
     */
    userId?: string;
    /**
     * Required if `userId` not provided. (string)
     */
    username?: string;
}

export interface ClusterCloudProviderOpenstackCloudConfigLoadBalancer {
    /**
     * (bool)
     */
    createMonitor?: boolean;
    /**
     * (string)
     */
    floatingNetworkId?: string;
    /**
     * (string)
     */
    lbMethod?: string;
    /**
     * (string)
     */
    lbProvider?: string;
    /**
     * (string)
     */
    lbVersion?: string;
    /**
     * (bool)
     */
    manageSecurityGroups?: boolean;
    /**
     * (string)
     */
    monitorDelay?: string;
    /**
     * (int)
     */
    monitorMaxRetries?: number;
    /**
     * (string)
     */
    monitorTimeout?: string;
    /**
     * Enables using a specific subnet to use for ELB's (string)
     */
    subnetId?: string;
    /**
     * (bool)
     */
    useOctavia?: boolean;
}

export interface ClusterCloudProviderOpenstackCloudConfigMetadata {
    /**
     * (int)
     */
    requestTimeout?: number;
    /**
     * (string)
     */
    searchOrder?: string;
}

export interface ClusterCloudProviderOpenstackCloudConfigRoute {
    /**
     * (string)
     */
    routerId?: string;
}

export interface ClusterCloudProviderOpenstackCloudProvider {
    /**
     * (list maxitems:1)
     */
    blockStorage: outputs.ClusterCloudProviderOpenstackCloudProviderBlockStorage;
    /**
     * (list maxitems:1)
     */
    global: outputs.ClusterCloudProviderOpenstackCloudProviderGlobal;
    /**
     * (list maxitems:1)
     */
    loadBalancer: outputs.ClusterCloudProviderOpenstackCloudProviderLoadBalancer;
    /**
     * (list maxitems:1)
     */
    metadata: outputs.ClusterCloudProviderOpenstackCloudProviderMetadata;
    /**
     * (list maxitems:1)
     */
    route: outputs.ClusterCloudProviderOpenstackCloudProviderRoute;
}

export interface ClusterCloudProviderOpenstackCloudProviderBlockStorage {
    /**
     * (string)
     */
    bsVersion?: string;
    /**
     * (string)
     */
    ignoreVolumeAz?: boolean;
    /**
     * (string)
     */
    trustDevicePath?: boolean;
}

export interface ClusterCloudProviderOpenstackCloudProviderGlobal {
    /**
     * (string)
     */
    authUrl: string;
    /**
     * (string)
     */
    caFile?: string;
    /**
     * Required if `domainName` not provided. (string)
     */
    domainId?: string;
    /**
     * Required if `domainId` not provided. (string)
     */
    domainName?: string;
    /**
     * (string)
     */
    password: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * (string)
     */
    tenantId?: string;
    /**
     * Required if `tenantId` not provided. (string)
     */
    tenantName?: string;
    /**
     * (string)
     */
    trustId?: string;
    /**
     * Required if `username` not provided. (string)
     */
    userId?: string;
    /**
     * Required if `userId` not provided. (string)
     */
    username?: string;
}

export interface ClusterCloudProviderOpenstackCloudProviderLoadBalancer {
    /**
     * (bool)
     */
    createMonitor?: boolean;
    /**
     * (string)
     */
    floatingNetworkId?: string;
    /**
     * (string)
     */
    lbMethod?: string;
    /**
     * (string)
     */
    lbProvider?: string;
    /**
     * (string)
     */
    lbVersion?: string;
    /**
     * (bool)
     */
    manageSecurityGroups?: boolean;
    /**
     * (string)
     */
    monitorDelay?: string;
    /**
     * (int)
     */
    monitorMaxRetries?: number;
    /**
     * (string)
     */
    monitorTimeout?: string;
    /**
     * Enables using a specific subnet to use for ELB's (string)
     */
    subnetId?: string;
    /**
     * (bool)
     */
    useOctavia?: boolean;
}

export interface ClusterCloudProviderOpenstackCloudProviderMetadata {
    /**
     * (int)
     */
    requestTimeout?: number;
    /**
     * (string)
     */
    searchOrder?: string;
}

export interface ClusterCloudProviderOpenstackCloudProviderRoute {
    /**
     * (string)
     */
    routerId?: string;
}

export interface ClusterCloudProviderVsphereCloudConfig {
    /**
     * (list maxitems:1)
     */
    disk: outputs.ClusterCloudProviderVsphereCloudConfigDisk;
    /**
     * (list maxitems:1)
     */
    global: outputs.ClusterCloudProviderVsphereCloudConfigGlobal;
    /**
     * RKE k8s cluster network configuration (list maxitems:1)
     */
    network: outputs.ClusterCloudProviderVsphereCloudConfigNetwork;
    /**
     * (List)
     */
    virtualCenters: outputs.ClusterCloudProviderVsphereCloudConfigVirtualCenter[];
    /**
     * (list maxitems:1)
     */
    workspace: outputs.ClusterCloudProviderVsphereCloudConfigWorkspace;
}

export interface ClusterCloudProviderVsphereCloudConfigDisk {
    /**
     * (string)
     */
    scsiControllerType?: string;
}

export interface ClusterCloudProviderVsphereCloudConfigGlobal {
    /**
     * (string)
     */
    datacenter?: string;
    /**
     * (string)
     */
    datacenters: string;
    /**
     * (string)
     */
    datastore?: string;
    /**
     * (bool)
     */
    insecureFlag?: boolean;
    /**
     * (string)
     */
    password?: string;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * (int)
     */
    soapRoundtripCount?: number;
    /**
     * SSH User to Bastion Host (string)
     */
    user?: string;
    /**
     * (string)
     */
    vmName?: string;
    /**
     * (string)
     */
    vmUuid?: string;
    /**
     * (string)
     */
    workingDir?: string;
}

export interface ClusterCloudProviderVsphereCloudConfigNetwork {
    /**
     * (string)
     */
    publicNetwork?: string;
}

export interface ClusterCloudProviderVsphereCloudConfigVirtualCenter {
    /**
     * (string)
     */
    datacenters: string;
    /**
     * Cloud Provider name. `aws`, `azure`, `custom`, `external`, `openstack`, `vsphere` are supported (string)
     */
    name: string;
    /**
     * (string)
     */
    password: string;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * (int)
     */
    soapRoundtripCount?: number;
    /**
     * SSH User to Bastion Host (string)
     */
    user: string;
}

export interface ClusterCloudProviderVsphereCloudConfigWorkspace {
    /**
     * (string)
     */
    datacenter: string;
    /**
     * (string)
     */
    defaultDatastore?: string;
    /**
     * (string)
     */
    folder?: string;
    /**
     * (string)
     */
    resourcepoolPath?: string;
    /**
     * (string)
     */
    server: string;
}

export interface ClusterCloudProviderVsphereCloudProvider {
    /**
     * (list maxitems:1)
     */
    disk: outputs.ClusterCloudProviderVsphereCloudProviderDisk;
    /**
     * (list maxitems:1)
     */
    global: outputs.ClusterCloudProviderVsphereCloudProviderGlobal;
    /**
     * RKE k8s cluster network configuration (list maxitems:1)
     */
    network: outputs.ClusterCloudProviderVsphereCloudProviderNetwork;
    /**
     * (List)
     */
    virtualCenters: outputs.ClusterCloudProviderVsphereCloudProviderVirtualCenter[];
    /**
     * (list maxitems:1)
     */
    workspace: outputs.ClusterCloudProviderVsphereCloudProviderWorkspace;
}

export interface ClusterCloudProviderVsphereCloudProviderDisk {
    /**
     * (string)
     */
    scsiControllerType?: string;
}

export interface ClusterCloudProviderVsphereCloudProviderGlobal {
    /**
     * (string)
     */
    datacenter?: string;
    /**
     * (string)
     */
    datacenters: string;
    /**
     * (string)
     */
    datastore?: string;
    /**
     * (bool)
     */
    insecureFlag?: boolean;
    /**
     * (string)
     */
    password?: string;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * (int)
     */
    soapRoundtripCount?: number;
    /**
     * SSH User to Bastion Host (string)
     */
    user?: string;
    /**
     * (string)
     */
    vmName?: string;
    /**
     * (string)
     */
    vmUuid?: string;
    /**
     * (string)
     */
    workingDir?: string;
}

export interface ClusterCloudProviderVsphereCloudProviderNetwork {
    /**
     * (string)
     */
    publicNetwork?: string;
}

export interface ClusterCloudProviderVsphereCloudProviderVirtualCenter {
    /**
     * (string)
     */
    datacenters: string;
    /**
     * Cloud Provider name. `aws`, `azure`, `custom`, `external`, `openstack`, `vsphere` are supported (string)
     */
    name: string;
    /**
     * (string)
     */
    password: string;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * (int)
     */
    soapRoundtripCount?: number;
    /**
     * SSH User to Bastion Host (string)
     */
    user: string;
}

export interface ClusterCloudProviderVsphereCloudProviderWorkspace {
    /**
     * (string)
     */
    datacenter: string;
    /**
     * (string)
     */
    defaultDatastore?: string;
    /**
     * (string)
     */
    folder?: string;
    /**
     * (string)
     */
    resourcepoolPath?: string;
    /**
     * (string)
     */
    server: string;
}

export interface ClusterControlPlaneHost {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Name of the host provisioned via docker machine (string)
     */
    nodeName: string;
}

export interface ClusterDns {
    /**
     * Node selector key pair (map)
     */
    nodeSelector?: {[key: string]: any};
    /**
     * Nodelocal dns config  (list Maxitem: 1)
     */
    nodelocal?: outputs.ClusterDnsNodelocal;
    /**
     * DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
     */
    provider?: string;
    /**
     * Reverse CIDRs  (list)
     */
    reverseCidrs?: string[];
    /**
     * Upstream nameservers  (list)
     */
    upstreamNameservers?: string[];
}

export interface ClusterDnsNodelocal {
    /**
     * Nodelocal dns ip address (string)
     */
    ipAddress?: string;
    /**
     * Node selector key pair (map)
     */
    nodeSelector?: {[key: string]: any};
}

export interface ClusterEtcdHost {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Name of the host provisioned via docker machine (string)
     */
    nodeName: string;
}

export interface ClusterInactiveHost {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Name of the host provisioned via docker machine (string)
     */
    nodeName: string;
}

export interface ClusterIngress {
    defaultBackend?: boolean;
    /**
     * Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
     */
    dnsPolicy?: string;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs?: {[key: string]: any};
    /**
     * Ingress controller http port (int)
     */
    httpPort?: number;
    /**
     * Ingress controller https port (int)
     */
    httpsPort?: number;
    /**
     * Networt mode for the ingress controller. `hostNetwork`, `hostPort` and `none` are supported (string)
     */
    networkMode?: string;
    /**
     * Node selector key pair (map)
     */
    nodeSelector?: {[key: string]: any};
    /**
     * RKE options for authorization (map)
     */
    options?: {[key: string]: any};
    /**
     * DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
     */
    provider?: string;
}

export interface ClusterMonitoring {
    /**
     * Node selector key pair (map)
     */
    nodeSelector?: {[key: string]: any};
    /**
     * RKE options for authorization (map)
     */
    options?: {[key: string]: any};
    /**
     * DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
     */
    provider: string;
}

export interface ClusterNetwork {
    /**
     * Aci network provider config (list maxitems:1)
     */
    aciNetworkProvider?: outputs.ClusterNetworkAciNetworkProvider;
    /**
     * Calico network provider config (list maxitems:1)
     */
    calicoNetworkProvider?: outputs.ClusterNetworkCalicoNetworkProvider;
    /**
     * Canal network provider config (list maxitems:1)
     */
    canalNetworkProvider?: outputs.ClusterNetworkCanalNetworkProvider;
    /**
     * Flannel network provider config (list maxitems:1)
     */
    flannelNetworkProvider?: outputs.ClusterNetworkFlannelNetworkProvider;
    /**
     * Network provider MTU. Default `0` (int)
     */
    mtu?: number;
    /**
     * RKE options for authorization (map)
     */
    options: {[key: string]: any};
    /**
     * Network provider plugin. `calico`, `canal` (default), `flannel`, `none` and `weave` are supported. (string)
     */
    plugin?: string;
    /**
     * Weave network provider config (list maxitems:1)
     */
    weaveNetworkProvider?: outputs.ClusterNetworkWeaveNetworkProvider;
}

export interface ClusterNetworkAciNetworkProvider {
    /**
     * Attachment entity profile name on aci (string)
     */
    aep: string;
    /**
     * Ip address for apic hosts (list)
     */
    apicHosts: string[];
    /**
     * Base64 encoded certificate for aci apic user (string)
     */
    apicUserCrt: string;
    /**
     * Base64 encoded private key for aci apic user (string)
     */
    apicUserKey: string;
    /**
     * User name for aci apic (string)
     */
    apicUserName: string;
    /**
     * One of the supported encap types for aci(vlan/vxlan) (string)
     */
    encapType: string;
    /**
     * Subnet to use for dynamic external IPs on aci (string)
     * * `externStatic"` - (Required) Subnet to use for static external IPs on aci (string)
     */
    externDynamic: string;
    externStatic: string;
    /**
     * Vlan for infra network on aci (string)
     */
    infraVlan: string;
    /**
     * Vlan for node network on aci (string)
     */
    kubeApiVlan: string;
    /**
     * L3Out on aci (string)
     */
    l3out: string;
    /**
     * L3out external networks on aci (list)
     */
    l3outExternalNetworks: string[];
    /**
     * Mcast range end address for endpoint groups on aci (string)
     */
    mcastRangeEnd: string;
    /**
     * Mcast range start address for endpoint groups on aci (string)
     */
    mcastRangeStart: string;
    /**
     * Kubernetes node address subnet (string)
     */
    nodeSubnet: string;
    /**
     * Subnet to use for service graph endpoints on aci (string)
     */
    nodeSvcSubnet: string;
    /**
     * Vlan for service graph nodes on aci (string)
     */
    serviceVlan: string;
    /**
     * Port end range for Source Network Address Translation on aci (string)
     */
    snatPortRangeEnd?: string;
    /**
     * Port start range for Source Network Address Translation on aci (string)
     */
    snatPortRangeStart?: string;
    /**
     * Ports per node for Source Network Address Translation on aci (string)
     */
    snatPortsPerNode?: string;
    /**
     * Unique suffix for all cluster related objects in aci (string)
     */
    systemId: string;
    /**
     * UUID for this version of the input configuration (string)
     */
    token: string;
    /**
     * VRF Name on aci (string)
     */
    vrfName: string;
    /**
     * Tenant for VRF on aci (string)
     */
    vrfTenant: string;
}

export interface ClusterNetworkCalicoNetworkProvider {
    /**
     * RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
     */
    cloudProvider: string;
}

export interface ClusterNetworkCanalNetworkProvider {
    /**
     * Canal network interface (string)
     */
    iface: string;
}

export interface ClusterNetworkFlannelNetworkProvider {
    /**
     * Canal network interface (string)
     */
    iface: string;
}

export interface ClusterNetworkWeaveNetworkProvider {
    /**
     * (string)
     */
    password: string;
}

export interface ClusterNode {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Docker socket on the node that will be used in tunneling (string)
     */
    dockerSocket?: string;
    /**
     * Hostname override for node (string)
     */
    hostnameOverride?: string;
    /**
     * Internal address that will be used for components communication (string)
     */
    internalAddress?: string;
    /**
     * Node labels (map)
     */
    labels?: {[key: string]: any};
    /**
     * Name of the host provisioned via docker machine (string)
     */
    nodeName?: string;
    /**
     * SSH Port of Bastion Host. Default `22` (string)
     */
    port?: string;
    /**
     * Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
     */
    roles: string[];
    /**
     * @deprecated Use role instead
     */
    rolesDeprecated?: string;
    /**
     * SSH Agent Auth enable (bool)
     */
    sshAgentAuth: boolean;
    /**
     * SSH Certificate Key (string)
     */
    sshCert?: string;
    /**
     * SSH Certificate Path (string)
     */
    sshCertPath?: string;
    /**
     * SSH Private Key (string)
     */
    sshKey?: string;
    /**
     * SSH Private Key Path (string)
     */
    sshKeyPath?: string;
    /**
     * Node taints (list)
     */
    taints?: outputs.ClusterNodeTaint[];
    /**
     * SSH User to Bastion Host (string)
     */
    user: string;
}

export interface ClusterNodeTaint {
    /**
     * Taint effect. `NoExecute`, `NoSchedule` (default) and `PreferNoSchedule` are supported (string)
     */
    effect?: string;
    /**
     * Use service instead
     */
    key: string;
    /**
     * Taint value (string)
     */
    value: string;
}

export interface ClusterPrivateRegistry {
    /**
     * Set as default registry. Default `false` (bool)
     */
    isDefault?: boolean;
    /**
     * (string)
     */
    password?: string;
    /**
     * (string)
     */
    url: string;
    /**
     * SSH User to Bastion Host (string)
     */
    user?: string;
}

export interface ClusterRestore {
    /**
     * RKE k8s cluster restore configuration (list maxitems:1)
     */
    restore?: boolean;
    /**
     * Snapshot name (string)
     */
    snapshotName?: string;
}

export interface ClusterRotateCertificates {
    /**
     * Rotate CA Certificates. Default `false` (bool)
     */
    caCertificates?: boolean;
    /**
     * RKE k8s cluster services (list maxitems:1)
     */
    services?: string[];
}

export interface ClusterRunningSystemImage {
    /**
     * Docker image for aciCniDeployContainer (string)
     */
    aciCniDeployContainer?: string;
    /**
     * Docker image for aciControllerContainer (string)
     */
    aciControllerContainer?: string;
    /**
     * Docker image for aciHostContainer (string)
     */
    aciHostContainer?: string;
    /**
     * Docker image for aciMcastContainer (string)
     */
    aciMcastContainer?: string;
    /**
     * Docker image for aciOpflexContainer (string)
     */
    aciOpflexContainer?: string;
    /**
     * Docker image for aciOvsContainer (string)
     */
    aciOvsContainer?: string;
    /**
     * Docker image for alpine (string)
     */
    alpine?: string;
    /**
     * Docker image for calicoCni (string)
     */
    calicoCni?: string;
    /**
     * Docker image for calicoControllers (string)
     */
    calicoControllers?: string;
    /**
     * Docker image for calicoCtl (string)
     */
    calicoCtl?: string;
    /**
     * Docker image for calicoFlexVol (string)
     */
    calicoFlexVol?: string;
    /**
     * Docker image for calicoNode (string)
     */
    calicoNode?: string;
    /**
     * Docker image for canalCni (string)
     */
    canalCni?: string;
    /**
     * Docker image for canalFlannel (string)
     */
    canalFlannel?: string;
    /**
     * Docker image for canalFlexVol (string)
     */
    canalFlexVol?: string;
    /**
     * Docker image for canalNode (string)
     */
    canalNode?: string;
    /**
     * Docker image for certDownloader (string)
     */
    certDownloader?: string;
    /**
     * Docker image for coredns (string)
     */
    coredns?: string;
    /**
     * Docker image for corednsAutoscaler (string)
     */
    corednsAutoscaler?: string;
    /**
     * Docker image for dnsmasq (string)
     */
    dnsmasq?: string;
    /**
     * Etcd options for RKE services (list maxitems:1)
     */
    etcd?: string;
    /**
     * Docker image for flannel (string)
     */
    flannel?: string;
    /**
     * Docker image for flannelCni (string)
     */
    flannelCni?: string;
    /**
     * RKE k8s cluster ingress controller configuration (list maxitems:1)
     */
    ingress?: string;
    /**
     * Docker image for ingressBackend (string)
     */
    ingressBackend?: string;
    /**
     * Docker image for kubeDns (string)
     */
    kubeDns?: string;
    /**
     * Docker image for kubeDnsAutoscaler (string)
     */
    kubeDnsAutoscaler?: string;
    /**
     * Docker image for kubeDnsSidecar (string)
     */
    kubeDnsSidecar?: string;
    /**
     * Docker image for kubernetes (string)
     */
    kubernetes?: string;
    /**
     * Docker image for kubernetesServicesSidecar (string)
     */
    kubernetesServicesSidecar?: string;
    /**
     * Docker image for metricsServer (string)
     */
    metricsServer?: string;
    /**
     * Docker image for nginxProxy (string)
     */
    nginxProxy?: string;
    /**
     * Nodelocal dns config  (list Maxitem: 1)
     */
    nodelocal?: string;
    /**
     * Docker image for podInfraContainer (string)
     */
    podInfraContainer?: string;
    /**
     * Docker image for weaveCni (string)
     */
    weaveCni?: string;
    /**
     * Docker image for weaveNode (string)
     */
    weaveNode?: string;
    /**
     * Docker image for windowsPodInfraContainer (string)
     */
    windowsPodInfraContainer?: string;
}

export interface ClusterServices {
    /**
     * Etcd options for RKE services (list maxitems:1)
     */
    etcd: outputs.ClusterServicesEtcd;
    /**
     * Kube API options for RKE services (list maxitems:1)
     */
    kubeApi: outputs.ClusterServicesKubeApi;
    /**
     * Kube Controller options for RKE services (list maxitems:1)
     */
    kubeController: outputs.ClusterServicesKubeController;
    /**
     * Kubelet options for RKE services (list maxitems:1)
     */
    kubelet: outputs.ClusterServicesKubelet;
    /**
     * Kubeproxy options for RKE services (list maxitems:1)
     */
    kubeproxy: outputs.ClusterServicesKubeproxy;
    /**
     * Scheduler options for RKE services (list maxitems:1)
     */
    scheduler: outputs.ClusterServicesScheduler;
}

export interface ClusterServicesEtcd {
    /**
     * Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)
     */
    backupConfig: outputs.ClusterServicesEtcdBackupConfig;
    /**
     * TLS CA certificate for etcd service (string)
     */
    caCert: string;
    /**
     * TLS certificate for etcd service (string)
     */
    cert: string;
    /**
     * Creation option for etcd service (string)
     */
    creation: string;
    /**
     * External urls for etcd service (list)
     */
    externalUrls: string[];
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)
     */
    gid?: number;
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Use service instead
     */
    key: string;
    /**
     * Path for etcd service (string)
     */
    path: string;
    /**
     * Retention option for etcd service (string)
     */
    retention: string;
    /**
     * Snapshot option for etcd service. Default `true` (bool)
     */
    snapshot?: boolean;
    /**
     * Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)
     */
    uid?: number;
}

export interface ClusterServicesEtcdBackupConfig {
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled?: boolean;
    /**
     * Interval hours for etcd backup. Default `12` (int)
     */
    intervalHours?: number;
    /**
     * Retention option for etcd service (string)
     */
    retention?: number;
    /**
     * S3 config options for etcd backup (list maxitems:1)
     */
    s3BackupConfig?: outputs.ClusterServicesEtcdBackupConfigS3BackupConfig;
    /**
     * Safe timestamp for etcd backup. Default: `false` (bool)
     */
    safeTimestamp?: boolean;
    /**
     * Timeout in seconds for etcd backup. Default: `300`. Just for RKE v1.2.6 and above (int)
     */
    timeout?: number;
}

export interface ClusterServicesEtcdBackupConfigS3BackupConfig {
    /**
     * Access key for S3 service (string)
     */
    accessKey?: string;
    /**
     * Bucket name for S3 service (string)
     */
    bucketName?: string;
    /**
     * Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
     */
    customCa?: string;
    /**
     * Endpoint for S3 service (string)
     */
    endpoint?: string;
    /**
     * (string)
     */
    folder?: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * Secret key for S3 service (string)
     */
    secretKey?: string;
}

export interface ClusterServicesEtcdDeprecated {
    /**
     * Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)
     */
    backupConfig: outputs.ClusterServicesEtcdDeprecatedBackupConfig;
    /**
     * TLS CA certificate for etcd service (string)
     */
    caCert: string;
    /**
     * TLS certificate for etcd service (string)
     */
    cert: string;
    /**
     * Creation option for etcd service (string)
     */
    creation: string;
    /**
     * External urls for etcd service (list)
     */
    externalUrls: string[];
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)
     */
    gid?: number;
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Use service instead
     */
    key: string;
    /**
     * Path for etcd service (string)
     */
    path: string;
    /**
     * Retention option for etcd service (string)
     */
    retention: string;
    /**
     * Snapshot option for etcd service. Default `true` (bool)
     */
    snapshot?: boolean;
    /**
     * Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)
     */
    uid?: number;
}

export interface ClusterServicesEtcdDeprecatedBackupConfig {
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled?: boolean;
    /**
     * Interval hours for etcd backup. Default `12` (int)
     */
    intervalHours?: number;
    /**
     * Retention option for etcd service (string)
     */
    retention?: number;
    /**
     * S3 config options for etcd backup (list maxitems:1)
     */
    s3BackupConfig?: outputs.ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig;
    /**
     * Safe timestamp for etcd backup. Default: `false` (bool)
     */
    safeTimestamp?: boolean;
    /**
     * Timeout in seconds for etcd backup. Default: `300`. Just for RKE v1.2.6 and above (int)
     */
    timeout?: number;
}

export interface ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig {
    /**
     * Access key for S3 service (string)
     */
    accessKey?: string;
    /**
     * Bucket name for S3 service (string)
     */
    bucketName?: string;
    /**
     * Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
     */
    customCa?: string;
    /**
     * Endpoint for S3 service (string)
     */
    endpoint?: string;
    /**
     * (string)
     */
    folder?: string;
    /**
     * (string)
     */
    region?: string;
    /**
     * Secret key for S3 service (string)
     */
    secretKey?: string;
}

export interface ClusterServicesKubeApi {
    /**
     * Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) (bool)
     */
    alwaysPullImages: boolean;
    /**
     * K8s audit log configuration. (list maxitem: 1)
     */
    auditLog: outputs.ClusterServicesKubeApiAuditLog;
    /**
     * K8s event rate limit configuration. (list maxitem: 1)
     */
    eventRateLimit?: outputs.ClusterServicesKubeApiEventRateLimit;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Pod Security Policy option for kube API service (bool)
     */
    podSecurityPolicy: boolean;
    /**
     * [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
     */
    secretsEncryptionConfig?: outputs.ClusterServicesKubeApiSecretsEncryptionConfig;
    /**
     * Service Cluster IP Range option for kube API service (string)
     */
    serviceClusterIpRange: string;
    /**
     * Service Node Port Range option for kube API service (string)
     */
    serviceNodePortRange: string;
}

export interface ClusterServicesKubeApiAuditLog {
    /**
     * Audit log configuration. (list maxtiem: 1)
     */
    configuration: outputs.ClusterServicesKubeApiAuditLogConfiguration;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeApiAuditLogConfiguration {
    /**
     * Audit log format (string)
     */
    format: string;
    /**
     * Audit log max age (int)
     */
    maxAge: number;
    /**
     * Audit log max backup. Default: `10` (int)
     */
    maxBackup: number;
    /**
     * Audit log max size. Default: `100` (int)
     */
    maxSize: number;
    /**
     * Path for etcd service (string)
     */
    path: string;
    /**
     * Audit policy json encoded definition. `"apiVersion"` and `"kind":"Policy","rules"` fields are required in the json. Ex. `jsonencode({"apiVersion":"audit.k8s.io/v1","kind":"Policy","rules":[{"level":"RequestResponse","resources":[{"group":"","resources":["pods"]}]}]})` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)
     */
    policy: string;
}

export interface ClusterServicesKubeApiDeprecated {
    /**
     * Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) (bool)
     */
    alwaysPullImages: boolean;
    /**
     * K8s audit log configuration. (list maxitem: 1)
     */
    auditLog: outputs.ClusterServicesKubeApiDeprecatedAuditLog;
    /**
     * K8s event rate limit configuration. (list maxitem: 1)
     */
    eventRateLimit?: outputs.ClusterServicesKubeApiDeprecatedEventRateLimit;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Pod Security Policy option for kube API service (bool)
     */
    podSecurityPolicy: boolean;
    /**
     * [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
     */
    secretsEncryptionConfig?: outputs.ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig;
    /**
     * Service Cluster IP Range option for kube API service (string)
     */
    serviceClusterIpRange: string;
    /**
     * Service Node Port Range option for kube API service (string)
     */
    serviceNodePortRange: string;
}

export interface ClusterServicesKubeApiDeprecatedAuditLog {
    /**
     * Audit log configuration. (list maxtiem: 1)
     */
    configuration: outputs.ClusterServicesKubeApiDeprecatedAuditLogConfiguration;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeApiDeprecatedAuditLogConfiguration {
    /**
     * Audit log format (string)
     */
    format: string;
    /**
     * Audit log max age (int)
     */
    maxAge: number;
    /**
     * Audit log max backup. Default: `10` (int)
     */
    maxBackup: number;
    /**
     * Audit log max size. Default: `100` (int)
     */
    maxSize: number;
    /**
     * Path for etcd service (string)
     */
    path: string;
    /**
     * Audit policy json encoded definition. `"apiVersion"` and `"kind":"Policy","rules"` fields are required in the json. Ex. `jsonencode({"apiVersion":"audit.k8s.io/v1","kind":"Policy","rules":[{"level":"RequestResponse","resources":[{"group":"","resources":["pods"]}]}]})` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)
     */
    policy: string;
}

export interface ClusterServicesKubeApiDeprecatedEventRateLimit {
    /**
     * Audit log configuration. (list maxtiem: 1)
     */
    configuration: string;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig {
    /**
     * Secrets encryption yaml encoded custom configuration. `"apiVersion"` and `"kind":"EncryptionConfiguration"` fields are required in the yaml. Ex. `apiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - aescbc:\n      keys:\n      - name: k-fw5hn\n        secret: RTczRjFDODMwQzAyMDVBREU4NDJBMUZFNDhCNzM5N0I=\n    identity: {}\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string)
     */
    customConfig: string;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeApiEventRateLimit {
    /**
     * Audit log configuration. (list maxtiem: 1)
     */
    configuration: string;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeApiSecretsEncryptionConfig {
    /**
     * Secrets encryption yaml encoded custom configuration. `"apiVersion"` and `"kind":"EncryptionConfiguration"` fields are required in the yaml. Ex. `apiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - aescbc:\n      keys:\n      - name: k-fw5hn\n        secret: RTczRjFDODMwQzAyMDVBREU4NDJBMUZFNDhCNzM5N0I=\n    identity: {}\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string)
     */
    customConfig: string;
    /**
     * Enable etcd backup. Default `true` (bool)
     */
    enabled: boolean;
}

export interface ClusterServicesKubeController {
    /**
     * Cluster CIDR option for kube controller service (string)
     */
    clusterCidr: string;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Service Cluster IP Range option for kube API service (string)
     */
    serviceClusterIpRange: string;
}

export interface ClusterServicesKubeControllerDeprecated {
    /**
     * Cluster CIDR option for kube controller service (string)
     */
    clusterCidr: string;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Service Cluster IP Range option for kube API service (string)
     */
    serviceClusterIpRange: string;
}

export interface ClusterServicesKubeProxyDeprecated {
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
}

export interface ClusterServicesKubeSchedulerDeprecated {
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
}

export interface ClusterServicesKubelet {
    /**
     * Cluster DNS Server option for kubelet service (string)
     */
    clusterDnsServer: string;
    /**
     * Cluster Domain option for kubelet service. Default `cluster.local` (string)
     */
    clusterDomain?: string;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Enable or disable failing when swap on is not supported (bool)
     */
    failSwapOn: boolean;
    /**
     * [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
     */
    generateServingCertificate?: boolean;
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Infra container image for kubelet service (string)
     */
    infraContainerImage: string;
}

export interface ClusterServicesKubeletDeprecated {
    /**
     * Cluster DNS Server option for kubelet service (string)
     */
    clusterDnsServer: string;
    /**
     * Cluster Domain option for kubelet service. Default `cluster.local` (string)
     */
    clusterDomain?: string;
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Enable or disable failing when swap on is not supported (bool)
     */
    failSwapOn: boolean;
    /**
     * [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
     */
    generateServingCertificate?: boolean;
    /**
     * Docker image for etcd service (string)
     */
    image: string;
    /**
     * Infra container image for kubelet service (string)
     */
    infraContainerImage: string;
}

export interface ClusterServicesKubeproxy {
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
}

export interface ClusterServicesScheduler {
    /**
     * Extra arguments for the ingress controller (map)
     */
    extraArgs: {[key: string]: any};
    /**
     * Extra binds for etcd service (list)
     */
    extraBinds: string[];
    /**
     * Extra environment for etcd service (list)
     */
    extraEnvs: string[];
    /**
     * Docker image for etcd service (string)
     */
    image: string;
}

export interface ClusterSystemImages {
    /**
     * Docker image for aciCniDeployContainer (string)
     */
    aciCniDeployContainer?: string;
    /**
     * Docker image for aciControllerContainer (string)
     */
    aciControllerContainer?: string;
    /**
     * Docker image for aciHostContainer (string)
     */
    aciHostContainer?: string;
    /**
     * Docker image for aciMcastContainer (string)
     */
    aciMcastContainer?: string;
    /**
     * Docker image for aciOpflexContainer (string)
     */
    aciOpflexContainer?: string;
    /**
     * Docker image for aciOvsContainer (string)
     */
    aciOvsContainer?: string;
    /**
     * Docker image for alpine (string)
     */
    alpine?: string;
    /**
     * Docker image for calicoCni (string)
     */
    calicoCni?: string;
    /**
     * Docker image for calicoControllers (string)
     */
    calicoControllers?: string;
    /**
     * Docker image for calicoCtl (string)
     */
    calicoCtl?: string;
    /**
     * Docker image for calicoFlexVol (string)
     */
    calicoFlexVol?: string;
    /**
     * Docker image for calicoNode (string)
     */
    calicoNode?: string;
    /**
     * Docker image for canalCni (string)
     */
    canalCni?: string;
    /**
     * Docker image for canalFlannel (string)
     */
    canalFlannel?: string;
    /**
     * Docker image for canalFlexVol (string)
     */
    canalFlexVol?: string;
    /**
     * Docker image for canalNode (string)
     */
    canalNode?: string;
    /**
     * Docker image for certDownloader (string)
     */
    certDownloader?: string;
    /**
     * Docker image for coredns (string)
     */
    coredns?: string;
    /**
     * Docker image for corednsAutoscaler (string)
     */
    corednsAutoscaler?: string;
    /**
     * Docker image for dnsmasq (string)
     */
    dnsmasq?: string;
    /**
     * Etcd options for RKE services (list maxitems:1)
     */
    etcd?: string;
    /**
     * Docker image for flannel (string)
     */
    flannel?: string;
    /**
     * Docker image for flannelCni (string)
     */
    flannelCni?: string;
    /**
     * RKE k8s cluster ingress controller configuration (list maxitems:1)
     */
    ingress?: string;
    /**
     * Docker image for ingressBackend (string)
     */
    ingressBackend?: string;
    /**
     * Docker image for kubeDns (string)
     */
    kubeDns?: string;
    /**
     * Docker image for kubeDnsAutoscaler (string)
     */
    kubeDnsAutoscaler?: string;
    /**
     * Docker image for kubeDnsSidecar (string)
     */
    kubeDnsSidecar?: string;
    /**
     * Docker image for kubernetes (string)
     */
    kubernetes?: string;
    /**
     * Docker image for kubernetesServicesSidecar (string)
     */
    kubernetesServicesSidecar?: string;
    /**
     * Docker image for metricsServer (string)
     */
    metricsServer?: string;
    /**
     * Docker image for nginxProxy (string)
     */
    nginxProxy?: string;
    /**
     * Nodelocal dns config  (list Maxitem: 1)
     */
    nodelocal?: string;
    /**
     * Docker image for podInfraContainer (string)
     */
    podInfraContainer?: string;
    /**
     * Docker image for weaveCni (string)
     */
    weaveCni?: string;
    /**
     * Docker image for weaveNode (string)
     */
    weaveNode?: string;
    /**
     * Docker image for windowsPodInfraContainer (string)
     */
    windowsPodInfraContainer?: string;
}

export interface ClusterUpgradeStrategy {
    /**
     * RKE drain nodes (bool)
     */
    drain: boolean;
    /**
     * RKE drain node input (list Maxitems: 1)
     */
    drainInput: outputs.ClusterUpgradeStrategyDrainInput;
    /**
     * RKE max unavailable controlplane nodes (string)
     */
    maxUnavailableControlplane: string;
    /**
     * RKE max unavailable worker nodes (string)
     */
    maxUnavailableWorker: string;
}

export interface ClusterUpgradeStrategyDrainInput {
    /**
     * Delete RKE node local data (bool)
     */
    deleteLocalData: boolean;
    /**
     * Force RKE node drain (bool)
     */
    force: boolean;
    /**
     * RKE node drain grace period (int)
     */
    gracePeriod: number;
    /**
     * Ignore RKE daemon sets (bool)
     */
    ignoreDaemonSets: boolean;
    /**
     * Timeout in seconds for etcd backup. Default: `300`. Just for RKE v1.2.6 and above (int)
     */
    timeout: number;
}

export interface ClusterWorkerHost {
    /**
     * Address of Bastion Host (string)
     */
    address: string;
    /**
     * Name of the host provisioned via docker machine (string)
     */
    nodeName: string;
}

