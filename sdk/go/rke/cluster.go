// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rke

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-rke/sdk/v3/go/rke/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// rke_cluster can be imported using the RKE cluster config and state files as ID in the format `<cluster_config_file>:<rke_state_file>`
//
// ```sh
// $ pulumi import rke:index/cluster:Cluster foo &lt;cluster_config_file&gt;:&lt;rke_state_file&gt;
// ```
// As experimental feature, dind rke_cluster can be also imported adding `dind` as 3rd import parameter `<cluster_config_file>:<rke_state_file>:dind`
//
// ```sh
// $ pulumi import rke:index/cluster:Cluster foo &lt;cluster_config_file&gt;:&lt;rke_state_file&gt;:dind
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// RKE k8s cluster addon deployment timeout in seconds for status check (int)
	AddonJobTimeout pulumi.IntPtrOutput `pulumi:"addonJobTimeout"`
	// RKE k8s cluster user addons YAML manifest to be deployed (string)
	Addons pulumi.StringPtrOutput `pulumi:"addons"`
	// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
	AddonsIncludes pulumi.StringArrayOutput `pulumi:"addonsIncludes"`
	// (Computed) RKE k8s cluster api server url (string)
	ApiServerUrl pulumi.StringOutput `pulumi:"apiServerUrl"`
	// RKE k8s cluster authentication configuration (list maxitems:1)
	Authentication ClusterAuthenticationPtrOutput `pulumi:"authentication"`
	// RKE k8s cluster authorization mode configuration (list maxitems:1)
	Authorization ClusterAuthorizationPtrOutput `pulumi:"authorization"`
	// RKE k8s cluster bastion Host configuration (list maxitems:1)
	BastionHost ClusterBastionHostPtrOutput `pulumi:"bastionHost"`
	// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
	CaCrt pulumi.StringOutput `pulumi:"caCrt"`
	// Specify a certificate dir path (string)
	CertDir pulumi.StringPtrOutput `pulumi:"certDir"`
	// (Computed/Sensitive) RKE k8s cluster certificates (string)
	Certificates ClusterCertificateArrayOutput `pulumi:"certificates"`
	// (Computed/Sensitive) RKE k8s cluster client certificate (string)
	ClientCert pulumi.StringOutput `pulumi:"clientCert"`
	// (Computed/Sensitive) RKE k8s cluster client key (string)
	ClientKey pulumi.StringOutput `pulumi:"clientKey"`
	// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
	CloudProvider ClusterCloudProviderPtrOutput `pulumi:"cloudProvider"`
	// Cluster CIDR option for kube controller service (string)
	ClusterCidr pulumi.StringOutput `pulumi:"clusterCidr"`
	// Cluster DNS Server option for kubelet service (string)
	ClusterDnsServer pulumi.StringOutput `pulumi:"clusterDnsServer"`
	// Cluster Domain option for kubelet service. Default `cluster.local` (string)
	ClusterDomain pulumi.StringOutput `pulumi:"clusterDomain"`
	// RKE k8s cluster name used in the kube config (string)
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
	ClusterYaml pulumi.StringPtrOutput `pulumi:"clusterYaml"`
	// (Computed) RKE k8s cluster control plane nodes (list)
	ControlPlaneHosts ClusterControlPlaneHostArrayOutput `pulumi:"controlPlaneHosts"`
	// Use custom certificates from a cert dir (string)
	CustomCerts pulumi.BoolPtrOutput `pulumi:"customCerts"`
	// RKE k8s cluster delay on creation (int)
	DelayOnCreation pulumi.IntPtrOutput `pulumi:"delayOnCreation"`
	// Deploy RKE cluster on a dind environment. Default: `false` (bool)
	Dind pulumi.BoolPtrOutput `pulumi:"dind"`
	// DinD RKE cluster dns (string)
	DindDnsServer pulumi.StringPtrOutput `pulumi:"dindDnsServer"`
	// DinD RKE cluster storage driver (string)
	DindStorageDriver pulumi.StringPtrOutput `pulumi:"dindStorageDriver"`
	// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
	DisablePortCheck pulumi.BoolPtrOutput `pulumi:"disablePortCheck"`
	// RKE k8s cluster DNS Config (list maxitems:1)
	Dns ClusterDnsPtrOutput `pulumi:"dns"`
	// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
	EnableCriDockerd pulumi.BoolPtrOutput `pulumi:"enableCriDockerd"`
	// (Computed) RKE k8s cluster etcd nodes (list)
	EtcdHosts ClusterEtcdHostArrayOutput `pulumi:"etcdHosts"`
	// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
	IgnoreDockerVersion pulumi.BoolPtrOutput `pulumi:"ignoreDockerVersion"`
	// (Computed) RKE k8s cluster inactive nodes (list)
	InactiveHosts ClusterInactiveHostArrayOutput `pulumi:"inactiveHosts"`
	// RKE k8s cluster ingress controller configuration (list maxitems:1)
	Ingress ClusterIngressPtrOutput `pulumi:"ingress"`
	// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
	//
	// Deprecated: Use kube_config_yaml instead
	InternalKubeConfigYaml pulumi.StringOutput `pulumi:"internalKubeConfigYaml"`
	// (Computed) RKE k8s cluster admin user (string)
	KubeAdminUser pulumi.StringOutput `pulumi:"kubeAdminUser"`
	// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
	KubeConfigYaml pulumi.StringOutput `pulumi:"kubeConfigYaml"`
	// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
	KubernetesVersion pulumi.StringPtrOutput `pulumi:"kubernetesVersion"`
	// RKE k8s cluster monitoring Config (list maxitems:1)
	Monitoring ClusterMonitoringPtrOutput `pulumi:"monitoring"`
	// RKE k8s cluster network configuration (list maxitems:1)
	Network ClusterNetworkPtrOutput `pulumi:"network"`
	// RKE k8s cluster nodes (list)
	Nodes ClusterNodeArrayOutput `pulumi:"nodes"`
	// Deprecated: Use cluster_yaml instead
	NodesConfs pulumi.StringArrayOutput `pulumi:"nodesConfs"`
	// RKE k8s directory path (string)
	PrefixPath pulumi.StringPtrOutput `pulumi:"prefixPath"`
	// RKE k8s cluster private docker registries (list)
	PrivateRegistries ClusterPrivateRegistryArrayOutput `pulumi:"privateRegistries"`
	// RKE k8s cluster restore configuration (list maxitems:1)
	Restore ClusterRestorePtrOutput `pulumi:"restore"`
	// (Computed/Sensitive) RKE k8s cluster config yaml (string)
	RkeClusterYaml pulumi.StringOutput `pulumi:"rkeClusterYaml"`
	// (Computed/Sensitive) RKE k8s cluster state (string)
	RkeState pulumi.StringOutput `pulumi:"rkeState"`
	// RKE k8s cluster rotate certificates configuration (list maxitems:1)
	RotateCertificates ClusterRotateCertificatesPtrOutput `pulumi:"rotateCertificates"`
	// (Computed) RKE k8s cluster running system images list (list)
	RunningSystemImages ClusterRunningSystemImageArrayOutput `pulumi:"runningSystemImages"`
	// RKE k8s cluster services (list maxitems:1)
	Services ClusterServicesPtrOutput `pulumi:"services"`
	// Use services.etcd instead (list maxitems:1)
	//
	// Deprecated: Use services.etcd instead
	ServicesEtcdDeprecated ClusterServicesEtcdDeprecatedPtrOutput `pulumi:"servicesEtcdDeprecated"`
	// Use services.kube_api instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_api instead
	ServicesKubeApiDeprecated ClusterServicesKubeApiDeprecatedPtrOutput `pulumi:"servicesKubeApiDeprecated"`
	// Use services.kube_controller instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_controller instead
	ServicesKubeControllerDeprecated ClusterServicesKubeControllerDeprecatedPtrOutput `pulumi:"servicesKubeControllerDeprecated"`
	// Use services.kubeproxy instead (list maxitems:1)
	//
	// Deprecated: Use services.kubeproxy instead
	ServicesKubeProxyDeprecated ClusterServicesKubeProxyDeprecatedPtrOutput `pulumi:"servicesKubeProxyDeprecated"`
	// Use services.scheduler instead (list maxitems:1)
	//
	// Deprecated: Use services.scheduler instead
	ServicesKubeSchedulerDeprecated ClusterServicesKubeSchedulerDeprecatedPtrOutput `pulumi:"servicesKubeSchedulerDeprecated"`
	// Use services.kubelet instead (list maxitems:1)
	//
	// Deprecated: Use services.kubelet instead
	ServicesKubeletDeprecated ClusterServicesKubeletDeprecatedPtrOutput `pulumi:"servicesKubeletDeprecated"`
	// SSH Agent Auth enable (bool)
	SshAgentAuth pulumi.BoolOutput `pulumi:"sshAgentAuth"`
	// SSH Certificate Path (string)
	SshCertPath pulumi.StringPtrOutput `pulumi:"sshCertPath"`
	// SSH Private Key Path (string)
	SshKeyPath pulumi.StringPtrOutput `pulumi:"sshKeyPath"`
	// RKE k8s cluster system images list (list maxitems:1)
	SystemImages ClusterSystemImagesPtrOutput `pulumi:"systemImages"`
	// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
	UpdateOnly pulumi.BoolPtrOutput `pulumi:"updateOnly"`
	// RKE k8s cluster upgrade strategy (list maxitems:1)
	UpgradeStrategy ClusterUpgradeStrategyPtrOutput `pulumi:"upgradeStrategy"`
	// (Computed) RKE k8s cluster worker nodes (list)
	WorkerHosts ClusterWorkerHostArrayOutput `pulumi:"workerHosts"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	if args.ClusterYaml != nil {
		args.ClusterYaml = pulumi.ToSecret(args.ClusterYaml).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCrt",
		"certificates",
		"clientCert",
		"clientKey",
		"clusterYaml",
		"internalKubeConfigYaml",
		"kubeConfigYaml",
		"rkeClusterYaml",
		"rkeState",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("rke:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("rke:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// RKE k8s cluster addon deployment timeout in seconds for status check (int)
	AddonJobTimeout *int `pulumi:"addonJobTimeout"`
	// RKE k8s cluster user addons YAML manifest to be deployed (string)
	Addons *string `pulumi:"addons"`
	// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
	AddonsIncludes []string `pulumi:"addonsIncludes"`
	// (Computed) RKE k8s cluster api server url (string)
	ApiServerUrl *string `pulumi:"apiServerUrl"`
	// RKE k8s cluster authentication configuration (list maxitems:1)
	Authentication *ClusterAuthentication `pulumi:"authentication"`
	// RKE k8s cluster authorization mode configuration (list maxitems:1)
	Authorization *ClusterAuthorization `pulumi:"authorization"`
	// RKE k8s cluster bastion Host configuration (list maxitems:1)
	BastionHost *ClusterBastionHost `pulumi:"bastionHost"`
	// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
	CaCrt *string `pulumi:"caCrt"`
	// Specify a certificate dir path (string)
	CertDir *string `pulumi:"certDir"`
	// (Computed/Sensitive) RKE k8s cluster certificates (string)
	Certificates []ClusterCertificate `pulumi:"certificates"`
	// (Computed/Sensitive) RKE k8s cluster client certificate (string)
	ClientCert *string `pulumi:"clientCert"`
	// (Computed/Sensitive) RKE k8s cluster client key (string)
	ClientKey *string `pulumi:"clientKey"`
	// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
	CloudProvider *ClusterCloudProvider `pulumi:"cloudProvider"`
	// Cluster CIDR option for kube controller service (string)
	ClusterCidr *string `pulumi:"clusterCidr"`
	// Cluster DNS Server option for kubelet service (string)
	ClusterDnsServer *string `pulumi:"clusterDnsServer"`
	// Cluster Domain option for kubelet service. Default `cluster.local` (string)
	ClusterDomain *string `pulumi:"clusterDomain"`
	// RKE k8s cluster name used in the kube config (string)
	ClusterName *string `pulumi:"clusterName"`
	// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
	ClusterYaml *string `pulumi:"clusterYaml"`
	// (Computed) RKE k8s cluster control plane nodes (list)
	ControlPlaneHosts []ClusterControlPlaneHost `pulumi:"controlPlaneHosts"`
	// Use custom certificates from a cert dir (string)
	CustomCerts *bool `pulumi:"customCerts"`
	// RKE k8s cluster delay on creation (int)
	DelayOnCreation *int `pulumi:"delayOnCreation"`
	// Deploy RKE cluster on a dind environment. Default: `false` (bool)
	Dind *bool `pulumi:"dind"`
	// DinD RKE cluster dns (string)
	DindDnsServer *string `pulumi:"dindDnsServer"`
	// DinD RKE cluster storage driver (string)
	DindStorageDriver *string `pulumi:"dindStorageDriver"`
	// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
	DisablePortCheck *bool `pulumi:"disablePortCheck"`
	// RKE k8s cluster DNS Config (list maxitems:1)
	Dns *ClusterDns `pulumi:"dns"`
	// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
	EnableCriDockerd *bool `pulumi:"enableCriDockerd"`
	// (Computed) RKE k8s cluster etcd nodes (list)
	EtcdHosts []ClusterEtcdHost `pulumi:"etcdHosts"`
	// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
	IgnoreDockerVersion *bool `pulumi:"ignoreDockerVersion"`
	// (Computed) RKE k8s cluster inactive nodes (list)
	InactiveHosts []ClusterInactiveHost `pulumi:"inactiveHosts"`
	// RKE k8s cluster ingress controller configuration (list maxitems:1)
	Ingress *ClusterIngress `pulumi:"ingress"`
	// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
	//
	// Deprecated: Use kube_config_yaml instead
	InternalKubeConfigYaml *string `pulumi:"internalKubeConfigYaml"`
	// (Computed) RKE k8s cluster admin user (string)
	KubeAdminUser *string `pulumi:"kubeAdminUser"`
	// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
	KubeConfigYaml *string `pulumi:"kubeConfigYaml"`
	// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// RKE k8s cluster monitoring Config (list maxitems:1)
	Monitoring *ClusterMonitoring `pulumi:"monitoring"`
	// RKE k8s cluster network configuration (list maxitems:1)
	Network *ClusterNetwork `pulumi:"network"`
	// RKE k8s cluster nodes (list)
	Nodes []ClusterNode `pulumi:"nodes"`
	// Deprecated: Use cluster_yaml instead
	NodesConfs []string `pulumi:"nodesConfs"`
	// RKE k8s directory path (string)
	PrefixPath *string `pulumi:"prefixPath"`
	// RKE k8s cluster private docker registries (list)
	PrivateRegistries []ClusterPrivateRegistry `pulumi:"privateRegistries"`
	// RKE k8s cluster restore configuration (list maxitems:1)
	Restore *ClusterRestore `pulumi:"restore"`
	// (Computed/Sensitive) RKE k8s cluster config yaml (string)
	RkeClusterYaml *string `pulumi:"rkeClusterYaml"`
	// (Computed/Sensitive) RKE k8s cluster state (string)
	RkeState *string `pulumi:"rkeState"`
	// RKE k8s cluster rotate certificates configuration (list maxitems:1)
	RotateCertificates *ClusterRotateCertificates `pulumi:"rotateCertificates"`
	// (Computed) RKE k8s cluster running system images list (list)
	RunningSystemImages []ClusterRunningSystemImage `pulumi:"runningSystemImages"`
	// RKE k8s cluster services (list maxitems:1)
	Services *ClusterServices `pulumi:"services"`
	// Use services.etcd instead (list maxitems:1)
	//
	// Deprecated: Use services.etcd instead
	ServicesEtcdDeprecated *ClusterServicesEtcdDeprecated `pulumi:"servicesEtcdDeprecated"`
	// Use services.kube_api instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_api instead
	ServicesKubeApiDeprecated *ClusterServicesKubeApiDeprecated `pulumi:"servicesKubeApiDeprecated"`
	// Use services.kube_controller instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_controller instead
	ServicesKubeControllerDeprecated *ClusterServicesKubeControllerDeprecated `pulumi:"servicesKubeControllerDeprecated"`
	// Use services.kubeproxy instead (list maxitems:1)
	//
	// Deprecated: Use services.kubeproxy instead
	ServicesKubeProxyDeprecated *ClusterServicesKubeProxyDeprecated `pulumi:"servicesKubeProxyDeprecated"`
	// Use services.scheduler instead (list maxitems:1)
	//
	// Deprecated: Use services.scheduler instead
	ServicesKubeSchedulerDeprecated *ClusterServicesKubeSchedulerDeprecated `pulumi:"servicesKubeSchedulerDeprecated"`
	// Use services.kubelet instead (list maxitems:1)
	//
	// Deprecated: Use services.kubelet instead
	ServicesKubeletDeprecated *ClusterServicesKubeletDeprecated `pulumi:"servicesKubeletDeprecated"`
	// SSH Agent Auth enable (bool)
	SshAgentAuth *bool `pulumi:"sshAgentAuth"`
	// SSH Certificate Path (string)
	SshCertPath *string `pulumi:"sshCertPath"`
	// SSH Private Key Path (string)
	SshKeyPath *string `pulumi:"sshKeyPath"`
	// RKE k8s cluster system images list (list maxitems:1)
	SystemImages *ClusterSystemImages `pulumi:"systemImages"`
	// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
	UpdateOnly *bool `pulumi:"updateOnly"`
	// RKE k8s cluster upgrade strategy (list maxitems:1)
	UpgradeStrategy *ClusterUpgradeStrategy `pulumi:"upgradeStrategy"`
	// (Computed) RKE k8s cluster worker nodes (list)
	WorkerHosts []ClusterWorkerHost `pulumi:"workerHosts"`
}

type ClusterState struct {
	// RKE k8s cluster addon deployment timeout in seconds for status check (int)
	AddonJobTimeout pulumi.IntPtrInput
	// RKE k8s cluster user addons YAML manifest to be deployed (string)
	Addons pulumi.StringPtrInput
	// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
	AddonsIncludes pulumi.StringArrayInput
	// (Computed) RKE k8s cluster api server url (string)
	ApiServerUrl pulumi.StringPtrInput
	// RKE k8s cluster authentication configuration (list maxitems:1)
	Authentication ClusterAuthenticationPtrInput
	// RKE k8s cluster authorization mode configuration (list maxitems:1)
	Authorization ClusterAuthorizationPtrInput
	// RKE k8s cluster bastion Host configuration (list maxitems:1)
	BastionHost ClusterBastionHostPtrInput
	// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
	CaCrt pulumi.StringPtrInput
	// Specify a certificate dir path (string)
	CertDir pulumi.StringPtrInput
	// (Computed/Sensitive) RKE k8s cluster certificates (string)
	Certificates ClusterCertificateArrayInput
	// (Computed/Sensitive) RKE k8s cluster client certificate (string)
	ClientCert pulumi.StringPtrInput
	// (Computed/Sensitive) RKE k8s cluster client key (string)
	ClientKey pulumi.StringPtrInput
	// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
	CloudProvider ClusterCloudProviderPtrInput
	// Cluster CIDR option for kube controller service (string)
	ClusterCidr pulumi.StringPtrInput
	// Cluster DNS Server option for kubelet service (string)
	ClusterDnsServer pulumi.StringPtrInput
	// Cluster Domain option for kubelet service. Default `cluster.local` (string)
	ClusterDomain pulumi.StringPtrInput
	// RKE k8s cluster name used in the kube config (string)
	ClusterName pulumi.StringPtrInput
	// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
	ClusterYaml pulumi.StringPtrInput
	// (Computed) RKE k8s cluster control plane nodes (list)
	ControlPlaneHosts ClusterControlPlaneHostArrayInput
	// Use custom certificates from a cert dir (string)
	CustomCerts pulumi.BoolPtrInput
	// RKE k8s cluster delay on creation (int)
	DelayOnCreation pulumi.IntPtrInput
	// Deploy RKE cluster on a dind environment. Default: `false` (bool)
	Dind pulumi.BoolPtrInput
	// DinD RKE cluster dns (string)
	DindDnsServer pulumi.StringPtrInput
	// DinD RKE cluster storage driver (string)
	DindStorageDriver pulumi.StringPtrInput
	// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
	DisablePortCheck pulumi.BoolPtrInput
	// RKE k8s cluster DNS Config (list maxitems:1)
	Dns ClusterDnsPtrInput
	// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
	EnableCriDockerd pulumi.BoolPtrInput
	// (Computed) RKE k8s cluster etcd nodes (list)
	EtcdHosts ClusterEtcdHostArrayInput
	// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
	IgnoreDockerVersion pulumi.BoolPtrInput
	// (Computed) RKE k8s cluster inactive nodes (list)
	InactiveHosts ClusterInactiveHostArrayInput
	// RKE k8s cluster ingress controller configuration (list maxitems:1)
	Ingress ClusterIngressPtrInput
	// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
	//
	// Deprecated: Use kube_config_yaml instead
	InternalKubeConfigYaml pulumi.StringPtrInput
	// (Computed) RKE k8s cluster admin user (string)
	KubeAdminUser pulumi.StringPtrInput
	// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
	KubeConfigYaml pulumi.StringPtrInput
	// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
	KubernetesVersion pulumi.StringPtrInput
	// RKE k8s cluster monitoring Config (list maxitems:1)
	Monitoring ClusterMonitoringPtrInput
	// RKE k8s cluster network configuration (list maxitems:1)
	Network ClusterNetworkPtrInput
	// RKE k8s cluster nodes (list)
	Nodes ClusterNodeArrayInput
	// Deprecated: Use cluster_yaml instead
	NodesConfs pulumi.StringArrayInput
	// RKE k8s directory path (string)
	PrefixPath pulumi.StringPtrInput
	// RKE k8s cluster private docker registries (list)
	PrivateRegistries ClusterPrivateRegistryArrayInput
	// RKE k8s cluster restore configuration (list maxitems:1)
	Restore ClusterRestorePtrInput
	// (Computed/Sensitive) RKE k8s cluster config yaml (string)
	RkeClusterYaml pulumi.StringPtrInput
	// (Computed/Sensitive) RKE k8s cluster state (string)
	RkeState pulumi.StringPtrInput
	// RKE k8s cluster rotate certificates configuration (list maxitems:1)
	RotateCertificates ClusterRotateCertificatesPtrInput
	// (Computed) RKE k8s cluster running system images list (list)
	RunningSystemImages ClusterRunningSystemImageArrayInput
	// RKE k8s cluster services (list maxitems:1)
	Services ClusterServicesPtrInput
	// Use services.etcd instead (list maxitems:1)
	//
	// Deprecated: Use services.etcd instead
	ServicesEtcdDeprecated ClusterServicesEtcdDeprecatedPtrInput
	// Use services.kube_api instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_api instead
	ServicesKubeApiDeprecated ClusterServicesKubeApiDeprecatedPtrInput
	// Use services.kube_controller instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_controller instead
	ServicesKubeControllerDeprecated ClusterServicesKubeControllerDeprecatedPtrInput
	// Use services.kubeproxy instead (list maxitems:1)
	//
	// Deprecated: Use services.kubeproxy instead
	ServicesKubeProxyDeprecated ClusterServicesKubeProxyDeprecatedPtrInput
	// Use services.scheduler instead (list maxitems:1)
	//
	// Deprecated: Use services.scheduler instead
	ServicesKubeSchedulerDeprecated ClusterServicesKubeSchedulerDeprecatedPtrInput
	// Use services.kubelet instead (list maxitems:1)
	//
	// Deprecated: Use services.kubelet instead
	ServicesKubeletDeprecated ClusterServicesKubeletDeprecatedPtrInput
	// SSH Agent Auth enable (bool)
	SshAgentAuth pulumi.BoolPtrInput
	// SSH Certificate Path (string)
	SshCertPath pulumi.StringPtrInput
	// SSH Private Key Path (string)
	SshKeyPath pulumi.StringPtrInput
	// RKE k8s cluster system images list (list maxitems:1)
	SystemImages ClusterSystemImagesPtrInput
	// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
	UpdateOnly pulumi.BoolPtrInput
	// RKE k8s cluster upgrade strategy (list maxitems:1)
	UpgradeStrategy ClusterUpgradeStrategyPtrInput
	// (Computed) RKE k8s cluster worker nodes (list)
	WorkerHosts ClusterWorkerHostArrayInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// RKE k8s cluster addon deployment timeout in seconds for status check (int)
	AddonJobTimeout *int `pulumi:"addonJobTimeout"`
	// RKE k8s cluster user addons YAML manifest to be deployed (string)
	Addons *string `pulumi:"addons"`
	// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
	AddonsIncludes []string `pulumi:"addonsIncludes"`
	// RKE k8s cluster authentication configuration (list maxitems:1)
	Authentication *ClusterAuthentication `pulumi:"authentication"`
	// RKE k8s cluster authorization mode configuration (list maxitems:1)
	Authorization *ClusterAuthorization `pulumi:"authorization"`
	// RKE k8s cluster bastion Host configuration (list maxitems:1)
	BastionHost *ClusterBastionHost `pulumi:"bastionHost"`
	// Specify a certificate dir path (string)
	CertDir *string `pulumi:"certDir"`
	// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
	CloudProvider *ClusterCloudProvider `pulumi:"cloudProvider"`
	// RKE k8s cluster name used in the kube config (string)
	ClusterName *string `pulumi:"clusterName"`
	// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
	ClusterYaml *string `pulumi:"clusterYaml"`
	// Use custom certificates from a cert dir (string)
	CustomCerts *bool `pulumi:"customCerts"`
	// RKE k8s cluster delay on creation (int)
	DelayOnCreation *int `pulumi:"delayOnCreation"`
	// Deploy RKE cluster on a dind environment. Default: `false` (bool)
	Dind *bool `pulumi:"dind"`
	// DinD RKE cluster dns (string)
	DindDnsServer *string `pulumi:"dindDnsServer"`
	// DinD RKE cluster storage driver (string)
	DindStorageDriver *string `pulumi:"dindStorageDriver"`
	// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
	DisablePortCheck *bool `pulumi:"disablePortCheck"`
	// RKE k8s cluster DNS Config (list maxitems:1)
	Dns *ClusterDns `pulumi:"dns"`
	// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
	EnableCriDockerd *bool `pulumi:"enableCriDockerd"`
	// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
	IgnoreDockerVersion *bool `pulumi:"ignoreDockerVersion"`
	// RKE k8s cluster ingress controller configuration (list maxitems:1)
	Ingress *ClusterIngress `pulumi:"ingress"`
	// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// RKE k8s cluster monitoring Config (list maxitems:1)
	Monitoring *ClusterMonitoring `pulumi:"monitoring"`
	// RKE k8s cluster network configuration (list maxitems:1)
	Network *ClusterNetwork `pulumi:"network"`
	// RKE k8s cluster nodes (list)
	Nodes []ClusterNode `pulumi:"nodes"`
	// Deprecated: Use cluster_yaml instead
	NodesConfs []string `pulumi:"nodesConfs"`
	// RKE k8s directory path (string)
	PrefixPath *string `pulumi:"prefixPath"`
	// RKE k8s cluster private docker registries (list)
	PrivateRegistries []ClusterPrivateRegistry `pulumi:"privateRegistries"`
	// RKE k8s cluster restore configuration (list maxitems:1)
	Restore *ClusterRestore `pulumi:"restore"`
	// RKE k8s cluster rotate certificates configuration (list maxitems:1)
	RotateCertificates *ClusterRotateCertificates `pulumi:"rotateCertificates"`
	// RKE k8s cluster services (list maxitems:1)
	Services *ClusterServices `pulumi:"services"`
	// Use services.etcd instead (list maxitems:1)
	//
	// Deprecated: Use services.etcd instead
	ServicesEtcdDeprecated *ClusterServicesEtcdDeprecated `pulumi:"servicesEtcdDeprecated"`
	// Use services.kube_api instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_api instead
	ServicesKubeApiDeprecated *ClusterServicesKubeApiDeprecated `pulumi:"servicesKubeApiDeprecated"`
	// Use services.kube_controller instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_controller instead
	ServicesKubeControllerDeprecated *ClusterServicesKubeControllerDeprecated `pulumi:"servicesKubeControllerDeprecated"`
	// Use services.kubeproxy instead (list maxitems:1)
	//
	// Deprecated: Use services.kubeproxy instead
	ServicesKubeProxyDeprecated *ClusterServicesKubeProxyDeprecated `pulumi:"servicesKubeProxyDeprecated"`
	// Use services.scheduler instead (list maxitems:1)
	//
	// Deprecated: Use services.scheduler instead
	ServicesKubeSchedulerDeprecated *ClusterServicesKubeSchedulerDeprecated `pulumi:"servicesKubeSchedulerDeprecated"`
	// Use services.kubelet instead (list maxitems:1)
	//
	// Deprecated: Use services.kubelet instead
	ServicesKubeletDeprecated *ClusterServicesKubeletDeprecated `pulumi:"servicesKubeletDeprecated"`
	// SSH Agent Auth enable (bool)
	SshAgentAuth *bool `pulumi:"sshAgentAuth"`
	// SSH Certificate Path (string)
	SshCertPath *string `pulumi:"sshCertPath"`
	// SSH Private Key Path (string)
	SshKeyPath *string `pulumi:"sshKeyPath"`
	// RKE k8s cluster system images list (list maxitems:1)
	SystemImages *ClusterSystemImages `pulumi:"systemImages"`
	// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
	UpdateOnly *bool `pulumi:"updateOnly"`
	// RKE k8s cluster upgrade strategy (list maxitems:1)
	UpgradeStrategy *ClusterUpgradeStrategy `pulumi:"upgradeStrategy"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// RKE k8s cluster addon deployment timeout in seconds for status check (int)
	AddonJobTimeout pulumi.IntPtrInput
	// RKE k8s cluster user addons YAML manifest to be deployed (string)
	Addons pulumi.StringPtrInput
	// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
	AddonsIncludes pulumi.StringArrayInput
	// RKE k8s cluster authentication configuration (list maxitems:1)
	Authentication ClusterAuthenticationPtrInput
	// RKE k8s cluster authorization mode configuration (list maxitems:1)
	Authorization ClusterAuthorizationPtrInput
	// RKE k8s cluster bastion Host configuration (list maxitems:1)
	BastionHost ClusterBastionHostPtrInput
	// Specify a certificate dir path (string)
	CertDir pulumi.StringPtrInput
	// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
	CloudProvider ClusterCloudProviderPtrInput
	// RKE k8s cluster name used in the kube config (string)
	ClusterName pulumi.StringPtrInput
	// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
	ClusterYaml pulumi.StringPtrInput
	// Use custom certificates from a cert dir (string)
	CustomCerts pulumi.BoolPtrInput
	// RKE k8s cluster delay on creation (int)
	DelayOnCreation pulumi.IntPtrInput
	// Deploy RKE cluster on a dind environment. Default: `false` (bool)
	Dind pulumi.BoolPtrInput
	// DinD RKE cluster dns (string)
	DindDnsServer pulumi.StringPtrInput
	// DinD RKE cluster storage driver (string)
	DindStorageDriver pulumi.StringPtrInput
	// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
	DisablePortCheck pulumi.BoolPtrInput
	// RKE k8s cluster DNS Config (list maxitems:1)
	Dns ClusterDnsPtrInput
	// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
	EnableCriDockerd pulumi.BoolPtrInput
	// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
	IgnoreDockerVersion pulumi.BoolPtrInput
	// RKE k8s cluster ingress controller configuration (list maxitems:1)
	Ingress ClusterIngressPtrInput
	// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
	KubernetesVersion pulumi.StringPtrInput
	// RKE k8s cluster monitoring Config (list maxitems:1)
	Monitoring ClusterMonitoringPtrInput
	// RKE k8s cluster network configuration (list maxitems:1)
	Network ClusterNetworkPtrInput
	// RKE k8s cluster nodes (list)
	Nodes ClusterNodeArrayInput
	// Deprecated: Use cluster_yaml instead
	NodesConfs pulumi.StringArrayInput
	// RKE k8s directory path (string)
	PrefixPath pulumi.StringPtrInput
	// RKE k8s cluster private docker registries (list)
	PrivateRegistries ClusterPrivateRegistryArrayInput
	// RKE k8s cluster restore configuration (list maxitems:1)
	Restore ClusterRestorePtrInput
	// RKE k8s cluster rotate certificates configuration (list maxitems:1)
	RotateCertificates ClusterRotateCertificatesPtrInput
	// RKE k8s cluster services (list maxitems:1)
	Services ClusterServicesPtrInput
	// Use services.etcd instead (list maxitems:1)
	//
	// Deprecated: Use services.etcd instead
	ServicesEtcdDeprecated ClusterServicesEtcdDeprecatedPtrInput
	// Use services.kube_api instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_api instead
	ServicesKubeApiDeprecated ClusterServicesKubeApiDeprecatedPtrInput
	// Use services.kube_controller instead (list maxitems:1)
	//
	// Deprecated: Use services.kube_controller instead
	ServicesKubeControllerDeprecated ClusterServicesKubeControllerDeprecatedPtrInput
	// Use services.kubeproxy instead (list maxitems:1)
	//
	// Deprecated: Use services.kubeproxy instead
	ServicesKubeProxyDeprecated ClusterServicesKubeProxyDeprecatedPtrInput
	// Use services.scheduler instead (list maxitems:1)
	//
	// Deprecated: Use services.scheduler instead
	ServicesKubeSchedulerDeprecated ClusterServicesKubeSchedulerDeprecatedPtrInput
	// Use services.kubelet instead (list maxitems:1)
	//
	// Deprecated: Use services.kubelet instead
	ServicesKubeletDeprecated ClusterServicesKubeletDeprecatedPtrInput
	// SSH Agent Auth enable (bool)
	SshAgentAuth pulumi.BoolPtrInput
	// SSH Certificate Path (string)
	SshCertPath pulumi.StringPtrInput
	// SSH Private Key Path (string)
	SshKeyPath pulumi.StringPtrInput
	// RKE k8s cluster system images list (list maxitems:1)
	SystemImages ClusterSystemImagesPtrInput
	// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
	UpdateOnly pulumi.BoolPtrInput
	// RKE k8s cluster upgrade strategy (list maxitems:1)
	UpgradeStrategy ClusterUpgradeStrategyPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// RKE k8s cluster addon deployment timeout in seconds for status check (int)
func (o ClusterOutput) AddonJobTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.AddonJobTimeout }).(pulumi.IntPtrOutput)
}

// RKE k8s cluster user addons YAML manifest to be deployed (string)
func (o ClusterOutput) Addons() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Addons }).(pulumi.StringPtrOutput)
}

// RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
func (o ClusterOutput) AddonsIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AddonsIncludes }).(pulumi.StringArrayOutput)
}

// (Computed) RKE k8s cluster api server url (string)
func (o ClusterOutput) ApiServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ApiServerUrl }).(pulumi.StringOutput)
}

// RKE k8s cluster authentication configuration (list maxitems:1)
func (o ClusterOutput) Authentication() ClusterAuthenticationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAuthenticationPtrOutput { return v.Authentication }).(ClusterAuthenticationPtrOutput)
}

// RKE k8s cluster authorization mode configuration (list maxitems:1)
func (o ClusterOutput) Authorization() ClusterAuthorizationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAuthorizationPtrOutput { return v.Authorization }).(ClusterAuthorizationPtrOutput)
}

// RKE k8s cluster bastion Host configuration (list maxitems:1)
func (o ClusterOutput) BastionHost() ClusterBastionHostPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterBastionHostPtrOutput { return v.BastionHost }).(ClusterBastionHostPtrOutput)
}

// (Computed/Sensitive) RKE k8s cluster CA certificate (string)
func (o ClusterOutput) CaCrt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CaCrt }).(pulumi.StringOutput)
}

// Specify a certificate dir path (string)
func (o ClusterOutput) CertDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.CertDir }).(pulumi.StringPtrOutput)
}

// (Computed/Sensitive) RKE k8s cluster certificates (string)
func (o ClusterOutput) Certificates() ClusterCertificateArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterCertificateArrayOutput { return v.Certificates }).(ClusterCertificateArrayOutput)
}

// (Computed/Sensitive) RKE k8s cluster client certificate (string)
func (o ClusterOutput) ClientCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClientCert }).(pulumi.StringOutput)
}

// (Computed/Sensitive) RKE k8s cluster client key (string)
func (o ClusterOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClientKey }).(pulumi.StringOutput)
}

// RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)
func (o ClusterOutput) CloudProvider() ClusterCloudProviderPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterCloudProviderPtrOutput { return v.CloudProvider }).(ClusterCloudProviderPtrOutput)
}

// Cluster CIDR option for kube controller service (string)
func (o ClusterOutput) ClusterCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterCidr }).(pulumi.StringOutput)
}

// Cluster DNS Server option for kubelet service (string)
func (o ClusterOutput) ClusterDnsServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterDnsServer }).(pulumi.StringOutput)
}

// Cluster Domain option for kubelet service. Default `cluster.local` (string)
func (o ClusterOutput) ClusterDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterDomain }).(pulumi.StringOutput)
}

// RKE k8s cluster name used in the kube config (string)
func (o ClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
func (o ClusterOutput) ClusterYaml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterYaml }).(pulumi.StringPtrOutput)
}

// (Computed) RKE k8s cluster control plane nodes (list)
func (o ClusterOutput) ControlPlaneHosts() ClusterControlPlaneHostArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterControlPlaneHostArrayOutput { return v.ControlPlaneHosts }).(ClusterControlPlaneHostArrayOutput)
}

// Use custom certificates from a cert dir (string)
func (o ClusterOutput) CustomCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.CustomCerts }).(pulumi.BoolPtrOutput)
}

// RKE k8s cluster delay on creation (int)
func (o ClusterOutput) DelayOnCreation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.DelayOnCreation }).(pulumi.IntPtrOutput)
}

// Deploy RKE cluster on a dind environment. Default: `false` (bool)
func (o ClusterOutput) Dind() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.Dind }).(pulumi.BoolPtrOutput)
}

// DinD RKE cluster dns (string)
func (o ClusterOutput) DindDnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DindDnsServer }).(pulumi.StringPtrOutput)
}

// DinD RKE cluster storage driver (string)
func (o ClusterOutput) DindStorageDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DindStorageDriver }).(pulumi.StringPtrOutput)
}

// Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
func (o ClusterOutput) DisablePortCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.DisablePortCheck }).(pulumi.BoolPtrOutput)
}

// RKE k8s cluster DNS Config (list maxitems:1)
func (o ClusterOutput) Dns() ClusterDnsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterDnsPtrOutput { return v.Dns }).(ClusterDnsPtrOutput)
}

// Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)
func (o ClusterOutput) EnableCriDockerd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.EnableCriDockerd }).(pulumi.BoolPtrOutput)
}

// (Computed) RKE k8s cluster etcd nodes (list)
func (o ClusterOutput) EtcdHosts() ClusterEtcdHostArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterEtcdHostArrayOutput { return v.EtcdHosts }).(ClusterEtcdHostArrayOutput)
}

// Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
func (o ClusterOutput) IgnoreDockerVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.IgnoreDockerVersion }).(pulumi.BoolPtrOutput)
}

// (Computed) RKE k8s cluster inactive nodes (list)
func (o ClusterOutput) InactiveHosts() ClusterInactiveHostArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterInactiveHostArrayOutput { return v.InactiveHosts }).(ClusterInactiveHostArrayOutput)
}

// RKE k8s cluster ingress controller configuration (list maxitems:1)
func (o ClusterOutput) Ingress() ClusterIngressPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterIngressPtrOutput { return v.Ingress }).(ClusterIngressPtrOutput)
}

// (Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)
//
// Deprecated: Use kube_config_yaml instead
func (o ClusterOutput) InternalKubeConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InternalKubeConfigYaml }).(pulumi.StringOutput)
}

// (Computed) RKE k8s cluster admin user (string)
func (o ClusterOutput) KubeAdminUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KubeAdminUser }).(pulumi.StringOutput)
}

// (Computed/Sensitive) RKE k8s cluster kube config yaml (string)
func (o ClusterOutput) KubeConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KubeConfigYaml }).(pulumi.StringOutput)
}

// K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
func (o ClusterOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// RKE k8s cluster monitoring Config (list maxitems:1)
func (o ClusterOutput) Monitoring() ClusterMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterMonitoringPtrOutput { return v.Monitoring }).(ClusterMonitoringPtrOutput)
}

// RKE k8s cluster network configuration (list maxitems:1)
func (o ClusterOutput) Network() ClusterNetworkPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkPtrOutput { return v.Network }).(ClusterNetworkPtrOutput)
}

// RKE k8s cluster nodes (list)
func (o ClusterOutput) Nodes() ClusterNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeArrayOutput { return v.Nodes }).(ClusterNodeArrayOutput)
}

// Deprecated: Use cluster_yaml instead
func (o ClusterOutput) NodesConfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.NodesConfs }).(pulumi.StringArrayOutput)
}

// RKE k8s directory path (string)
func (o ClusterOutput) PrefixPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PrefixPath }).(pulumi.StringPtrOutput)
}

// RKE k8s cluster private docker registries (list)
func (o ClusterOutput) PrivateRegistries() ClusterPrivateRegistryArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPrivateRegistryArrayOutput { return v.PrivateRegistries }).(ClusterPrivateRegistryArrayOutput)
}

// RKE k8s cluster restore configuration (list maxitems:1)
func (o ClusterOutput) Restore() ClusterRestorePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterRestorePtrOutput { return v.Restore }).(ClusterRestorePtrOutput)
}

// (Computed/Sensitive) RKE k8s cluster config yaml (string)
func (o ClusterOutput) RkeClusterYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.RkeClusterYaml }).(pulumi.StringOutput)
}

// (Computed/Sensitive) RKE k8s cluster state (string)
func (o ClusterOutput) RkeState() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.RkeState }).(pulumi.StringOutput)
}

// RKE k8s cluster rotate certificates configuration (list maxitems:1)
func (o ClusterOutput) RotateCertificates() ClusterRotateCertificatesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterRotateCertificatesPtrOutput { return v.RotateCertificates }).(ClusterRotateCertificatesPtrOutput)
}

// (Computed) RKE k8s cluster running system images list (list)
func (o ClusterOutput) RunningSystemImages() ClusterRunningSystemImageArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRunningSystemImageArrayOutput { return v.RunningSystemImages }).(ClusterRunningSystemImageArrayOutput)
}

// RKE k8s cluster services (list maxitems:1)
func (o ClusterOutput) Services() ClusterServicesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesPtrOutput { return v.Services }).(ClusterServicesPtrOutput)
}

// Use services.etcd instead (list maxitems:1)
//
// Deprecated: Use services.etcd instead
func (o ClusterOutput) ServicesEtcdDeprecated() ClusterServicesEtcdDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesEtcdDeprecatedPtrOutput { return v.ServicesEtcdDeprecated }).(ClusterServicesEtcdDeprecatedPtrOutput)
}

// Use services.kube_api instead (list maxitems:1)
//
// Deprecated: Use services.kube_api instead
func (o ClusterOutput) ServicesKubeApiDeprecated() ClusterServicesKubeApiDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesKubeApiDeprecatedPtrOutput { return v.ServicesKubeApiDeprecated }).(ClusterServicesKubeApiDeprecatedPtrOutput)
}

// Use services.kube_controller instead (list maxitems:1)
//
// Deprecated: Use services.kube_controller instead
func (o ClusterOutput) ServicesKubeControllerDeprecated() ClusterServicesKubeControllerDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesKubeControllerDeprecatedPtrOutput {
		return v.ServicesKubeControllerDeprecated
	}).(ClusterServicesKubeControllerDeprecatedPtrOutput)
}

// Use services.kubeproxy instead (list maxitems:1)
//
// Deprecated: Use services.kubeproxy instead
func (o ClusterOutput) ServicesKubeProxyDeprecated() ClusterServicesKubeProxyDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesKubeProxyDeprecatedPtrOutput { return v.ServicesKubeProxyDeprecated }).(ClusterServicesKubeProxyDeprecatedPtrOutput)
}

// Use services.scheduler instead (list maxitems:1)
//
// Deprecated: Use services.scheduler instead
func (o ClusterOutput) ServicesKubeSchedulerDeprecated() ClusterServicesKubeSchedulerDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesKubeSchedulerDeprecatedPtrOutput {
		return v.ServicesKubeSchedulerDeprecated
	}).(ClusterServicesKubeSchedulerDeprecatedPtrOutput)
}

// Use services.kubelet instead (list maxitems:1)
//
// Deprecated: Use services.kubelet instead
func (o ClusterOutput) ServicesKubeletDeprecated() ClusterServicesKubeletDeprecatedPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicesKubeletDeprecatedPtrOutput { return v.ServicesKubeletDeprecated }).(ClusterServicesKubeletDeprecatedPtrOutput)
}

// SSH Agent Auth enable (bool)
func (o ClusterOutput) SshAgentAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.SshAgentAuth }).(pulumi.BoolOutput)
}

// SSH Certificate Path (string)
func (o ClusterOutput) SshCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SshCertPath }).(pulumi.StringPtrOutput)
}

// SSH Private Key Path (string)
func (o ClusterOutput) SshKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SshKeyPath }).(pulumi.StringPtrOutput)
}

// RKE k8s cluster system images list (list maxitems:1)
func (o ClusterOutput) SystemImages() ClusterSystemImagesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterSystemImagesPtrOutput { return v.SystemImages }).(ClusterSystemImagesPtrOutput)
}

// Skip idempotent deployment of control and etcd plane. Default `false` (bool)
func (o ClusterOutput) UpdateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.UpdateOnly }).(pulumi.BoolPtrOutput)
}

// RKE k8s cluster upgrade strategy (list maxitems:1)
func (o ClusterOutput) UpgradeStrategy() ClusterUpgradeStrategyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterUpgradeStrategyPtrOutput { return v.UpgradeStrategy }).(ClusterUpgradeStrategyPtrOutput)
}

// (Computed) RKE k8s cluster worker nodes (list)
func (o ClusterOutput) WorkerHosts() ClusterWorkerHostArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterWorkerHostArrayOutput { return v.WorkerHosts }).(ClusterWorkerHostArrayOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
