// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNetworkAciNetworkProvider {
    private String aep;
    private List<String> apicHosts;
    private String apicUserCrt;
    private String apicUserKey;
    private String apicUserName;
    private String encapType;
    private String externDynamic;
    private String externStatic;
    private String infraVlan;
    private String kubeApiVlan;
    private String l3out;
    private List<String> l3outExternalNetworks;
    private String mcastRangeEnd;
    private String mcastRangeStart;
    private String nodeSubnet;
    private String nodeSvcSubnet;
    private String serviceVlan;
    private @Nullable String snatPortRangeEnd;
    private @Nullable String snatPortRangeStart;
    private @Nullable String snatPortsPerNode;
    private String systemId;
    private String token;
    private String vrfName;
    private String vrfTenant;

    private ClusterNetworkAciNetworkProvider() {}
    public String aep() {
        return this.aep;
    }
    public List<String> apicHosts() {
        return this.apicHosts;
    }
    public String apicUserCrt() {
        return this.apicUserCrt;
    }
    public String apicUserKey() {
        return this.apicUserKey;
    }
    public String apicUserName() {
        return this.apicUserName;
    }
    public String encapType() {
        return this.encapType;
    }
    public String externDynamic() {
        return this.externDynamic;
    }
    public String externStatic() {
        return this.externStatic;
    }
    public String infraVlan() {
        return this.infraVlan;
    }
    public String kubeApiVlan() {
        return this.kubeApiVlan;
    }
    public String l3out() {
        return this.l3out;
    }
    public List<String> l3outExternalNetworks() {
        return this.l3outExternalNetworks;
    }
    public String mcastRangeEnd() {
        return this.mcastRangeEnd;
    }
    public String mcastRangeStart() {
        return this.mcastRangeStart;
    }
    public String nodeSubnet() {
        return this.nodeSubnet;
    }
    public String nodeSvcSubnet() {
        return this.nodeSvcSubnet;
    }
    public String serviceVlan() {
        return this.serviceVlan;
    }
    public Optional<String> snatPortRangeEnd() {
        return Optional.ofNullable(this.snatPortRangeEnd);
    }
    public Optional<String> snatPortRangeStart() {
        return Optional.ofNullable(this.snatPortRangeStart);
    }
    public Optional<String> snatPortsPerNode() {
        return Optional.ofNullable(this.snatPortsPerNode);
    }
    public String systemId() {
        return this.systemId;
    }
    public String token() {
        return this.token;
    }
    public String vrfName() {
        return this.vrfName;
    }
    public String vrfTenant() {
        return this.vrfTenant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNetworkAciNetworkProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aep;
        private List<String> apicHosts;
        private String apicUserCrt;
        private String apicUserKey;
        private String apicUserName;
        private String encapType;
        private String externDynamic;
        private String externStatic;
        private String infraVlan;
        private String kubeApiVlan;
        private String l3out;
        private List<String> l3outExternalNetworks;
        private String mcastRangeEnd;
        private String mcastRangeStart;
        private String nodeSubnet;
        private String nodeSvcSubnet;
        private String serviceVlan;
        private @Nullable String snatPortRangeEnd;
        private @Nullable String snatPortRangeStart;
        private @Nullable String snatPortsPerNode;
        private String systemId;
        private String token;
        private String vrfName;
        private String vrfTenant;
        public Builder() {}
        public Builder(ClusterNetworkAciNetworkProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aep = defaults.aep;
    	      this.apicHosts = defaults.apicHosts;
    	      this.apicUserCrt = defaults.apicUserCrt;
    	      this.apicUserKey = defaults.apicUserKey;
    	      this.apicUserName = defaults.apicUserName;
    	      this.encapType = defaults.encapType;
    	      this.externDynamic = defaults.externDynamic;
    	      this.externStatic = defaults.externStatic;
    	      this.infraVlan = defaults.infraVlan;
    	      this.kubeApiVlan = defaults.kubeApiVlan;
    	      this.l3out = defaults.l3out;
    	      this.l3outExternalNetworks = defaults.l3outExternalNetworks;
    	      this.mcastRangeEnd = defaults.mcastRangeEnd;
    	      this.mcastRangeStart = defaults.mcastRangeStart;
    	      this.nodeSubnet = defaults.nodeSubnet;
    	      this.nodeSvcSubnet = defaults.nodeSvcSubnet;
    	      this.serviceVlan = defaults.serviceVlan;
    	      this.snatPortRangeEnd = defaults.snatPortRangeEnd;
    	      this.snatPortRangeStart = defaults.snatPortRangeStart;
    	      this.snatPortsPerNode = defaults.snatPortsPerNode;
    	      this.systemId = defaults.systemId;
    	      this.token = defaults.token;
    	      this.vrfName = defaults.vrfName;
    	      this.vrfTenant = defaults.vrfTenant;
        }

        @CustomType.Setter
        public Builder aep(String aep) {
            if (aep == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "aep");
            }
            this.aep = aep;
            return this;
        }
        @CustomType.Setter
        public Builder apicHosts(List<String> apicHosts) {
            if (apicHosts == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "apicHosts");
            }
            this.apicHosts = apicHosts;
            return this;
        }
        public Builder apicHosts(String... apicHosts) {
            return apicHosts(List.of(apicHosts));
        }
        @CustomType.Setter
        public Builder apicUserCrt(String apicUserCrt) {
            if (apicUserCrt == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "apicUserCrt");
            }
            this.apicUserCrt = apicUserCrt;
            return this;
        }
        @CustomType.Setter
        public Builder apicUserKey(String apicUserKey) {
            if (apicUserKey == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "apicUserKey");
            }
            this.apicUserKey = apicUserKey;
            return this;
        }
        @CustomType.Setter
        public Builder apicUserName(String apicUserName) {
            if (apicUserName == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "apicUserName");
            }
            this.apicUserName = apicUserName;
            return this;
        }
        @CustomType.Setter
        public Builder encapType(String encapType) {
            if (encapType == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "encapType");
            }
            this.encapType = encapType;
            return this;
        }
        @CustomType.Setter
        public Builder externDynamic(String externDynamic) {
            if (externDynamic == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "externDynamic");
            }
            this.externDynamic = externDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder externStatic(String externStatic) {
            if (externStatic == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "externStatic");
            }
            this.externStatic = externStatic;
            return this;
        }
        @CustomType.Setter
        public Builder infraVlan(String infraVlan) {
            if (infraVlan == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "infraVlan");
            }
            this.infraVlan = infraVlan;
            return this;
        }
        @CustomType.Setter
        public Builder kubeApiVlan(String kubeApiVlan) {
            if (kubeApiVlan == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "kubeApiVlan");
            }
            this.kubeApiVlan = kubeApiVlan;
            return this;
        }
        @CustomType.Setter
        public Builder l3out(String l3out) {
            if (l3out == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "l3out");
            }
            this.l3out = l3out;
            return this;
        }
        @CustomType.Setter
        public Builder l3outExternalNetworks(List<String> l3outExternalNetworks) {
            if (l3outExternalNetworks == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "l3outExternalNetworks");
            }
            this.l3outExternalNetworks = l3outExternalNetworks;
            return this;
        }
        public Builder l3outExternalNetworks(String... l3outExternalNetworks) {
            return l3outExternalNetworks(List.of(l3outExternalNetworks));
        }
        @CustomType.Setter
        public Builder mcastRangeEnd(String mcastRangeEnd) {
            if (mcastRangeEnd == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "mcastRangeEnd");
            }
            this.mcastRangeEnd = mcastRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder mcastRangeStart(String mcastRangeStart) {
            if (mcastRangeStart == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "mcastRangeStart");
            }
            this.mcastRangeStart = mcastRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSubnet(String nodeSubnet) {
            if (nodeSubnet == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "nodeSubnet");
            }
            this.nodeSubnet = nodeSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSvcSubnet(String nodeSvcSubnet) {
            if (nodeSvcSubnet == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "nodeSvcSubnet");
            }
            this.nodeSvcSubnet = nodeSvcSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVlan(String serviceVlan) {
            if (serviceVlan == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "serviceVlan");
            }
            this.serviceVlan = serviceVlan;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortRangeEnd(@Nullable String snatPortRangeEnd) {

            this.snatPortRangeEnd = snatPortRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortRangeStart(@Nullable String snatPortRangeStart) {

            this.snatPortRangeStart = snatPortRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortsPerNode(@Nullable String snatPortsPerNode) {

            this.snatPortsPerNode = snatPortsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder systemId(String systemId) {
            if (systemId == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "systemId");
            }
            this.systemId = systemId;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder vrfName(String vrfName) {
            if (vrfName == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "vrfName");
            }
            this.vrfName = vrfName;
            return this;
        }
        @CustomType.Setter
        public Builder vrfTenant(String vrfTenant) {
            if (vrfTenant == null) {
              throw new MissingRequiredPropertyException("ClusterNetworkAciNetworkProvider", "vrfTenant");
            }
            this.vrfTenant = vrfTenant;
            return this;
        }
        public ClusterNetworkAciNetworkProvider build() {
            final var _resultValue = new ClusterNetworkAciNetworkProvider();
            _resultValue.aep = aep;
            _resultValue.apicHosts = apicHosts;
            _resultValue.apicUserCrt = apicUserCrt;
            _resultValue.apicUserKey = apicUserKey;
            _resultValue.apicUserName = apicUserName;
            _resultValue.encapType = encapType;
            _resultValue.externDynamic = externDynamic;
            _resultValue.externStatic = externStatic;
            _resultValue.infraVlan = infraVlan;
            _resultValue.kubeApiVlan = kubeApiVlan;
            _resultValue.l3out = l3out;
            _resultValue.l3outExternalNetworks = l3outExternalNetworks;
            _resultValue.mcastRangeEnd = mcastRangeEnd;
            _resultValue.mcastRangeStart = mcastRangeStart;
            _resultValue.nodeSubnet = nodeSubnet;
            _resultValue.nodeSvcSubnet = nodeSvcSubnet;
            _resultValue.serviceVlan = serviceVlan;
            _resultValue.snatPortRangeEnd = snatPortRangeEnd;
            _resultValue.snatPortRangeStart = snatPortRangeStart;
            _resultValue.snatPortsPerNode = snatPortsPerNode;
            _resultValue.systemId = systemId;
            _resultValue.token = token;
            _resultValue.vrfName = vrfName;
            _resultValue.vrfTenant = vrfTenant;
            return _resultValue;
        }
    }
}
