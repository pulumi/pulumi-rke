// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rke.inputs.ClusterNodeTaintArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeArgs Empty = new ClusterNodeArgs();

    /**
     * Address ip for node (string)
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return Address ip for node (string)
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * Docker socket on the node that will be used in tunneling (string)
     * 
     */
    @Import(name="dockerSocket")
    private @Nullable Output<String> dockerSocket;

    /**
     * @return Docker socket on the node that will be used in tunneling (string)
     * 
     */
    public Optional<Output<String>> dockerSocket() {
        return Optional.ofNullable(this.dockerSocket);
    }

    /**
     * Hostname override for node (string)
     * 
     */
    @Import(name="hostnameOverride")
    private @Nullable Output<String> hostnameOverride;

    /**
     * @return Hostname override for node (string)
     * 
     */
    public Optional<Output<String>> hostnameOverride() {
        return Optional.ofNullable(this.hostnameOverride);
    }

    /**
     * Internal address that will be used for components communication (string)
     * 
     */
    @Import(name="internalAddress")
    private @Nullable Output<String> internalAddress;

    /**
     * @return Internal address that will be used for components communication (string)
     * 
     */
    public Optional<Output<String>> internalAddress() {
        return Optional.ofNullable(this.internalAddress);
    }

    /**
     * Node labels (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return Node labels (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the host provisioned via docker machine (string)
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return Name of the host provisioned via docker machine (string)
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * Port used for SSH communication (string)
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Port used for SSH communication (string)
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    /**
     * @deprecated
     * Use role instead
     * 
     */
    @Deprecated /* Use role instead */
    @Import(name="rolesDeprecated")
    private @Nullable Output<String> rolesDeprecated;

    /**
     * @deprecated
     * Use role instead
     * 
     */
    @Deprecated /* Use role instead */
    public Optional<Output<String>> rolesDeprecated() {
        return Optional.ofNullable(this.rolesDeprecated);
    }

    /**
     * SSH Agent Auth enable (bool)
     * 
     */
    @Import(name="sshAgentAuth")
    private @Nullable Output<Boolean> sshAgentAuth;

    /**
     * @return SSH Agent Auth enable (bool)
     * 
     */
    public Optional<Output<Boolean>> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }

    /**
     * SSH Certificate (string)
     * 
     */
    @Import(name="sshCert")
    private @Nullable Output<String> sshCert;

    /**
     * @return SSH Certificate (string)
     * 
     */
    public Optional<Output<String>> sshCert() {
        return Optional.ofNullable(this.sshCert);
    }

    /**
     * SSH Certificate Path (string)
     * 
     */
    @Import(name="sshCertPath")
    private @Nullable Output<String> sshCertPath;

    /**
     * @return SSH Certificate Path (string)
     * 
     */
    public Optional<Output<String>> sshCertPath() {
        return Optional.ofNullable(this.sshCertPath);
    }

    /**
     * SSH Private Key (string)
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    /**
     * @return SSH Private Key (string)
     * 
     */
    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * SSH Private Key Path (string)
     * 
     */
    @Import(name="sshKeyPath")
    private @Nullable Output<String> sshKeyPath;

    /**
     * @return SSH Private Key Path (string)
     * 
     */
    public Optional<Output<String>> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }

    /**
     * Node taints (list)
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<ClusterNodeTaintArgs>> taints;

    /**
     * @return Node taints (list)
     * 
     */
    public Optional<Output<List<ClusterNodeTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * Registry user (string)
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return Registry user (string)
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private ClusterNodeArgs() {}

    private ClusterNodeArgs(ClusterNodeArgs $) {
        this.address = $.address;
        this.dockerSocket = $.dockerSocket;
        this.hostnameOverride = $.hostnameOverride;
        this.internalAddress = $.internalAddress;
        this.labels = $.labels;
        this.nodeName = $.nodeName;
        this.port = $.port;
        this.roles = $.roles;
        this.rolesDeprecated = $.rolesDeprecated;
        this.sshAgentAuth = $.sshAgentAuth;
        this.sshCert = $.sshCert;
        this.sshCertPath = $.sshCertPath;
        this.sshKey = $.sshKey;
        this.sshKeyPath = $.sshKeyPath;
        this.taints = $.taints;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeArgs $;

        public Builder() {
            $ = new ClusterNodeArgs();
        }

        public Builder(ClusterNodeArgs defaults) {
            $ = new ClusterNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address ip for node (string)
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Address ip for node (string)
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param dockerSocket Docker socket on the node that will be used in tunneling (string)
         * 
         * @return builder
         * 
         */
        public Builder dockerSocket(@Nullable Output<String> dockerSocket) {
            $.dockerSocket = dockerSocket;
            return this;
        }

        /**
         * @param dockerSocket Docker socket on the node that will be used in tunneling (string)
         * 
         * @return builder
         * 
         */
        public Builder dockerSocket(String dockerSocket) {
            return dockerSocket(Output.of(dockerSocket));
        }

        /**
         * @param hostnameOverride Hostname override for node (string)
         * 
         * @return builder
         * 
         */
        public Builder hostnameOverride(@Nullable Output<String> hostnameOverride) {
            $.hostnameOverride = hostnameOverride;
            return this;
        }

        /**
         * @param hostnameOverride Hostname override for node (string)
         * 
         * @return builder
         * 
         */
        public Builder hostnameOverride(String hostnameOverride) {
            return hostnameOverride(Output.of(hostnameOverride));
        }

        /**
         * @param internalAddress Internal address that will be used for components communication (string)
         * 
         * @return builder
         * 
         */
        public Builder internalAddress(@Nullable Output<String> internalAddress) {
            $.internalAddress = internalAddress;
            return this;
        }

        /**
         * @param internalAddress Internal address that will be used for components communication (string)
         * 
         * @return builder
         * 
         */
        public Builder internalAddress(String internalAddress) {
            return internalAddress(Output.of(internalAddress));
        }

        /**
         * @param labels Node labels (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Node labels (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param nodeName Name of the host provisioned via docker machine (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName Name of the host provisioned via docker machine (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param port Port used for SSH communication (string)
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port used for SSH communication (string)
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param roles Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use role instead
         * 
         */
        @Deprecated /* Use role instead */
        public Builder rolesDeprecated(@Nullable Output<String> rolesDeprecated) {
            $.rolesDeprecated = rolesDeprecated;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use role instead
         * 
         */
        @Deprecated /* Use role instead */
        public Builder rolesDeprecated(String rolesDeprecated) {
            return rolesDeprecated(Output.of(rolesDeprecated));
        }

        /**
         * @param sshAgentAuth SSH Agent Auth enable (bool)
         * 
         * @return builder
         * 
         */
        public Builder sshAgentAuth(@Nullable Output<Boolean> sshAgentAuth) {
            $.sshAgentAuth = sshAgentAuth;
            return this;
        }

        /**
         * @param sshAgentAuth SSH Agent Auth enable (bool)
         * 
         * @return builder
         * 
         */
        public Builder sshAgentAuth(Boolean sshAgentAuth) {
            return sshAgentAuth(Output.of(sshAgentAuth));
        }

        /**
         * @param sshCert SSH Certificate (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCert(@Nullable Output<String> sshCert) {
            $.sshCert = sshCert;
            return this;
        }

        /**
         * @param sshCert SSH Certificate (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCert(String sshCert) {
            return sshCert(Output.of(sshCert));
        }

        /**
         * @param sshCertPath SSH Certificate Path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCertPath(@Nullable Output<String> sshCertPath) {
            $.sshCertPath = sshCertPath;
            return this;
        }

        /**
         * @param sshCertPath SSH Certificate Path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCertPath(String sshCertPath) {
            return sshCertPath(Output.of(sshCertPath));
        }

        /**
         * @param sshKey SSH Private Key (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey SSH Private Key (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param sshKeyPath SSH Private Key Path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPath(@Nullable Output<String> sshKeyPath) {
            $.sshKeyPath = sshKeyPath;
            return this;
        }

        /**
         * @param sshKeyPath SSH Private Key Path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPath(String sshKeyPath) {
            return sshKeyPath(Output.of(sshKeyPath));
        }

        /**
         * @param taints Node taints (list)
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<ClusterNodeTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints Node taints (list)
         * 
         * @return builder
         * 
         */
        public Builder taints(List<ClusterNodeTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints Node taints (list)
         * 
         * @return builder
         * 
         */
        public Builder taints(ClusterNodeTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param user Registry user (string)
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Registry user (string)
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ClusterNodeArgs build() {
            $.address = Objects.requireNonNull($.address, "expected parameter 'address' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            return $;
        }
    }

}
