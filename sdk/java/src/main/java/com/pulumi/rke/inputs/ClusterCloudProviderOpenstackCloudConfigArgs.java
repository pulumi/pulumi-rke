// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rke.inputs.ClusterCloudProviderOpenstackCloudConfigBlockStorageArgs;
import com.pulumi.rke.inputs.ClusterCloudProviderOpenstackCloudConfigGlobalArgs;
import com.pulumi.rke.inputs.ClusterCloudProviderOpenstackCloudConfigLoadBalancerArgs;
import com.pulumi.rke.inputs.ClusterCloudProviderOpenstackCloudConfigMetadataArgs;
import com.pulumi.rke.inputs.ClusterCloudProviderOpenstackCloudConfigRouteArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterCloudProviderOpenstackCloudConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterCloudProviderOpenstackCloudConfigArgs Empty = new ClusterCloudProviderOpenstackCloudConfigArgs();

    @Import(name="blockStorage")
    private @Nullable Output<ClusterCloudProviderOpenstackCloudConfigBlockStorageArgs> blockStorage;

    public Optional<Output<ClusterCloudProviderOpenstackCloudConfigBlockStorageArgs>> blockStorage() {
        return Optional.ofNullable(this.blockStorage);
    }

    @Import(name="global", required=true)
    private Output<ClusterCloudProviderOpenstackCloudConfigGlobalArgs> global;

    public Output<ClusterCloudProviderOpenstackCloudConfigGlobalArgs> global() {
        return this.global;
    }

    @Import(name="loadBalancer")
    private @Nullable Output<ClusterCloudProviderOpenstackCloudConfigLoadBalancerArgs> loadBalancer;

    public Optional<Output<ClusterCloudProviderOpenstackCloudConfigLoadBalancerArgs>> loadBalancer() {
        return Optional.ofNullable(this.loadBalancer);
    }

    @Import(name="metadata")
    private @Nullable Output<ClusterCloudProviderOpenstackCloudConfigMetadataArgs> metadata;

    public Optional<Output<ClusterCloudProviderOpenstackCloudConfigMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    @Import(name="route")
    private @Nullable Output<ClusterCloudProviderOpenstackCloudConfigRouteArgs> route;

    public Optional<Output<ClusterCloudProviderOpenstackCloudConfigRouteArgs>> route() {
        return Optional.ofNullable(this.route);
    }

    private ClusterCloudProviderOpenstackCloudConfigArgs() {}

    private ClusterCloudProviderOpenstackCloudConfigArgs(ClusterCloudProviderOpenstackCloudConfigArgs $) {
        this.blockStorage = $.blockStorage;
        this.global = $.global;
        this.loadBalancer = $.loadBalancer;
        this.metadata = $.metadata;
        this.route = $.route;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterCloudProviderOpenstackCloudConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterCloudProviderOpenstackCloudConfigArgs $;

        public Builder() {
            $ = new ClusterCloudProviderOpenstackCloudConfigArgs();
        }

        public Builder(ClusterCloudProviderOpenstackCloudConfigArgs defaults) {
            $ = new ClusterCloudProviderOpenstackCloudConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder blockStorage(@Nullable Output<ClusterCloudProviderOpenstackCloudConfigBlockStorageArgs> blockStorage) {
            $.blockStorage = blockStorage;
            return this;
        }

        public Builder blockStorage(ClusterCloudProviderOpenstackCloudConfigBlockStorageArgs blockStorage) {
            return blockStorage(Output.of(blockStorage));
        }

        public Builder global(Output<ClusterCloudProviderOpenstackCloudConfigGlobalArgs> global) {
            $.global = global;
            return this;
        }

        public Builder global(ClusterCloudProviderOpenstackCloudConfigGlobalArgs global) {
            return global(Output.of(global));
        }

        public Builder loadBalancer(@Nullable Output<ClusterCloudProviderOpenstackCloudConfigLoadBalancerArgs> loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        public Builder loadBalancer(ClusterCloudProviderOpenstackCloudConfigLoadBalancerArgs loadBalancer) {
            return loadBalancer(Output.of(loadBalancer));
        }

        public Builder metadata(@Nullable Output<ClusterCloudProviderOpenstackCloudConfigMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(ClusterCloudProviderOpenstackCloudConfigMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder route(@Nullable Output<ClusterCloudProviderOpenstackCloudConfigRouteArgs> route) {
            $.route = route;
            return this;
        }

        public Builder route(ClusterCloudProviderOpenstackCloudConfigRouteArgs route) {
            return route(Output.of(route));
        }

        public ClusterCloudProviderOpenstackCloudConfigArgs build() {
            if ($.global == null) {
                throw new MissingRequiredPropertyException("ClusterCloudProviderOpenstackCloudConfigArgs", "global");
            }
            return $;
        }
    }

}
