// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterPrivateRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterPrivateRegistryArgs Empty = new ClusterPrivateRegistryArgs();

    /**
     * Set as default registry
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Set as default registry
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Registry password
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Registry password
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Registry URL
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return Registry URL
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Registry user
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Registry user
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ClusterPrivateRegistryArgs() {}

    private ClusterPrivateRegistryArgs(ClusterPrivateRegistryArgs $) {
        this.isDefault = $.isDefault;
        this.password = $.password;
        this.url = $.url;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterPrivateRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterPrivateRegistryArgs $;

        public Builder() {
            $ = new ClusterPrivateRegistryArgs();
        }

        public Builder(ClusterPrivateRegistryArgs defaults) {
            $ = new ClusterPrivateRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isDefault Set as default registry
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Set as default registry
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param password Registry password
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Registry password
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param url Registry URL
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Registry URL
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param user Registry user
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Registry user
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ClusterPrivateRegistryArgs build() {
            if ($.url == null) {
                throw new MissingRequiredPropertyException("ClusterPrivateRegistryArgs", "url");
            }
            return $;
        }
    }

}
