// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMonitoringArgs Empty = new ClusterMonitoringArgs();

    /**
     * Node selector key pair (map)
     * 
     */
    @Import(name="nodeSelector")
    private @Nullable Output<Map<String,Object>> nodeSelector;

    /**
     * @return Node selector key pair (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * RKE options for authorization (map)
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,Object>> options;

    /**
     * @return RKE options for authorization (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    /**
     * @return DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
     * 
     */
    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    private ClusterMonitoringArgs() {}

    private ClusterMonitoringArgs(ClusterMonitoringArgs $) {
        this.nodeSelector = $.nodeSelector;
        this.options = $.options;
        this.provider = $.provider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMonitoringArgs $;

        public Builder() {
            $ = new ClusterMonitoringArgs();
        }

        public Builder(ClusterMonitoringArgs defaults) {
            $ = new ClusterMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeSelector Node selector key pair (map)
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(@Nullable Output<Map<String,Object>> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        /**
         * @param nodeSelector Node selector key pair (map)
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(Map<String,Object> nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param options RKE options for authorization (map)
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,Object>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options RKE options for authorization (map)
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,Object> options) {
            return options(Output.of(options));
        }

        /**
         * @param provider DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider DNS provider. `kube-dns`, `coredns` (default), and `none` are supported (string)
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        public ClusterMonitoringArgs build() {
            return $;
        }
    }

}
