// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterCertificate {
    private @Nullable String certificate;
    private @Nullable String commonName;
    private @Nullable String config;
    private @Nullable String configEnvName;
    private @Nullable String configPath;
    private @Nullable String envName;
    /**
     * @return (Computed) The ID of the resource (string)
     * 
     */
    private @Nullable String id;
    private @Nullable String key;
    private @Nullable String keyEnvName;
    private @Nullable String keyPath;
    private @Nullable String name;
    private @Nullable String ouName;
    private @Nullable String path;

    private ClusterCertificate() {}
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    public Optional<String> commonName() {
        return Optional.ofNullable(this.commonName);
    }
    public Optional<String> config() {
        return Optional.ofNullable(this.config);
    }
    public Optional<String> configEnvName() {
        return Optional.ofNullable(this.configEnvName);
    }
    public Optional<String> configPath() {
        return Optional.ofNullable(this.configPath);
    }
    public Optional<String> envName() {
        return Optional.ofNullable(this.envName);
    }
    /**
     * @return (Computed) The ID of the resource (string)
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    public Optional<String> keyEnvName() {
        return Optional.ofNullable(this.keyEnvName);
    }
    public Optional<String> keyPath() {
        return Optional.ofNullable(this.keyPath);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> ouName() {
        return Optional.ofNullable(this.ouName);
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificate;
        private @Nullable String commonName;
        private @Nullable String config;
        private @Nullable String configEnvName;
        private @Nullable String configPath;
        private @Nullable String envName;
        private @Nullable String id;
        private @Nullable String key;
        private @Nullable String keyEnvName;
        private @Nullable String keyPath;
        private @Nullable String name;
        private @Nullable String ouName;
        private @Nullable String path;
        public Builder() {}
        public Builder(ClusterCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.commonName = defaults.commonName;
    	      this.config = defaults.config;
    	      this.configEnvName = defaults.configEnvName;
    	      this.configPath = defaults.configPath;
    	      this.envName = defaults.envName;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.keyEnvName = defaults.keyEnvName;
    	      this.keyPath = defaults.keyPath;
    	      this.name = defaults.name;
    	      this.ouName = defaults.ouName;
    	      this.path = defaults.path;
        }

        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {

            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(@Nullable String commonName) {

            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder config(@Nullable String config) {

            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder configEnvName(@Nullable String configEnvName) {

            this.configEnvName = configEnvName;
            return this;
        }
        @CustomType.Setter
        public Builder configPath(@Nullable String configPath) {

            this.configPath = configPath;
            return this;
        }
        @CustomType.Setter
        public Builder envName(@Nullable String envName) {

            this.envName = envName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyEnvName(@Nullable String keyEnvName) {

            this.keyEnvName = keyEnvName;
            return this;
        }
        @CustomType.Setter
        public Builder keyPath(@Nullable String keyPath) {

            this.keyPath = keyPath;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ouName(@Nullable String ouName) {

            this.ouName = ouName;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        public ClusterCertificate build() {
            final var _resultValue = new ClusterCertificate();
            _resultValue.certificate = certificate;
            _resultValue.commonName = commonName;
            _resultValue.config = config;
            _resultValue.configEnvName = configEnvName;
            _resultValue.configPath = configPath;
            _resultValue.envName = envName;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.keyEnvName = keyEnvName;
            _resultValue.keyPath = keyPath;
            _resultValue.name = name;
            _resultValue.ouName = ouName;
            _resultValue.path = path;
            return _resultValue;
        }
    }
}
