// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rke.inputs.ClusterAuthenticationArgs;
import com.pulumi.rke.inputs.ClusterAuthorizationArgs;
import com.pulumi.rke.inputs.ClusterBastionHostArgs;
import com.pulumi.rke.inputs.ClusterCloudProviderArgs;
import com.pulumi.rke.inputs.ClusterDnsArgs;
import com.pulumi.rke.inputs.ClusterIngressArgs;
import com.pulumi.rke.inputs.ClusterMonitoringArgs;
import com.pulumi.rke.inputs.ClusterNetworkArgs;
import com.pulumi.rke.inputs.ClusterNodeArgs;
import com.pulumi.rke.inputs.ClusterPrivateRegistryArgs;
import com.pulumi.rke.inputs.ClusterRestoreArgs;
import com.pulumi.rke.inputs.ClusterRotateCertificatesArgs;
import com.pulumi.rke.inputs.ClusterServicesArgs;
import com.pulumi.rke.inputs.ClusterServicesEtcdDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterServicesKubeApiDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterServicesKubeControllerDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterServicesKubeProxyDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterServicesKubeSchedulerDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterServicesKubeletDeprecatedArgs;
import com.pulumi.rke.inputs.ClusterSystemImagesArgs;
import com.pulumi.rke.inputs.ClusterUpgradeStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * RKE k8s cluster addon deployment timeout in seconds for status check (int)
     * 
     */
    @Import(name="addonJobTimeout")
    private @Nullable Output<Integer> addonJobTimeout;

    /**
     * @return RKE k8s cluster addon deployment timeout in seconds for status check (int)
     * 
     */
    public Optional<Output<Integer>> addonJobTimeout() {
        return Optional.ofNullable(this.addonJobTimeout);
    }

    /**
     * RKE k8s cluster user addons YAML manifest to be deployed (string)
     * 
     */
    @Import(name="addons")
    private @Nullable Output<String> addons;

    /**
     * @return RKE k8s cluster user addons YAML manifest to be deployed (string)
     * 
     */
    public Optional<Output<String>> addons() {
        return Optional.ofNullable(this.addons);
    }

    /**
     * RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
     * 
     */
    @Import(name="addonsIncludes")
    private @Nullable Output<List<String>> addonsIncludes;

    /**
     * @return RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
     * 
     */
    public Optional<Output<List<String>>> addonsIncludes() {
        return Optional.ofNullable(this.addonsIncludes);
    }

    /**
     * RKE k8s cluster authentication configuration (list maxitems:1)
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<ClusterAuthenticationArgs> authentication;

    /**
     * @return RKE k8s cluster authentication configuration (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * RKE k8s cluster authorization mode configuration (list maxitems:1)
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<ClusterAuthorizationArgs> authorization;

    /**
     * @return RKE k8s cluster authorization mode configuration (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * RKE k8s cluster bastion Host configuration (list maxitems:1)
     * 
     */
    @Import(name="bastionHost")
    private @Nullable Output<ClusterBastionHostArgs> bastionHost;

    /**
     * @return RKE k8s cluster bastion Host configuration (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterBastionHostArgs>> bastionHost() {
        return Optional.ofNullable(this.bastionHost);
    }

    /**
     * Specify a certificate dir path (string)
     * 
     */
    @Import(name="certDir")
    private @Nullable Output<String> certDir;

    /**
     * @return Specify a certificate dir path (string)
     * 
     */
    public Optional<Output<String>> certDir() {
        return Optional.ofNullable(this.certDir);
    }

    /**
     * Calico cloud provider (string)
     * 
     */
    @Import(name="cloudProvider")
    private @Nullable Output<ClusterCloudProviderArgs> cloudProvider;

    /**
     * @return Calico cloud provider (string)
     * 
     */
    public Optional<Output<ClusterCloudProviderArgs>> cloudProvider() {
        return Optional.ofNullable(this.cloudProvider);
    }

    /**
     * RKE k8s cluster name used in the kube config (string)
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return RKE k8s cluster name used in the kube config (string)
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
     * 
     */
    @Import(name="clusterYaml")
    private @Nullable Output<String> clusterYaml;

    /**
     * @return RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
     * 
     */
    public Optional<Output<String>> clusterYaml() {
        return Optional.ofNullable(this.clusterYaml);
    }

    /**
     * Use custom certificates from a cert dir (string)
     * 
     */
    @Import(name="customCerts")
    private @Nullable Output<Boolean> customCerts;

    /**
     * @return Use custom certificates from a cert dir (string)
     * 
     */
    public Optional<Output<Boolean>> customCerts() {
        return Optional.ofNullable(this.customCerts);
    }

    /**
     * RKE k8s cluster delay on creation (int)
     * 
     */
    @Import(name="delayOnCreation")
    private @Nullable Output<Integer> delayOnCreation;

    /**
     * @return RKE k8s cluster delay on creation (int)
     * 
     */
    public Optional<Output<Integer>> delayOnCreation() {
        return Optional.ofNullable(this.delayOnCreation);
    }

    /**
     * Deploy RKE cluster on a dind environment. Default: `false` (bool)
     * 
     */
    @Import(name="dind")
    private @Nullable Output<Boolean> dind;

    /**
     * @return Deploy RKE cluster on a dind environment. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> dind() {
        return Optional.ofNullable(this.dind);
    }

    /**
     * DinD RKE cluster dns (string)
     * 
     */
    @Import(name="dindDnsServer")
    private @Nullable Output<String> dindDnsServer;

    /**
     * @return DinD RKE cluster dns (string)
     * 
     */
    public Optional<Output<String>> dindDnsServer() {
        return Optional.ofNullable(this.dindDnsServer);
    }

    /**
     * DinD RKE cluster storage driver (string)
     * 
     */
    @Import(name="dindStorageDriver")
    private @Nullable Output<String> dindStorageDriver;

    /**
     * @return DinD RKE cluster storage driver (string)
     * 
     */
    public Optional<Output<String>> dindStorageDriver() {
        return Optional.ofNullable(this.dindStorageDriver);
    }

    /**
     * Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
     * 
     */
    @Import(name="disablePortCheck")
    private @Nullable Output<Boolean> disablePortCheck;

    /**
     * @return Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> disablePortCheck() {
        return Optional.ofNullable(this.disablePortCheck);
    }

    /**
     * RKE k8s cluster DNS Config (list maxitems:1)
     * 
     */
    @Import(name="dns")
    private @Nullable Output<ClusterDnsArgs> dns;

    /**
     * @return RKE k8s cluster DNS Config (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterDnsArgs>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
     * 
     */
    @Import(name="ignoreDockerVersion")
    private @Nullable Output<Boolean> ignoreDockerVersion;

    /**
     * @return Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> ignoreDockerVersion() {
        return Optional.ofNullable(this.ignoreDockerVersion);
    }

    /**
     * Docker image for ingress (string)
     * 
     */
    @Import(name="ingress")
    private @Nullable Output<ClusterIngressArgs> ingress;

    /**
     * @return Docker image for ingress (string)
     * 
     */
    public Optional<Output<ClusterIngressArgs>> ingress() {
        return Optional.ofNullable(this.ingress);
    }

    /**
     * K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
     * 
     */
    @Import(name="kubernetesVersion")
    private @Nullable Output<String> kubernetesVersion;

    /**
     * @return K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
     * 
     */
    public Optional<Output<String>> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }

    /**
     * RKE k8s cluster monitoring Config (list maxitems:1)
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<ClusterMonitoringArgs> monitoring;

    /**
     * @return RKE k8s cluster monitoring Config (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterMonitoringArgs>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * (list maxitems:1)
     * 
     */
    @Import(name="network")
    private @Nullable Output<ClusterNetworkArgs> network;

    /**
     * @return (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * RKE k8s cluster nodes (list)
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<ClusterNodeArgs>> nodes;

    /**
     * @return RKE k8s cluster nodes (list)
     * 
     */
    public Optional<Output<List<ClusterNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * @deprecated
     * Use cluster_yaml instead
     * 
     */
    @Deprecated /* Use cluster_yaml instead */
    @Import(name="nodesConfs")
    private @Nullable Output<List<String>> nodesConfs;

    /**
     * @deprecated
     * Use cluster_yaml instead
     * 
     */
    @Deprecated /* Use cluster_yaml instead */
    public Optional<Output<List<String>>> nodesConfs() {
        return Optional.ofNullable(this.nodesConfs);
    }

    /**
     * RKE k8s directory path (string)
     * 
     */
    @Import(name="prefixPath")
    private @Nullable Output<String> prefixPath;

    /**
     * @return RKE k8s directory path (string)
     * 
     */
    public Optional<Output<String>> prefixPath() {
        return Optional.ofNullable(this.prefixPath);
    }

    /**
     * RKE k8s cluster private docker registries (list)
     * 
     */
    @Import(name="privateRegistries")
    private @Nullable Output<List<ClusterPrivateRegistryArgs>> privateRegistries;

    /**
     * @return RKE k8s cluster private docker registries (list)
     * 
     */
    public Optional<Output<List<ClusterPrivateRegistryArgs>>> privateRegistries() {
        return Optional.ofNullable(this.privateRegistries);
    }

    /**
     * Restore cluster. Default `false` (bool)
     * 
     */
    @Import(name="restore")
    private @Nullable Output<ClusterRestoreArgs> restore;

    /**
     * @return Restore cluster. Default `false` (bool)
     * 
     */
    public Optional<Output<ClusterRestoreArgs>> restore() {
        return Optional.ofNullable(this.restore);
    }

    /**
     * RKE k8s cluster rotate certificates configuration (list maxitems:1)
     * 
     */
    @Import(name="rotateCertificates")
    private @Nullable Output<ClusterRotateCertificatesArgs> rotateCertificates;

    /**
     * @return RKE k8s cluster rotate certificates configuration (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterRotateCertificatesArgs>> rotateCertificates() {
        return Optional.ofNullable(this.rotateCertificates);
    }

    /**
     * Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)
     * 
     */
    @Import(name="services")
    private @Nullable Output<ClusterServicesArgs> services;

    /**
     * @return Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)
     * 
     */
    public Optional<Output<ClusterServicesArgs>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * Use services.etcd instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.etcd instead
     * 
     */
    @Deprecated /* Use services.etcd instead */
    @Import(name="servicesEtcdDeprecated")
    private @Nullable Output<ClusterServicesEtcdDeprecatedArgs> servicesEtcdDeprecated;

    /**
     * @return Use services.etcd instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.etcd instead
     * 
     */
    @Deprecated /* Use services.etcd instead */
    public Optional<Output<ClusterServicesEtcdDeprecatedArgs>> servicesEtcdDeprecated() {
        return Optional.ofNullable(this.servicesEtcdDeprecated);
    }

    /**
     * Use services.kube_api instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kube_api instead
     * 
     */
    @Deprecated /* Use services.kube_api instead */
    @Import(name="servicesKubeApiDeprecated")
    private @Nullable Output<ClusterServicesKubeApiDeprecatedArgs> servicesKubeApiDeprecated;

    /**
     * @return Use services.kube_api instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kube_api instead
     * 
     */
    @Deprecated /* Use services.kube_api instead */
    public Optional<Output<ClusterServicesKubeApiDeprecatedArgs>> servicesKubeApiDeprecated() {
        return Optional.ofNullable(this.servicesKubeApiDeprecated);
    }

    /**
     * Use services.kube_controller instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kube_controller instead
     * 
     */
    @Deprecated /* Use services.kube_controller instead */
    @Import(name="servicesKubeControllerDeprecated")
    private @Nullable Output<ClusterServicesKubeControllerDeprecatedArgs> servicesKubeControllerDeprecated;

    /**
     * @return Use services.kube_controller instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kube_controller instead
     * 
     */
    @Deprecated /* Use services.kube_controller instead */
    public Optional<Output<ClusterServicesKubeControllerDeprecatedArgs>> servicesKubeControllerDeprecated() {
        return Optional.ofNullable(this.servicesKubeControllerDeprecated);
    }

    /**
     * Use services.kubeproxy instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kubeproxy instead
     * 
     */
    @Deprecated /* Use services.kubeproxy instead */
    @Import(name="servicesKubeProxyDeprecated")
    private @Nullable Output<ClusterServicesKubeProxyDeprecatedArgs> servicesKubeProxyDeprecated;

    /**
     * @return Use services.kubeproxy instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kubeproxy instead
     * 
     */
    @Deprecated /* Use services.kubeproxy instead */
    public Optional<Output<ClusterServicesKubeProxyDeprecatedArgs>> servicesKubeProxyDeprecated() {
        return Optional.ofNullable(this.servicesKubeProxyDeprecated);
    }

    /**
     * Use services.scheduler instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.scheduler instead
     * 
     */
    @Deprecated /* Use services.scheduler instead */
    @Import(name="servicesKubeSchedulerDeprecated")
    private @Nullable Output<ClusterServicesKubeSchedulerDeprecatedArgs> servicesKubeSchedulerDeprecated;

    /**
     * @return Use services.scheduler instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.scheduler instead
     * 
     */
    @Deprecated /* Use services.scheduler instead */
    public Optional<Output<ClusterServicesKubeSchedulerDeprecatedArgs>> servicesKubeSchedulerDeprecated() {
        return Optional.ofNullable(this.servicesKubeSchedulerDeprecated);
    }

    /**
     * Use services.kubelet instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kubelet instead
     * 
     */
    @Deprecated /* Use services.kubelet instead */
    @Import(name="servicesKubeletDeprecated")
    private @Nullable Output<ClusterServicesKubeletDeprecatedArgs> servicesKubeletDeprecated;

    /**
     * @return Use services.kubelet instead (list maxitems:1)
     * 
     * @deprecated
     * Use services.kubelet instead
     * 
     */
    @Deprecated /* Use services.kubelet instead */
    public Optional<Output<ClusterServicesKubeletDeprecatedArgs>> servicesKubeletDeprecated() {
        return Optional.ofNullable(this.servicesKubeletDeprecated);
    }

    /**
     * SSH Agent Auth enable (bool)
     * 
     */
    @Import(name="sshAgentAuth")
    private @Nullable Output<Boolean> sshAgentAuth;

    /**
     * @return SSH Agent Auth enable (bool)
     * 
     */
    public Optional<Output<Boolean>> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }

    /**
     * SSH Certificate path (string)
     * 
     */
    @Import(name="sshCertPath")
    private @Nullable Output<String> sshCertPath;

    /**
     * @return SSH Certificate path (string)
     * 
     */
    public Optional<Output<String>> sshCertPath() {
        return Optional.ofNullable(this.sshCertPath);
    }

    /**
     * SSH Private Key path (string)
     * 
     */
    @Import(name="sshKeyPath")
    private @Nullable Output<String> sshKeyPath;

    /**
     * @return SSH Private Key path (string)
     * 
     */
    public Optional<Output<String>> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }

    /**
     * RKE k8s cluster system images list (list maxitems:1)
     * 
     */
    @Import(name="systemImages")
    private @Nullable Output<ClusterSystemImagesArgs> systemImages;

    /**
     * @return RKE k8s cluster system images list (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterSystemImagesArgs>> systemImages() {
        return Optional.ofNullable(this.systemImages);
    }

    /**
     * Skip idempotent deployment of control and etcd plane. Default `false` (bool)
     * 
     */
    @Import(name="updateOnly")
    private @Nullable Output<Boolean> updateOnly;

    /**
     * @return Skip idempotent deployment of control and etcd plane. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> updateOnly() {
        return Optional.ofNullable(this.updateOnly);
    }

    /**
     * RKE k8s cluster upgrade strategy (list maxitems:1)
     * 
     */
    @Import(name="upgradeStrategy")
    private @Nullable Output<ClusterUpgradeStrategyArgs> upgradeStrategy;

    /**
     * @return RKE k8s cluster upgrade strategy (list maxitems:1)
     * 
     */
    public Optional<Output<ClusterUpgradeStrategyArgs>> upgradeStrategy() {
        return Optional.ofNullable(this.upgradeStrategy);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.addonJobTimeout = $.addonJobTimeout;
        this.addons = $.addons;
        this.addonsIncludes = $.addonsIncludes;
        this.authentication = $.authentication;
        this.authorization = $.authorization;
        this.bastionHost = $.bastionHost;
        this.certDir = $.certDir;
        this.cloudProvider = $.cloudProvider;
        this.clusterName = $.clusterName;
        this.clusterYaml = $.clusterYaml;
        this.customCerts = $.customCerts;
        this.delayOnCreation = $.delayOnCreation;
        this.dind = $.dind;
        this.dindDnsServer = $.dindDnsServer;
        this.dindStorageDriver = $.dindStorageDriver;
        this.disablePortCheck = $.disablePortCheck;
        this.dns = $.dns;
        this.ignoreDockerVersion = $.ignoreDockerVersion;
        this.ingress = $.ingress;
        this.kubernetesVersion = $.kubernetesVersion;
        this.monitoring = $.monitoring;
        this.network = $.network;
        this.nodes = $.nodes;
        this.nodesConfs = $.nodesConfs;
        this.prefixPath = $.prefixPath;
        this.privateRegistries = $.privateRegistries;
        this.restore = $.restore;
        this.rotateCertificates = $.rotateCertificates;
        this.services = $.services;
        this.servicesEtcdDeprecated = $.servicesEtcdDeprecated;
        this.servicesKubeApiDeprecated = $.servicesKubeApiDeprecated;
        this.servicesKubeControllerDeprecated = $.servicesKubeControllerDeprecated;
        this.servicesKubeProxyDeprecated = $.servicesKubeProxyDeprecated;
        this.servicesKubeSchedulerDeprecated = $.servicesKubeSchedulerDeprecated;
        this.servicesKubeletDeprecated = $.servicesKubeletDeprecated;
        this.sshAgentAuth = $.sshAgentAuth;
        this.sshCertPath = $.sshCertPath;
        this.sshKeyPath = $.sshKeyPath;
        this.systemImages = $.systemImages;
        this.updateOnly = $.updateOnly;
        this.upgradeStrategy = $.upgradeStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonJobTimeout RKE k8s cluster addon deployment timeout in seconds for status check (int)
         * 
         * @return builder
         * 
         */
        public Builder addonJobTimeout(@Nullable Output<Integer> addonJobTimeout) {
            $.addonJobTimeout = addonJobTimeout;
            return this;
        }

        /**
         * @param addonJobTimeout RKE k8s cluster addon deployment timeout in seconds for status check (int)
         * 
         * @return builder
         * 
         */
        public Builder addonJobTimeout(Integer addonJobTimeout) {
            return addonJobTimeout(Output.of(addonJobTimeout));
        }

        /**
         * @param addons RKE k8s cluster user addons YAML manifest to be deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder addons(@Nullable Output<String> addons) {
            $.addons = addons;
            return this;
        }

        /**
         * @param addons RKE k8s cluster user addons YAML manifest to be deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder addons(String addons) {
            return addons(Output.of(addons));
        }

        /**
         * @param addonsIncludes RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
         * 
         * @return builder
         * 
         */
        public Builder addonsIncludes(@Nullable Output<List<String>> addonsIncludes) {
            $.addonsIncludes = addonsIncludes;
            return this;
        }

        /**
         * @param addonsIncludes RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
         * 
         * @return builder
         * 
         */
        public Builder addonsIncludes(List<String> addonsIncludes) {
            return addonsIncludes(Output.of(addonsIncludes));
        }

        /**
         * @param addonsIncludes RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)
         * 
         * @return builder
         * 
         */
        public Builder addonsIncludes(String... addonsIncludes) {
            return addonsIncludes(List.of(addonsIncludes));
        }

        /**
         * @param authentication RKE k8s cluster authentication configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<ClusterAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication RKE k8s cluster authentication configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder authentication(ClusterAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param authorization RKE k8s cluster authorization mode configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<ClusterAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization RKE k8s cluster authorization mode configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder authorization(ClusterAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param bastionHost RKE k8s cluster bastion Host configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder bastionHost(@Nullable Output<ClusterBastionHostArgs> bastionHost) {
            $.bastionHost = bastionHost;
            return this;
        }

        /**
         * @param bastionHost RKE k8s cluster bastion Host configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder bastionHost(ClusterBastionHostArgs bastionHost) {
            return bastionHost(Output.of(bastionHost));
        }

        /**
         * @param certDir Specify a certificate dir path (string)
         * 
         * @return builder
         * 
         */
        public Builder certDir(@Nullable Output<String> certDir) {
            $.certDir = certDir;
            return this;
        }

        /**
         * @param certDir Specify a certificate dir path (string)
         * 
         * @return builder
         * 
         */
        public Builder certDir(String certDir) {
            return certDir(Output.of(certDir));
        }

        /**
         * @param cloudProvider Calico cloud provider (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(@Nullable Output<ClusterCloudProviderArgs> cloudProvider) {
            $.cloudProvider = cloudProvider;
            return this;
        }

        /**
         * @param cloudProvider Calico cloud provider (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(ClusterCloudProviderArgs cloudProvider) {
            return cloudProvider(Output.of(cloudProvider));
        }

        /**
         * @param clusterName RKE k8s cluster name used in the kube config (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName RKE k8s cluster name used in the kube config (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param clusterYaml RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterYaml(@Nullable Output<String> clusterYaml) {
            $.clusterYaml = clusterYaml;
            return this;
        }

        /**
         * @param clusterYaml RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterYaml(String clusterYaml) {
            return clusterYaml(Output.of(clusterYaml));
        }

        /**
         * @param customCerts Use custom certificates from a cert dir (string)
         * 
         * @return builder
         * 
         */
        public Builder customCerts(@Nullable Output<Boolean> customCerts) {
            $.customCerts = customCerts;
            return this;
        }

        /**
         * @param customCerts Use custom certificates from a cert dir (string)
         * 
         * @return builder
         * 
         */
        public Builder customCerts(Boolean customCerts) {
            return customCerts(Output.of(customCerts));
        }

        /**
         * @param delayOnCreation RKE k8s cluster delay on creation (int)
         * 
         * @return builder
         * 
         */
        public Builder delayOnCreation(@Nullable Output<Integer> delayOnCreation) {
            $.delayOnCreation = delayOnCreation;
            return this;
        }

        /**
         * @param delayOnCreation RKE k8s cluster delay on creation (int)
         * 
         * @return builder
         * 
         */
        public Builder delayOnCreation(Integer delayOnCreation) {
            return delayOnCreation(Output.of(delayOnCreation));
        }

        /**
         * @param dind Deploy RKE cluster on a dind environment. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder dind(@Nullable Output<Boolean> dind) {
            $.dind = dind;
            return this;
        }

        /**
         * @param dind Deploy RKE cluster on a dind environment. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder dind(Boolean dind) {
            return dind(Output.of(dind));
        }

        /**
         * @param dindDnsServer DinD RKE cluster dns (string)
         * 
         * @return builder
         * 
         */
        public Builder dindDnsServer(@Nullable Output<String> dindDnsServer) {
            $.dindDnsServer = dindDnsServer;
            return this;
        }

        /**
         * @param dindDnsServer DinD RKE cluster dns (string)
         * 
         * @return builder
         * 
         */
        public Builder dindDnsServer(String dindDnsServer) {
            return dindDnsServer(Output.of(dindDnsServer));
        }

        /**
         * @param dindStorageDriver DinD RKE cluster storage driver (string)
         * 
         * @return builder
         * 
         */
        public Builder dindStorageDriver(@Nullable Output<String> dindStorageDriver) {
            $.dindStorageDriver = dindStorageDriver;
            return this;
        }

        /**
         * @param dindStorageDriver DinD RKE cluster storage driver (string)
         * 
         * @return builder
         * 
         */
        public Builder dindStorageDriver(String dindStorageDriver) {
            return dindStorageDriver(Output.of(dindStorageDriver));
        }

        /**
         * @param disablePortCheck Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder disablePortCheck(@Nullable Output<Boolean> disablePortCheck) {
            $.disablePortCheck = disablePortCheck;
            return this;
        }

        /**
         * @param disablePortCheck Enable/Disable RKE k8s cluster port checking. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder disablePortCheck(Boolean disablePortCheck) {
            return disablePortCheck(Output.of(disablePortCheck));
        }

        /**
         * @param dns RKE k8s cluster DNS Config (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<ClusterDnsArgs> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns RKE k8s cluster DNS Config (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder dns(ClusterDnsArgs dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param ignoreDockerVersion Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ignoreDockerVersion(@Nullable Output<Boolean> ignoreDockerVersion) {
            $.ignoreDockerVersion = ignoreDockerVersion;
            return this;
        }

        /**
         * @param ignoreDockerVersion Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ignoreDockerVersion(Boolean ignoreDockerVersion) {
            return ignoreDockerVersion(Output.of(ignoreDockerVersion));
        }

        /**
         * @param ingress Docker image for ingress (string)
         * 
         * @return builder
         * 
         */
        public Builder ingress(@Nullable Output<ClusterIngressArgs> ingress) {
            $.ingress = ingress;
            return this;
        }

        /**
         * @param ingress Docker image for ingress (string)
         * 
         * @return builder
         * 
         */
        public Builder ingress(ClusterIngressArgs ingress) {
            return ingress(Output.of(ingress));
        }

        /**
         * @param kubernetesVersion K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(@Nullable Output<String> kubernetesVersion) {
            $.kubernetesVersion = kubernetesVersion;
            return this;
        }

        /**
         * @param kubernetesVersion K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(String kubernetesVersion) {
            return kubernetesVersion(Output.of(kubernetesVersion));
        }

        /**
         * @param monitoring RKE k8s cluster monitoring Config (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<ClusterMonitoringArgs> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring RKE k8s cluster monitoring Config (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder monitoring(ClusterMonitoringArgs monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param network (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<ClusterNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder network(ClusterNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param nodes RKE k8s cluster nodes (list)
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<ClusterNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes RKE k8s cluster nodes (list)
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<ClusterNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes RKE k8s cluster nodes (list)
         * 
         * @return builder
         * 
         */
        public Builder nodes(ClusterNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use cluster_yaml instead
         * 
         */
        @Deprecated /* Use cluster_yaml instead */
        public Builder nodesConfs(@Nullable Output<List<String>> nodesConfs) {
            $.nodesConfs = nodesConfs;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use cluster_yaml instead
         * 
         */
        @Deprecated /* Use cluster_yaml instead */
        public Builder nodesConfs(List<String> nodesConfs) {
            return nodesConfs(Output.of(nodesConfs));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use cluster_yaml instead
         * 
         */
        @Deprecated /* Use cluster_yaml instead */
        public Builder nodesConfs(String... nodesConfs) {
            return nodesConfs(List.of(nodesConfs));
        }

        /**
         * @param prefixPath RKE k8s directory path (string)
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(@Nullable Output<String> prefixPath) {
            $.prefixPath = prefixPath;
            return this;
        }

        /**
         * @param prefixPath RKE k8s directory path (string)
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(String prefixPath) {
            return prefixPath(Output.of(prefixPath));
        }

        /**
         * @param privateRegistries RKE k8s cluster private docker registries (list)
         * 
         * @return builder
         * 
         */
        public Builder privateRegistries(@Nullable Output<List<ClusterPrivateRegistryArgs>> privateRegistries) {
            $.privateRegistries = privateRegistries;
            return this;
        }

        /**
         * @param privateRegistries RKE k8s cluster private docker registries (list)
         * 
         * @return builder
         * 
         */
        public Builder privateRegistries(List<ClusterPrivateRegistryArgs> privateRegistries) {
            return privateRegistries(Output.of(privateRegistries));
        }

        /**
         * @param privateRegistries RKE k8s cluster private docker registries (list)
         * 
         * @return builder
         * 
         */
        public Builder privateRegistries(ClusterPrivateRegistryArgs... privateRegistries) {
            return privateRegistries(List.of(privateRegistries));
        }

        /**
         * @param restore Restore cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder restore(@Nullable Output<ClusterRestoreArgs> restore) {
            $.restore = restore;
            return this;
        }

        /**
         * @param restore Restore cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder restore(ClusterRestoreArgs restore) {
            return restore(Output.of(restore));
        }

        /**
         * @param rotateCertificates RKE k8s cluster rotate certificates configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder rotateCertificates(@Nullable Output<ClusterRotateCertificatesArgs> rotateCertificates) {
            $.rotateCertificates = rotateCertificates;
            return this;
        }

        /**
         * @param rotateCertificates RKE k8s cluster rotate certificates configuration (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder rotateCertificates(ClusterRotateCertificatesArgs rotateCertificates) {
            return rotateCertificates(Output.of(rotateCertificates));
        }

        /**
         * @param services Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<ClusterServicesArgs> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)
         * 
         * @return builder
         * 
         */
        public Builder services(ClusterServicesArgs services) {
            return services(Output.of(services));
        }

        /**
         * @param servicesEtcdDeprecated Use services.etcd instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.etcd instead
         * 
         */
        @Deprecated /* Use services.etcd instead */
        public Builder servicesEtcdDeprecated(@Nullable Output<ClusterServicesEtcdDeprecatedArgs> servicesEtcdDeprecated) {
            $.servicesEtcdDeprecated = servicesEtcdDeprecated;
            return this;
        }

        /**
         * @param servicesEtcdDeprecated Use services.etcd instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.etcd instead
         * 
         */
        @Deprecated /* Use services.etcd instead */
        public Builder servicesEtcdDeprecated(ClusterServicesEtcdDeprecatedArgs servicesEtcdDeprecated) {
            return servicesEtcdDeprecated(Output.of(servicesEtcdDeprecated));
        }

        /**
         * @param servicesKubeApiDeprecated Use services.kube_api instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kube_api instead
         * 
         */
        @Deprecated /* Use services.kube_api instead */
        public Builder servicesKubeApiDeprecated(@Nullable Output<ClusterServicesKubeApiDeprecatedArgs> servicesKubeApiDeprecated) {
            $.servicesKubeApiDeprecated = servicesKubeApiDeprecated;
            return this;
        }

        /**
         * @param servicesKubeApiDeprecated Use services.kube_api instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kube_api instead
         * 
         */
        @Deprecated /* Use services.kube_api instead */
        public Builder servicesKubeApiDeprecated(ClusterServicesKubeApiDeprecatedArgs servicesKubeApiDeprecated) {
            return servicesKubeApiDeprecated(Output.of(servicesKubeApiDeprecated));
        }

        /**
         * @param servicesKubeControllerDeprecated Use services.kube_controller instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kube_controller instead
         * 
         */
        @Deprecated /* Use services.kube_controller instead */
        public Builder servicesKubeControllerDeprecated(@Nullable Output<ClusterServicesKubeControllerDeprecatedArgs> servicesKubeControllerDeprecated) {
            $.servicesKubeControllerDeprecated = servicesKubeControllerDeprecated;
            return this;
        }

        /**
         * @param servicesKubeControllerDeprecated Use services.kube_controller instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kube_controller instead
         * 
         */
        @Deprecated /* Use services.kube_controller instead */
        public Builder servicesKubeControllerDeprecated(ClusterServicesKubeControllerDeprecatedArgs servicesKubeControllerDeprecated) {
            return servicesKubeControllerDeprecated(Output.of(servicesKubeControllerDeprecated));
        }

        /**
         * @param servicesKubeProxyDeprecated Use services.kubeproxy instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kubeproxy instead
         * 
         */
        @Deprecated /* Use services.kubeproxy instead */
        public Builder servicesKubeProxyDeprecated(@Nullable Output<ClusterServicesKubeProxyDeprecatedArgs> servicesKubeProxyDeprecated) {
            $.servicesKubeProxyDeprecated = servicesKubeProxyDeprecated;
            return this;
        }

        /**
         * @param servicesKubeProxyDeprecated Use services.kubeproxy instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kubeproxy instead
         * 
         */
        @Deprecated /* Use services.kubeproxy instead */
        public Builder servicesKubeProxyDeprecated(ClusterServicesKubeProxyDeprecatedArgs servicesKubeProxyDeprecated) {
            return servicesKubeProxyDeprecated(Output.of(servicesKubeProxyDeprecated));
        }

        /**
         * @param servicesKubeSchedulerDeprecated Use services.scheduler instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.scheduler instead
         * 
         */
        @Deprecated /* Use services.scheduler instead */
        public Builder servicesKubeSchedulerDeprecated(@Nullable Output<ClusterServicesKubeSchedulerDeprecatedArgs> servicesKubeSchedulerDeprecated) {
            $.servicesKubeSchedulerDeprecated = servicesKubeSchedulerDeprecated;
            return this;
        }

        /**
         * @param servicesKubeSchedulerDeprecated Use services.scheduler instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.scheduler instead
         * 
         */
        @Deprecated /* Use services.scheduler instead */
        public Builder servicesKubeSchedulerDeprecated(ClusterServicesKubeSchedulerDeprecatedArgs servicesKubeSchedulerDeprecated) {
            return servicesKubeSchedulerDeprecated(Output.of(servicesKubeSchedulerDeprecated));
        }

        /**
         * @param servicesKubeletDeprecated Use services.kubelet instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kubelet instead
         * 
         */
        @Deprecated /* Use services.kubelet instead */
        public Builder servicesKubeletDeprecated(@Nullable Output<ClusterServicesKubeletDeprecatedArgs> servicesKubeletDeprecated) {
            $.servicesKubeletDeprecated = servicesKubeletDeprecated;
            return this;
        }

        /**
         * @param servicesKubeletDeprecated Use services.kubelet instead (list maxitems:1)
         * 
         * @return builder
         * 
         * @deprecated
         * Use services.kubelet instead
         * 
         */
        @Deprecated /* Use services.kubelet instead */
        public Builder servicesKubeletDeprecated(ClusterServicesKubeletDeprecatedArgs servicesKubeletDeprecated) {
            return servicesKubeletDeprecated(Output.of(servicesKubeletDeprecated));
        }

        /**
         * @param sshAgentAuth SSH Agent Auth enable (bool)
         * 
         * @return builder
         * 
         */
        public Builder sshAgentAuth(@Nullable Output<Boolean> sshAgentAuth) {
            $.sshAgentAuth = sshAgentAuth;
            return this;
        }

        /**
         * @param sshAgentAuth SSH Agent Auth enable (bool)
         * 
         * @return builder
         * 
         */
        public Builder sshAgentAuth(Boolean sshAgentAuth) {
            return sshAgentAuth(Output.of(sshAgentAuth));
        }

        /**
         * @param sshCertPath SSH Certificate path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCertPath(@Nullable Output<String> sshCertPath) {
            $.sshCertPath = sshCertPath;
            return this;
        }

        /**
         * @param sshCertPath SSH Certificate path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshCertPath(String sshCertPath) {
            return sshCertPath(Output.of(sshCertPath));
        }

        /**
         * @param sshKeyPath SSH Private Key path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPath(@Nullable Output<String> sshKeyPath) {
            $.sshKeyPath = sshKeyPath;
            return this;
        }

        /**
         * @param sshKeyPath SSH Private Key path (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPath(String sshKeyPath) {
            return sshKeyPath(Output.of(sshKeyPath));
        }

        /**
         * @param systemImages RKE k8s cluster system images list (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder systemImages(@Nullable Output<ClusterSystemImagesArgs> systemImages) {
            $.systemImages = systemImages;
            return this;
        }

        /**
         * @param systemImages RKE k8s cluster system images list (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder systemImages(ClusterSystemImagesArgs systemImages) {
            return systemImages(Output.of(systemImages));
        }

        /**
         * @param updateOnly Skip idempotent deployment of control and etcd plane. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder updateOnly(@Nullable Output<Boolean> updateOnly) {
            $.updateOnly = updateOnly;
            return this;
        }

        /**
         * @param updateOnly Skip idempotent deployment of control and etcd plane. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder updateOnly(Boolean updateOnly) {
            return updateOnly(Output.of(updateOnly));
        }

        /**
         * @param upgradeStrategy RKE k8s cluster upgrade strategy (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder upgradeStrategy(@Nullable Output<ClusterUpgradeStrategyArgs> upgradeStrategy) {
            $.upgradeStrategy = upgradeStrategy;
            return this;
        }

        /**
         * @param upgradeStrategy RKE k8s cluster upgrade strategy (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder upgradeStrategy(ClusterUpgradeStrategyArgs upgradeStrategy) {
            return upgradeStrategy(Output.of(upgradeStrategy));
        }

        public ClusterArgs build() {
            return $;
        }
    }

}
