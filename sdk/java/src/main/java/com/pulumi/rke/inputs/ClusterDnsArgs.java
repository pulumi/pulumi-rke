// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rke.inputs.ClusterDnsNodelocalArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterDnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterDnsArgs Empty = new ClusterDnsArgs();

    /**
     * NodeSelector key pair
     * 
     */
    @Import(name="nodeSelector")
    private @Nullable Output<Map<String,String>> nodeSelector;

    /**
     * @return NodeSelector key pair
     * 
     */
    public Optional<Output<Map<String,String>>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * Nodelocal dns
     * 
     */
    @Import(name="nodelocal")
    private @Nullable Output<ClusterDnsNodelocalArgs> nodelocal;

    /**
     * @return Nodelocal dns
     * 
     */
    public Optional<Output<ClusterDnsNodelocalArgs>> nodelocal() {
        return Optional.ofNullable(this.nodelocal);
    }

    /**
     * DNS provider
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    /**
     * @return DNS provider
     * 
     */
    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * ReverseCIDRs
     * 
     */
    @Import(name="reverseCidrs")
    private @Nullable Output<List<String>> reverseCidrs;

    /**
     * @return ReverseCIDRs
     * 
     */
    public Optional<Output<List<String>>> reverseCidrs() {
        return Optional.ofNullable(this.reverseCidrs);
    }

    /**
     * Upstream nameservers
     * 
     */
    @Import(name="upstreamNameservers")
    private @Nullable Output<List<String>> upstreamNameservers;

    /**
     * @return Upstream nameservers
     * 
     */
    public Optional<Output<List<String>>> upstreamNameservers() {
        return Optional.ofNullable(this.upstreamNameservers);
    }

    private ClusterDnsArgs() {}

    private ClusterDnsArgs(ClusterDnsArgs $) {
        this.nodeSelector = $.nodeSelector;
        this.nodelocal = $.nodelocal;
        this.provider = $.provider;
        this.reverseCidrs = $.reverseCidrs;
        this.upstreamNameservers = $.upstreamNameservers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterDnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterDnsArgs $;

        public Builder() {
            $ = new ClusterDnsArgs();
        }

        public Builder(ClusterDnsArgs defaults) {
            $ = new ClusterDnsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeSelector NodeSelector key pair
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(@Nullable Output<Map<String,String>> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        /**
         * @param nodeSelector NodeSelector key pair
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(Map<String,String> nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param nodelocal Nodelocal dns
         * 
         * @return builder
         * 
         */
        public Builder nodelocal(@Nullable Output<ClusterDnsNodelocalArgs> nodelocal) {
            $.nodelocal = nodelocal;
            return this;
        }

        /**
         * @param nodelocal Nodelocal dns
         * 
         * @return builder
         * 
         */
        public Builder nodelocal(ClusterDnsNodelocalArgs nodelocal) {
            return nodelocal(Output.of(nodelocal));
        }

        /**
         * @param provider DNS provider
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider DNS provider
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param reverseCidrs ReverseCIDRs
         * 
         * @return builder
         * 
         */
        public Builder reverseCidrs(@Nullable Output<List<String>> reverseCidrs) {
            $.reverseCidrs = reverseCidrs;
            return this;
        }

        /**
         * @param reverseCidrs ReverseCIDRs
         * 
         * @return builder
         * 
         */
        public Builder reverseCidrs(List<String> reverseCidrs) {
            return reverseCidrs(Output.of(reverseCidrs));
        }

        /**
         * @param reverseCidrs ReverseCIDRs
         * 
         * @return builder
         * 
         */
        public Builder reverseCidrs(String... reverseCidrs) {
            return reverseCidrs(List.of(reverseCidrs));
        }

        /**
         * @param upstreamNameservers Upstream nameservers
         * 
         * @return builder
         * 
         */
        public Builder upstreamNameservers(@Nullable Output<List<String>> upstreamNameservers) {
            $.upstreamNameservers = upstreamNameservers;
            return this;
        }

        /**
         * @param upstreamNameservers Upstream nameservers
         * 
         * @return builder
         * 
         */
        public Builder upstreamNameservers(List<String> upstreamNameservers) {
            return upstreamNameservers(Output.of(upstreamNameservers));
        }

        /**
         * @param upstreamNameservers Upstream nameservers
         * 
         * @return builder
         * 
         */
        public Builder upstreamNameservers(String... upstreamNameservers) {
            return upstreamNameservers(List.of(upstreamNameservers));
        }

        public ClusterDnsArgs build() {
            return $;
        }
    }

}
