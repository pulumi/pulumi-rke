// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rke.outputs.ClusterNodeTaint;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNode {
    /**
     * @return Address ip for node (string)
     * 
     */
    private String address;
    /**
     * @return Docker socket on the node that will be used in tunneling (string)
     * 
     */
    private @Nullable String dockerSocket;
    /**
     * @return Hostname override for node (string)
     * 
     */
    private @Nullable String hostnameOverride;
    /**
     * @return Internal address that will be used for components communication (string)
     * 
     */
    private @Nullable String internalAddress;
    /**
     * @return Node labels (map)
     * 
     */
    private @Nullable Map<String,Object> labels;
    /**
     * @return Name of the host provisioned via docker machine (string)
     * 
     */
    private @Nullable String nodeName;
    /**
     * @return Port used for SSH communication (string)
     * 
     */
    private @Nullable String port;
    /**
     * @return Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    private List<String> roles;
    /**
     * @deprecated
     * Use role instead
     * 
     */
    @Deprecated /* Use role instead */
    private @Nullable String rolesDeprecated;
    /**
     * @return SSH Agent Auth enable (bool)
     * 
     */
    private @Nullable Boolean sshAgentAuth;
    /**
     * @return SSH Certificate (string)
     * 
     */
    private @Nullable String sshCert;
    /**
     * @return SSH Certificate path (string)
     * 
     */
    private @Nullable String sshCertPath;
    /**
     * @return SSH Private Key (string)
     * 
     */
    private @Nullable String sshKey;
    /**
     * @return SSH Private Key path (string)
     * 
     */
    private @Nullable String sshKeyPath;
    /**
     * @return Node taints (list)
     * 
     */
    private @Nullable List<ClusterNodeTaint> taints;
    /**
     * @return Registry user (string)
     * 
     */
    private String user;

    private ClusterNode() {}
    /**
     * @return Address ip for node (string)
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Docker socket on the node that will be used in tunneling (string)
     * 
     */
    public Optional<String> dockerSocket() {
        return Optional.ofNullable(this.dockerSocket);
    }
    /**
     * @return Hostname override for node (string)
     * 
     */
    public Optional<String> hostnameOverride() {
        return Optional.ofNullable(this.hostnameOverride);
    }
    /**
     * @return Internal address that will be used for components communication (string)
     * 
     */
    public Optional<String> internalAddress() {
        return Optional.ofNullable(this.internalAddress);
    }
    /**
     * @return Node labels (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Name of the host provisioned via docker machine (string)
     * 
     */
    public Optional<String> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }
    /**
     * @return Port used for SSH communication (string)
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @deprecated
     * Use role instead
     * 
     */
    @Deprecated /* Use role instead */
    public Optional<String> rolesDeprecated() {
        return Optional.ofNullable(this.rolesDeprecated);
    }
    /**
     * @return SSH Agent Auth enable (bool)
     * 
     */
    public Optional<Boolean> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }
    /**
     * @return SSH Certificate (string)
     * 
     */
    public Optional<String> sshCert() {
        return Optional.ofNullable(this.sshCert);
    }
    /**
     * @return SSH Certificate path (string)
     * 
     */
    public Optional<String> sshCertPath() {
        return Optional.ofNullable(this.sshCertPath);
    }
    /**
     * @return SSH Private Key (string)
     * 
     */
    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * @return SSH Private Key path (string)
     * 
     */
    public Optional<String> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }
    /**
     * @return Node taints (list)
     * 
     */
    public List<ClusterNodeTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    /**
     * @return Registry user (string)
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable String dockerSocket;
        private @Nullable String hostnameOverride;
        private @Nullable String internalAddress;
        private @Nullable Map<String,Object> labels;
        private @Nullable String nodeName;
        private @Nullable String port;
        private List<String> roles;
        private @Nullable String rolesDeprecated;
        private @Nullable Boolean sshAgentAuth;
        private @Nullable String sshCert;
        private @Nullable String sshCertPath;
        private @Nullable String sshKey;
        private @Nullable String sshKeyPath;
        private @Nullable List<ClusterNodeTaint> taints;
        private String user;
        public Builder() {}
        public Builder(ClusterNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.dockerSocket = defaults.dockerSocket;
    	      this.hostnameOverride = defaults.hostnameOverride;
    	      this.internalAddress = defaults.internalAddress;
    	      this.labels = defaults.labels;
    	      this.nodeName = defaults.nodeName;
    	      this.port = defaults.port;
    	      this.roles = defaults.roles;
    	      this.rolesDeprecated = defaults.rolesDeprecated;
    	      this.sshAgentAuth = defaults.sshAgentAuth;
    	      this.sshCert = defaults.sshCert;
    	      this.sshCertPath = defaults.sshCertPath;
    	      this.sshKey = defaults.sshKey;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.taints = defaults.taints;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder dockerSocket(@Nullable String dockerSocket) {
            this.dockerSocket = dockerSocket;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameOverride(@Nullable String hostnameOverride) {
            this.hostnameOverride = hostnameOverride;
            return this;
        }
        @CustomType.Setter
        public Builder internalAddress(@Nullable String internalAddress) {
            this.internalAddress = internalAddress;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(@Nullable String nodeName) {
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder rolesDeprecated(@Nullable String rolesDeprecated) {
            this.rolesDeprecated = rolesDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder sshAgentAuth(@Nullable Boolean sshAgentAuth) {
            this.sshAgentAuth = sshAgentAuth;
            return this;
        }
        @CustomType.Setter
        public Builder sshCert(@Nullable String sshCert) {
            this.sshCert = sshCert;
            return this;
        }
        @CustomType.Setter
        public Builder sshCertPath(@Nullable String sshCertPath) {
            this.sshCertPath = sshCertPath;
            return this;
        }
        @CustomType.Setter
        public Builder sshKey(@Nullable String sshKey) {
            this.sshKey = sshKey;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyPath(@Nullable String sshKeyPath) {
            this.sshKeyPath = sshKeyPath;
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<ClusterNodeTaint> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(ClusterNodeTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder user(String user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }
        public ClusterNode build() {
            final var o = new ClusterNode();
            o.address = address;
            o.dockerSocket = dockerSocket;
            o.hostnameOverride = hostnameOverride;
            o.internalAddress = internalAddress;
            o.labels = labels;
            o.nodeName = nodeName;
            o.port = port;
            o.roles = roles;
            o.rolesDeprecated = rolesDeprecated;
            o.sshAgentAuth = sshAgentAuth;
            o.sshCert = sshCert;
            o.sshCertPath = sshCertPath;
            o.sshKey = sshKey;
            o.sshKeyPath = sshKeyPath;
            o.taints = taints;
            o.user = user;
            return o;
        }
    }
}
