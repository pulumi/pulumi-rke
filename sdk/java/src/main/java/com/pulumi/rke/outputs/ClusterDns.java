// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rke.outputs.ClusterDnsNodelocal;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterDns {
    /**
     * @return Node selector key pair (map)
     * 
     */
    private @Nullable Map<String,Object> nodeSelector;
    /**
     * @return Docker image for nodelocal (string)
     * 
     */
    private @Nullable ClusterDnsNodelocal nodelocal;
    /**
     * @return Monitoring provider (string)
     * 
     */
    private @Nullable String provider;
    /**
     * @return Reverse CIDRs  (list)
     * 
     */
    private @Nullable List<String> reverseCidrs;
    /**
     * @return Upstream nameservers  (list)
     * 
     */
    private @Nullable List<String> upstreamNameservers;

    private ClusterDns() {}
    /**
     * @return Node selector key pair (map)
     * 
     */
    public Map<String,Object> nodeSelector() {
        return this.nodeSelector == null ? Map.of() : this.nodeSelector;
    }
    /**
     * @return Docker image for nodelocal (string)
     * 
     */
    public Optional<ClusterDnsNodelocal> nodelocal() {
        return Optional.ofNullable(this.nodelocal);
    }
    /**
     * @return Monitoring provider (string)
     * 
     */
    public Optional<String> provider() {
        return Optional.ofNullable(this.provider);
    }
    /**
     * @return Reverse CIDRs  (list)
     * 
     */
    public List<String> reverseCidrs() {
        return this.reverseCidrs == null ? List.of() : this.reverseCidrs;
    }
    /**
     * @return Upstream nameservers  (list)
     * 
     */
    public List<String> upstreamNameservers() {
        return this.upstreamNameservers == null ? List.of() : this.upstreamNameservers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterDns defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> nodeSelector;
        private @Nullable ClusterDnsNodelocal nodelocal;
        private @Nullable String provider;
        private @Nullable List<String> reverseCidrs;
        private @Nullable List<String> upstreamNameservers;
        public Builder() {}
        public Builder(ClusterDns defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.nodelocal = defaults.nodelocal;
    	      this.provider = defaults.provider;
    	      this.reverseCidrs = defaults.reverseCidrs;
    	      this.upstreamNameservers = defaults.upstreamNameservers;
        }

        @CustomType.Setter
        public Builder nodeSelector(@Nullable Map<String,Object> nodeSelector) {

            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder nodelocal(@Nullable ClusterDnsNodelocal nodelocal) {

            this.nodelocal = nodelocal;
            return this;
        }
        @CustomType.Setter
        public Builder provider(@Nullable String provider) {

            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder reverseCidrs(@Nullable List<String> reverseCidrs) {

            this.reverseCidrs = reverseCidrs;
            return this;
        }
        public Builder reverseCidrs(String... reverseCidrs) {
            return reverseCidrs(List.of(reverseCidrs));
        }
        @CustomType.Setter
        public Builder upstreamNameservers(@Nullable List<String> upstreamNameservers) {

            this.upstreamNameservers = upstreamNameservers;
            return this;
        }
        public Builder upstreamNameservers(String... upstreamNameservers) {
            return upstreamNameservers(List.of(upstreamNameservers));
        }
        public ClusterDns build() {
            final var _resultValue = new ClusterDns();
            _resultValue.nodeSelector = nodeSelector;
            _resultValue.nodelocal = nodelocal;
            _resultValue.provider = provider;
            _resultValue.reverseCidrs = reverseCidrs;
            _resultValue.upstreamNameservers = upstreamNameservers;
            return _resultValue;
        }
    }
}
