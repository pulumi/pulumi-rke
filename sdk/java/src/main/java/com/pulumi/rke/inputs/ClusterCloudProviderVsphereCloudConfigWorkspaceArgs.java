// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterCloudProviderVsphereCloudConfigWorkspaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterCloudProviderVsphereCloudConfigWorkspaceArgs Empty = new ClusterCloudProviderVsphereCloudConfigWorkspaceArgs();

    @Import(name="datacenter", required=true)
    private Output<String> datacenter;

    public Output<String> datacenter() {
        return this.datacenter;
    }

    @Import(name="defaultDatastore")
    private @Nullable Output<String> defaultDatastore;

    public Optional<Output<String>> defaultDatastore() {
        return Optional.ofNullable(this.defaultDatastore);
    }

    @Import(name="folder")
    private @Nullable Output<String> folder;

    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    @Import(name="resourcepoolPath")
    private @Nullable Output<String> resourcepoolPath;

    public Optional<Output<String>> resourcepoolPath() {
        return Optional.ofNullable(this.resourcepoolPath);
    }

    @Import(name="server", required=true)
    private Output<String> server;

    public Output<String> server() {
        return this.server;
    }

    private ClusterCloudProviderVsphereCloudConfigWorkspaceArgs() {}

    private ClusterCloudProviderVsphereCloudConfigWorkspaceArgs(ClusterCloudProviderVsphereCloudConfigWorkspaceArgs $) {
        this.datacenter = $.datacenter;
        this.defaultDatastore = $.defaultDatastore;
        this.folder = $.folder;
        this.resourcepoolPath = $.resourcepoolPath;
        this.server = $.server;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterCloudProviderVsphereCloudConfigWorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterCloudProviderVsphereCloudConfigWorkspaceArgs $;

        public Builder() {
            $ = new ClusterCloudProviderVsphereCloudConfigWorkspaceArgs();
        }

        public Builder(ClusterCloudProviderVsphereCloudConfigWorkspaceArgs defaults) {
            $ = new ClusterCloudProviderVsphereCloudConfigWorkspaceArgs(Objects.requireNonNull(defaults));
        }

        public Builder datacenter(Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        public Builder defaultDatastore(@Nullable Output<String> defaultDatastore) {
            $.defaultDatastore = defaultDatastore;
            return this;
        }

        public Builder defaultDatastore(String defaultDatastore) {
            return defaultDatastore(Output.of(defaultDatastore));
        }

        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public Builder resourcepoolPath(@Nullable Output<String> resourcepoolPath) {
            $.resourcepoolPath = resourcepoolPath;
            return this;
        }

        public Builder resourcepoolPath(String resourcepoolPath) {
            return resourcepoolPath(Output.of(resourcepoolPath));
        }

        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        public Builder server(String server) {
            return server(Output.of(server));
        }

        public ClusterCloudProviderVsphereCloudConfigWorkspaceArgs build() {
            if ($.datacenter == null) {
                throw new MissingRequiredPropertyException("ClusterCloudProviderVsphereCloudConfigWorkspaceArgs", "datacenter");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("ClusterCloudProviderVsphereCloudConfigWorkspaceArgs", "server");
            }
            return $;
        }
    }

}
