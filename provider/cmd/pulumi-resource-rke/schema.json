{
    "name": "rke",
    "displayName": "Rancher Kubernetes Engine (RKE)",
    "description": "A Pulumi package for creating and managing rke cloud resources.",
    "keywords": [
        "pulumi",
        "rke"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rke` Terraform Provider](https://github.com/rancher/terraform-provider-rke).",
    "repository": "https://github.com/pulumi/pulumi-rke",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "index": "index",
                "rke": "Rke"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-rke/sdk/v3/go/rke",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing rke cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rke)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rke` repo](https://github.com/pulumi/pulumi-rke/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rke` repo](https://github.com/rancher/terraform-provider-rke/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rke)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rke` repo](https://github.com/pulumi/pulumi-rke/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rke` repo](https://github.com/rancher/terraform-provider-rke/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "debug": {
                "type": "boolean",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RKE_DEBUG"
                    ]
                }
            },
            "logFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RKE_LOG_FILE"
                    ]
                }
            }
        }
    },
    "types": {
        "rke:index/ClusterAuthentication:ClusterAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional hostnames and IPs to include in the api server PKI cert\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Authentication strategy that will be used in RKE k8s cluster\n"
                },
                "webhook": {
                    "$ref": "#/types/rke:index/ClusterAuthenticationWebhook:ClusterAuthenticationWebhook",
                    "description": "Webhook configuration options\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "webhook"
                    ]
                }
            }
        },
        "rke:index/ClusterAuthenticationWebhook:ClusterAuthenticationWebhook": {
            "properties": {
                "cacheTimeout": {
                    "type": "string",
                    "description": "Controls how long to cache authentication decisions\n"
                },
                "configFile": {
                    "type": "string",
                    "description": "Multiline string that represent a custom webhook config file\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterAuthorization:ClusterAuthorization": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Authorization mode options\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterBastionHost:ClusterBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address of Bastion Host\n"
                },
                "ignoreProxyEnvVars": {
                    "type": "boolean",
                    "description": "Ignore proxy env vars at Bastion Host?\n"
                },
                "port": {
                    "type": "string",
                    "description": "SSH Port of Bastion Host\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCert": {
                    "type": "string",
                    "description": "SSH Certificate Key\n",
                    "secret": true
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate Path (string)\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH Private Key\n",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key Path (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "SSH User to Bastion Host\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshAgentAuth",
                        "sshCertPath",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rke:index/ClusterCertificate:ClusterCertificate": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "secret": true
                },
                "commonName": {
                    "type": "string"
                },
                "config": {
                    "type": "string",
                    "secret": true
                },
                "configEnvName": {
                    "type": "string"
                },
                "configPath": {
                    "type": "string"
                },
                "envName": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "keyEnvName": {
                    "type": "string"
                },
                "keyPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ouName": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificate",
                        "commonName",
                        "config",
                        "configEnvName",
                        "configPath",
                        "envName",
                        "id",
                        "key",
                        "keyEnvName",
                        "keyPath",
                        "name",
                        "ouName",
                        "path"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProvider:ClusterCloudProvider": {
            "properties": {
                "awsCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfig:ClusterCloudProviderAwsCloudConfig",
                    "deprecationMessage": "Use aws_cloud_provider instead"
                },
                "awsCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProvider:ClusterCloudProviderAwsCloudProvider",
                    "description": "AWS Cloud Provider config\n"
                },
                "azureCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAzureCloudConfig:ClusterCloudProviderAzureCloudConfig",
                    "deprecationMessage": "Use azure_cloud_provider instead"
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAzureCloudProvider:ClusterCloudProviderAzureCloudProvider",
                    "description": "Azure Cloud Provider config\n"
                },
                "customCloudConfig": {
                    "type": "string",
                    "deprecationMessage": "Use custom_cloud_provider instead"
                },
                "customCloudProvider": {
                    "type": "string",
                    "description": "Custom Cloud Provider config\n"
                },
                "name": {
                    "type": "string"
                },
                "openstackCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfig:ClusterCloudProviderOpenstackCloudConfig",
                    "deprecationMessage": "Use openstack_cloud_provider instead"
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProvider:ClusterCloudProviderOpenstackCloudProvider",
                    "description": "Openstack Cloud Provider config\n"
                },
                "vsphereCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfig:ClusterCloudProviderVsphereCloudConfig",
                    "deprecationMessage": "Use vsphere_cloud_provider instead"
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProvider:ClusterCloudProviderVsphereCloudProvider",
                    "description": "Vsphere Cloud Provider config\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rke:index/ClusterCloudProviderAwsCloudConfig:ClusterCloudProviderAwsCloudConfig": {
            "properties": {
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfigGlobal:ClusterCloudProviderAwsCloudConfigGlobal"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfigServiceOverride:ClusterCloudProviderAwsCloudConfigServiceOverride"
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudConfigGlobal:ClusterCloudProviderAwsCloudConfigGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Disables the automatic ingress creation\n"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Setting this to true will disable the check and provide a warning that the check was skipped\n"
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "Use these ELB security groups instead create new\n"
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "The cluster id we'll use to identify our cluster resources\n"
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "Legacy cluster id we'll use to identify our cluster resources\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "IAM role to assume when interaction with AWS APIs\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Enables using a specific RouteTable\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Enables using a specific subnet to use for ELB's\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The AWS zone\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudConfigServiceOverride:ClusterCloudProviderAwsCloudConfigServiceOverride": {
            "properties": {
                "key": {
                    "type": "string",
                    "deprecationMessage": "Use service instead"
                },
                "region": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "signingMethod": {
                    "type": "string"
                },
                "signingName": {
                    "type": "string"
                },
                "signingRegion": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "service",
                        "signingMethod"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAwsCloudProvider:ClusterCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProviderGlobal:ClusterCloudProviderAwsCloudProviderGlobal"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProviderServiceOverride:ClusterCloudProviderAwsCloudProviderServiceOverride"
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudProviderGlobal:ClusterCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Disables the automatic ingress creation\n"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Setting this to true will disable the check and provide a warning that the check was skipped\n"
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "Use these ELB security groups instead create new\n"
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "The cluster id we'll use to identify our cluster resources\n"
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "Legacy cluster id we'll use to identify our cluster resources\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "IAM role to assume when interaction with AWS APIs\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Enables using a specific RouteTable\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Enables using a specific subnet to use for ELB's\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The AWS zone\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudProviderServiceOverride:ClusterCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "key": {
                    "type": "string",
                    "deprecationMessage": "Use service instead"
                },
                "region": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "signingMethod": {
                    "type": "string"
                },
                "signingName": {
                    "type": "string"
                },
                "signingRegion": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "service",
                        "signingMethod"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAzureCloudConfig:ClusterCloudProviderAzureCloudConfig": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "The password of the client certificate for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "The path of a client certificate for an AAD application with RBAC access to talk to Azure RM APIs\n"
                },
                "aadClientId": {
                    "type": "string",
                    "description": "The ClientID for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "The ClientSecret for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud environment identifier. Takes values from https://github.com/Azure/go-autorest/blob/ec5f4903f77ed9927ac95b19ab8e44ada64c1356/autorest/azure/environments.go#L13\n"
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "Enable exponential backoff to manage resource request retries\n"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "Backoff duration\n"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "Backoff exponent\n"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "Backoff jitter\n"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "Backoff retry limit\n"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "Enable rate limiting\n"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "Rate limit QPS\n"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the resource group that the cluster is deployed in\n"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "Maximum allowed LoadBalancer Rule Count is the limit enforced by Azure Load balancer\n"
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "The name of the availability set that should be used as the load balancer backendIf this is set, the Azure cloudprovider will only add nodes from that availability set to the loadbalancer backend pool. If this is not set, and multiple agent pools (availability sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (availability sets), you MUST set this field.\n"
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "The name of the scale set that should be used as the load balancer backend.If this is set, the Azure cloudprovider will only add nodes from that scale set to the loadbalancer backend pool. If this is not set, and multiple agent pools (scale sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (scale sets), you MUST set this field.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group that the cluster is deployed in\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(Optional in 1.6) The name of the route table attached to the subnet that the cluster is deployed in\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "The name of the security group attached to the cluster's subnet\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet that the cluster is deployed in\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The ID of the Azure Subscription that the cluster is deployed in\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The AAD Tenant ID for the Subscription that the cluster is deployed in\n",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "Use instance metadata service where possible\n"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "Use managed service identity for the virtual machine to access Azure ARM APIs\n"
                },
                "vmType": {
                    "type": "string",
                    "description": "The type of azure nodes. If not set, it will be default to standard.\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "The name of the VNet that the cluster is deployed in\n"
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group that the Vnet is deployed in\n"
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientId",
                        "aadClientSecret",
                        "cloudProviderRateLimitBucket",
                        "subscriptionId",
                        "tenantId"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAzureCloudProvider:ClusterCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "The password of the client certificate for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "The path of a client certificate for an AAD application with RBAC access to talk to Azure RM APIs\n"
                },
                "aadClientId": {
                    "type": "string",
                    "description": "The ClientID for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "The ClientSecret for an AAD application with RBAC access to talk to Azure RM APIs\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud environment identifier. Takes values from https://github.com/Azure/go-autorest/blob/ec5f4903f77ed9927ac95b19ab8e44ada64c1356/autorest/azure/environments.go#L13\n"
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "Enable exponential backoff to manage resource request retries\n"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "Backoff duration\n"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "Backoff exponent\n"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "Backoff jitter\n"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "Backoff retry limit\n"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "Enable rate limiting\n"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "Rate limit QPS\n"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the resource group that the cluster is deployed in\n"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "Maximum allowed LoadBalancer Rule Count is the limit enforced by Azure Load balancer\n"
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "The name of the availability set that should be used as the load balancer backendIf this is set, the Azure cloudprovider will only add nodes from that availability set to the loadbalancer backend pool. If this is not set, and multiple agent pools (availability sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (availability sets), you MUST set this field.\n"
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "The name of the scale set that should be used as the load balancer backend.If this is set, the Azure cloudprovider will only add nodes from that scale set to the loadbalancer backend pool. If this is not set, and multiple agent pools (scale sets) are used, thenthe cloudprovider will try to add all nodes to a single backend pool which is forbidden.In other words, if you use multiple agent pools (scale sets), you MUST set this field.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group that the cluster is deployed in\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(Optional in 1.6) The name of the route table attached to the subnet that the cluster is deployed in\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "The name of the security group attached to the cluster's subnet\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet that the cluster is deployed in\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The ID of the Azure Subscription that the cluster is deployed in\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The AAD Tenant ID for the Subscription that the cluster is deployed in\n",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "Use instance metadata service where possible\n"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "Use managed service identity for the virtual machine to access Azure ARM APIs\n"
                },
                "vmType": {
                    "type": "string",
                    "description": "The type of azure nodes. If not set, it will be default to standard.\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "The name of the VNet that the cluster is deployed in\n"
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group that the Vnet is deployed in\n"
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientId",
                        "aadClientSecret",
                        "cloudProviderRateLimitBucket",
                        "subscriptionId",
                        "tenantId"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfig:ClusterCloudProviderOpenstackCloudConfig": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigBlockStorage:ClusterCloudProviderOpenstackCloudConfigBlockStorage"
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigGlobal:ClusterCloudProviderOpenstackCloudConfigGlobal"
                },
                "loadBalancer": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigLoadBalancer:ClusterCloudProviderOpenstackCloudConfigLoadBalancer"
                },
                "metadata": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigMetadata:ClusterCloudProviderOpenstackCloudConfigMetadata"
                },
                "route": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigRoute:ClusterCloudProviderOpenstackCloudConfigRoute"
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigBlockStorage:ClusterCloudProviderOpenstackCloudConfigBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string"
                },
                "ignoreVolumeAz": {
                    "type": "boolean"
                },
                "trustDevicePath": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigGlobal:ClusterCloudProviderOpenstackCloudConfigGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string",
                    "secret": true
                },
                "domainName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "region": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "tenantName": {
                    "type": "string"
                },
                "trustId": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password"
            ]
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigLoadBalancer:ClusterCloudProviderOpenstackCloudConfigLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean"
                },
                "floatingNetworkId": {
                    "type": "string"
                },
                "lbMethod": {
                    "type": "string"
                },
                "lbProvider": {
                    "type": "string"
                },
                "lbVersion": {
                    "type": "string"
                },
                "manageSecurityGroups": {
                    "type": "boolean"
                },
                "monitorDelay": {
                    "type": "string"
                },
                "monitorMaxRetries": {
                    "type": "integer"
                },
                "monitorTimeout": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "useOctavia": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigMetadata:ClusterCloudProviderOpenstackCloudConfigMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer"
                },
                "searchOrder": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigRoute:ClusterCloudProviderOpenstackCloudConfigRoute": {
            "properties": {
                "routerId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProvider:ClusterCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderBlockStorage:ClusterCloudProviderOpenstackCloudProviderBlockStorage"
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderGlobal:ClusterCloudProviderOpenstackCloudProviderGlobal"
                },
                "loadBalancer": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderLoadBalancer:ClusterCloudProviderOpenstackCloudProviderLoadBalancer"
                },
                "metadata": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderMetadata:ClusterCloudProviderOpenstackCloudProviderMetadata"
                },
                "route": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderRoute:ClusterCloudProviderOpenstackCloudProviderRoute"
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderBlockStorage:ClusterCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string"
                },
                "ignoreVolumeAz": {
                    "type": "boolean"
                },
                "trustDevicePath": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderGlobal:ClusterCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string",
                    "secret": true
                },
                "domainName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "region": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "tenantName": {
                    "type": "string"
                },
                "trustId": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password"
            ]
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderLoadBalancer:ClusterCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean"
                },
                "floatingNetworkId": {
                    "type": "string"
                },
                "lbMethod": {
                    "type": "string"
                },
                "lbProvider": {
                    "type": "string"
                },
                "lbVersion": {
                    "type": "string"
                },
                "manageSecurityGroups": {
                    "type": "boolean"
                },
                "monitorDelay": {
                    "type": "string"
                },
                "monitorMaxRetries": {
                    "type": "integer"
                },
                "monitorTimeout": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "useOctavia": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderMetadata:ClusterCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer"
                },
                "searchOrder": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderRoute:ClusterCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfig:ClusterCloudProviderVsphereCloudConfig": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigDisk:ClusterCloudProviderVsphereCloudConfigDisk"
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigGlobal:ClusterCloudProviderVsphereCloudConfigGlobal"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigNetwork:ClusterCloudProviderVsphereCloudConfigNetwork",
                    "description": "RKE k8s cluster network configuration (list maxitems:1)\n"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigVirtualCenter:ClusterCloudProviderVsphereCloudConfigVirtualCenter"
                    }
                },
                "workspace": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigWorkspace:ClusterCloudProviderVsphereCloudConfigWorkspace"
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigDisk:ClusterCloudProviderVsphereCloudConfigDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigGlobal:ClusterCloudProviderVsphereCloudConfigGlobal": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "datacenters": {
                    "type": "string"
                },
                "datastore": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                },
                "vmName": {
                    "type": "string"
                },
                "vmUuid": {
                    "type": "string"
                },
                "workingDir": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigNetwork:ClusterCloudProviderVsphereCloudConfigNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigVirtualCenter:ClusterCloudProviderVsphereCloudConfigVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigWorkspace:ClusterCloudProviderVsphereCloudConfigWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "defaultDatastore": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "resourcepoolPath": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "server"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudProvider:ClusterCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderDisk:ClusterCloudProviderVsphereCloudProviderDisk"
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderGlobal:ClusterCloudProviderVsphereCloudProviderGlobal"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderNetwork:ClusterCloudProviderVsphereCloudProviderNetwork",
                    "description": "RKE k8s cluster network configuration (list maxitems:1)\n"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderVirtualCenter:ClusterCloudProviderVsphereCloudProviderVirtualCenter"
                    }
                },
                "workspace": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderWorkspace:ClusterCloudProviderVsphereCloudProviderWorkspace"
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderDisk:ClusterCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderGlobal:ClusterCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "datacenters": {
                    "type": "string"
                },
                "datastore": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                },
                "vmName": {
                    "type": "string"
                },
                "vmUuid": {
                    "type": "string"
                },
                "workingDir": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderNetwork:ClusterCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderVirtualCenter:ClusterCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderWorkspace:ClusterCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "defaultDatastore": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "resourcepoolPath": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "server"
            ]
        },
        "rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterDns:ClusterDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "NodeSelector key pair\n"
                },
                "nodelocal": {
                    "$ref": "#/types/rke:index/ClusterDnsNodelocal:ClusterDnsNodelocal",
                    "description": "Nodelocal dns\n"
                },
                "provider": {
                    "type": "string",
                    "description": "DNS provider\n"
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ReverseCIDRs\n"
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Upstream nameservers\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterDnsNodelocal:ClusterDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterEtcdHost:ClusterEtcdHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterInactiveHost:ClusterInactiveHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterIngress:ClusterIngress": {
            "properties": {
                "defaultBackend": {
                    "type": "boolean",
                    "description": "Ingress Default Backend\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Ingress controller dns policy\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for the ingress controller\n"
                },
                "httpPort": {
                    "type": "integer",
                    "description": "Ingress controller http port\n"
                },
                "httpsPort": {
                    "type": "integer",
                    "description": "Ingress controller https port\n"
                },
                "networkMode": {
                    "type": "string",
                    "description": "Ingress controller network mode\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Ingress controller options\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Ingress controller provider\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterMonitoring:ClusterMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Monitoring options\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Monitoring provider\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "provider"
                    ]
                }
            }
        },
        "rke:index/ClusterNetwork:ClusterNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkAciNetworkProvider:ClusterNetworkAciNetworkProvider",
                    "description": "Aci network provider config\n"
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkCalicoNetworkProvider:ClusterNetworkCalicoNetworkProvider",
                    "description": "Calico network provider config\n"
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkCanalNetworkProvider:ClusterNetworkCanalNetworkProvider",
                    "description": "Canal network provider config\n"
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkFlannelNetworkProvider:ClusterNetworkFlannelNetworkProvider",
                    "description": "Flannel network provider config\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Network provider MTU\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network provider options\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Network provider plugin\n"
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkWeaveNetworkProvider:ClusterNetworkWeaveNetworkProvider",
                    "description": "Weave network provider config\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkAciNetworkProvider:ClusterNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string"
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apicUserCrt": {
                    "type": "string",
                    "secret": true
                },
                "apicUserKey": {
                    "type": "string",
                    "secret": true
                },
                "apicUserName": {
                    "type": "string"
                },
                "encapType": {
                    "type": "string"
                },
                "externDynamic": {
                    "type": "string"
                },
                "externStatic": {
                    "type": "string"
                },
                "infraVlan": {
                    "type": "string"
                },
                "kubeApiVlan": {
                    "type": "string"
                },
                "l3out": {
                    "type": "string"
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mcastRangeEnd": {
                    "type": "string"
                },
                "mcastRangeStart": {
                    "type": "string"
                },
                "nodeSubnet": {
                    "type": "string"
                },
                "nodeSvcSubnet": {
                    "type": "string"
                },
                "serviceVlan": {
                    "type": "string"
                },
                "snatPortRangeEnd": {
                    "type": "string"
                },
                "snatPortRangeStart": {
                    "type": "string"
                },
                "snatPortsPerNode": {
                    "type": "string"
                },
                "systemId": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "vrfName": {
                    "type": "string"
                },
                "vrfTenant": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "infraVlan",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ]
        },
        "rke:index/ClusterNetworkCalicoNetworkProvider:ClusterNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkCanalNetworkProvider:ClusterNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkFlannelNetworkProvider:ClusterNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkWeaveNetworkProvider:ClusterNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rke:index/ClusterNode:ClusterNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IP or FQDN that is fully resolvable and used for SSH communication\n"
                },
                "dockerSocket": {
                    "type": "string",
                    "description": "Docker socket on the node that will be used in tunneling\n"
                },
                "hostnameOverride": {
                    "type": "string",
                    "description": "Hostname override\n"
                },
                "internalAddress": {
                    "type": "string",
                    "description": "Internal address that will be used for components communication\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node Labels\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Node roles in k8s cluster [controlplane/worker/etcd])\n"
                },
                "rolesDeprecated": {
                    "type": "string",
                    "description": "Node role in kubernetes cluster [controlplane/worker/etcd], specified by a comma-separated string\n",
                    "deprecationMessage": "Use role instead",
                    "language": {
                        "csharp": {
                            "name": "RolesDeprecated"
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCert": {
                    "type": "string",
                    "description": "SSH Certificate\n",
                    "secret": true
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate Path (string)\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH Private Key\n",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key Path (string)\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNodeTaint:ClusterNodeTaint"
                    },
                    "description": "Node taints\n"
                },
                "user": {
                    "type": "string",
                    "description": "SSH user that will be used by RKE\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "roles",
                        "sshAgentAuth",
                        "user"
                    ]
                }
            }
        },
        "rke:index/ClusterNodeTaint:ClusterNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Set as default registry\n"
                },
                "password": {
                    "type": "string",
                    "description": "Registry password\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rke:index/ClusterRestore:ClusterRestore": {
            "properties": {
                "restore": {
                    "type": "boolean",
                    "description": "RKE k8s cluster restore configuration (list maxitems:1)\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Snapshot name\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterRotateCertificates:ClusterRotateCertificates": {
            "properties": {
                "caCertificates": {
                    "type": "boolean",
                    "description": "Rotate CA Certificates\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE k8s cluster services (list maxitems:1)\n"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterRunningSystemImage:ClusterRunningSystemImage": {
            "properties": {
                "aciCniDeployContainer": {
                    "type": "string"
                },
                "aciControllerContainer": {
                    "type": "string"
                },
                "aciHostContainer": {
                    "type": "string"
                },
                "aciMcastContainer": {
                    "type": "string"
                },
                "aciOpflexContainer": {
                    "type": "string"
                },
                "aciOvsContainer": {
                    "type": "string"
                },
                "alpine": {
                    "type": "string"
                },
                "calicoCni": {
                    "type": "string"
                },
                "calicoControllers": {
                    "type": "string"
                },
                "calicoCtl": {
                    "type": "string"
                },
                "calicoFlexVol": {
                    "type": "string"
                },
                "calicoNode": {
                    "type": "string"
                },
                "canalCni": {
                    "type": "string"
                },
                "canalFlannel": {
                    "type": "string"
                },
                "canalFlexVol": {
                    "type": "string"
                },
                "canalNode": {
                    "type": "string"
                },
                "certDownloader": {
                    "type": "string"
                },
                "coredns": {
                    "type": "string"
                },
                "corednsAutoscaler": {
                    "type": "string"
                },
                "dnsmasq": {
                    "type": "string"
                },
                "etcd": {
                    "type": "string"
                },
                "flannel": {
                    "type": "string"
                },
                "flannelCni": {
                    "type": "string"
                },
                "ingress": {
                    "type": "string",
                    "description": "RKE k8s cluster ingress controller configuration (list maxitems:1)\n"
                },
                "ingressBackend": {
                    "type": "string"
                },
                "kubeDns": {
                    "type": "string"
                },
                "kubeDnsAutoscaler": {
                    "type": "string"
                },
                "kubeDnsSidecar": {
                    "type": "string"
                },
                "kubernetes": {
                    "type": "string"
                },
                "kubernetesServicesSidecar": {
                    "type": "string"
                },
                "metricsServer": {
                    "type": "string"
                },
                "nginxProxy": {
                    "type": "string"
                },
                "nodelocal": {
                    "type": "string"
                },
                "podInfraContainer": {
                    "type": "string"
                },
                "weaveCni": {
                    "type": "string"
                },
                "weaveNode": {
                    "type": "string"
                },
                "windowsPodInfraContainer": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServices:ClusterServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcd:ClusterServicesEtcd"
                },
                "kubeApi": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApi:ClusterServicesKubeApi"
                },
                "kubeController": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeController:ClusterServicesKubeController"
                },
                "kubelet": {
                    "$ref": "#/types/rke:index/ClusterServicesKubelet:ClusterServicesKubelet"
                },
                "kubeproxy": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeproxy:ClusterServicesKubeproxy"
                },
                "scheduler": {
                    "$ref": "#/types/rke:index/ClusterServicesScheduler:ClusterServicesScheduler"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcd:ClusterServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdBackupConfig:ClusterServicesEtcdBackupConfig"
                },
                "caCert": {
                    "type": "string",
                    "secret": true
                },
                "cert": {
                    "type": "string",
                    "secret": true
                },
                "creation": {
                    "type": "string"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gid": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "path": {
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "externalUrls",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "key",
                        "path",
                        "retention"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcdBackupConfig:ClusterServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdBackupConfigS3BackupConfig:ClusterServicesEtcdBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdBackupConfigS3BackupConfig:ClusterServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecatedBackupConfig:ClusterServicesEtcdDeprecatedBackupConfig"
                },
                "caCert": {
                    "type": "string",
                    "secret": true
                },
                "cert": {
                    "type": "string",
                    "secret": true
                },
                "creation": {
                    "type": "string"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gid": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "path": {
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "externalUrls",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "key",
                        "path",
                        "retention"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcdDeprecatedBackupConfig:ClusterServicesEtcdDeprecatedBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig:ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig:ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesKubeApi:ClusterServicesKubeApi": {
            "properties": {
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable/Disable AlwaysPullImages admissions plugin\n"
                },
                "auditLog": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiAuditLog:ClusterServicesKubeApiAuditLog"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiEventRateLimit:ClusterServicesKubeApiEventRateLimit"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kube-api services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string"
                },
                "podSecurityConfiguration": {
                    "type": "string",
                    "description": "Built-in PodSecurityPolicy (privileged or restricted)\n"
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "description": "Enabled/Disable PodSecurityPolicy\n"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiSecretsEncryptionConfig:ClusterServicesKubeApiSecretsEncryptionConfig"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Virtual IP range that will be used by Kubernetes services\n"
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Port range for services defined with NodePort type\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alwaysPullImages",
                        "auditLog",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "podSecurityConfiguration",
                        "podSecurityPolicy",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiAuditLog:ClusterServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiAuditLogConfiguration:ClusterServicesKubeApiAuditLogConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiAuditLogConfiguration:ClusterServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "integer"
                },
                "maxBackup": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "maxAge",
                        "maxBackup",
                        "maxSize",
                        "path",
                        "policy"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated": {
            "properties": {
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable/Disable AlwaysPullImages admissions plugin\n"
                },
                "auditLog": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedAuditLog:ClusterServicesKubeApiDeprecatedAuditLog"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedEventRateLimit:ClusterServicesKubeApiDeprecatedEventRateLimit"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kube-api services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string"
                },
                "podSecurityConfiguration": {
                    "type": "string",
                    "description": "Built-in PodSecurityPolicy (privileged or restricted)\n"
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "description": "Enabled/Disable PodSecurityPolicy\n"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig:ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Virtual IP range that will be used by Kubernetes services\n"
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Port range for services defined with NodePort type\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alwaysPullImages",
                        "auditLog",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "podSecurityConfiguration",
                        "podSecurityPolicy",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedAuditLog:ClusterServicesKubeApiDeprecatedAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedAuditLogConfiguration:ClusterServicesKubeApiDeprecatedAuditLogConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedAuditLogConfiguration:ClusterServicesKubeApiDeprecatedAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "integer"
                },
                "maxBackup": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "maxAge",
                        "maxBackup",
                        "maxSize",
                        "path",
                        "policy"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedEventRateLimit:ClusterServicesKubeApiDeprecatedEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig:ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customConfig",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiEventRateLimit:ClusterServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiSecretsEncryptionConfig:ClusterServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customConfig",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeController:ClusterServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster cidr (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kube-controller service\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kube-controller service\n"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Virtual IP range that will be used by Kubernetes services\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster cidr (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kube-controller service\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kube-controller service\n"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Virtual IP range that will be used by Kubernetes services\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kubeproxy services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the worker nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the worker nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kubeproxy service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the scheduler services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the scheduler service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubelet:ClusterServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster dns server (string)\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster domain (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kubelet services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the worker nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the nodes\n"
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Fail if swap is enabled\n"
                },
                "generateServingCertificate": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kubelet service\n"
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "The image whose network/ipc namespaces containers in each pod will use\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster dns server (string)\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster domain (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kubelet services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the worker nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the nodes\n"
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Fail if swap is enabled\n"
                },
                "generateServingCertificate": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kubelet service\n"
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "The image whose network/ipc namespaces containers in each pod will use\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeproxy:ClusterServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the kubeproxy services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the worker nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the worker nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the kubeproxy service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesScheduler:ClusterServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments that are added to the scheduler services\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds added to the controlplane nodes\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra env added to the controlplane nodes\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image of the scheduler service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterSystemImages:ClusterSystemImages": {
            "properties": {
                "aciCniDeployContainer": {
                    "type": "string"
                },
                "aciControllerContainer": {
                    "type": "string"
                },
                "aciHostContainer": {
                    "type": "string"
                },
                "aciMcastContainer": {
                    "type": "string"
                },
                "aciOpflexContainer": {
                    "type": "string"
                },
                "aciOvsContainer": {
                    "type": "string"
                },
                "alpine": {
                    "type": "string"
                },
                "calicoCni": {
                    "type": "string"
                },
                "calicoControllers": {
                    "type": "string"
                },
                "calicoCtl": {
                    "type": "string"
                },
                "calicoFlexVol": {
                    "type": "string"
                },
                "calicoNode": {
                    "type": "string"
                },
                "canalCni": {
                    "type": "string"
                },
                "canalFlannel": {
                    "type": "string"
                },
                "canalFlexVol": {
                    "type": "string"
                },
                "canalNode": {
                    "type": "string"
                },
                "certDownloader": {
                    "type": "string"
                },
                "coredns": {
                    "type": "string"
                },
                "corednsAutoscaler": {
                    "type": "string"
                },
                "dnsmasq": {
                    "type": "string"
                },
                "etcd": {
                    "type": "string"
                },
                "flannel": {
                    "type": "string"
                },
                "flannelCni": {
                    "type": "string"
                },
                "ingress": {
                    "type": "string",
                    "description": "RKE k8s cluster ingress controller configuration (list maxitems:1)\n"
                },
                "ingressBackend": {
                    "type": "string"
                },
                "kubeDns": {
                    "type": "string"
                },
                "kubeDnsAutoscaler": {
                    "type": "string"
                },
                "kubeDnsSidecar": {
                    "type": "string"
                },
                "kubernetes": {
                    "type": "string"
                },
                "kubernetesServicesSidecar": {
                    "type": "string"
                },
                "metricsServer": {
                    "type": "string"
                },
                "nginxProxy": {
                    "type": "string"
                },
                "nodelocal": {
                    "type": "string"
                },
                "podInfraContainer": {
                    "type": "string"
                },
                "weaveCni": {
                    "type": "string"
                },
                "weaveNode": {
                    "type": "string"
                },
                "windowsPodInfraContainer": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean"
                },
                "drainInput": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategyDrainInput:ClusterUpgradeStrategyDrainInput"
                },
                "maxUnavailableControlplane": {
                    "type": "string"
                },
                "maxUnavailableWorker": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drain",
                        "drainInput",
                        "maxUnavailableControlplane",
                        "maxUnavailableWorker"
                    ]
                }
            }
        },
        "rke:index/ClusterUpgradeStrategyDrainInput:ClusterUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "gracePeriod": {
                    "type": "integer"
                },
                "ignoreDaemonSets": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteLocalData",
                        "force",
                        "gracePeriod",
                        "ignoreDaemonSets",
                        "timeout"
                    ]
                }
            }
        },
        "rke:index/ClusterWorkerHost:ClusterWorkerHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the rke package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "debug": {
                "type": "boolean"
            },
            "logFile": {
                "type": "string"
            }
        },
        "inputProperties": {
            "debug": {
                "type": "boolean",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RKE_DEBUG"
                    ]
                }
            },
            "logFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RKE_LOG_FILE"
                    ]
                }
            }
        }
    },
    "resources": {
        "rke:index/cluster:Cluster": {
            "description": "\n\n## Import\n\nrke_cluster can be imported using the RKE cluster config and state files as ID in the format `\u003ccluster_config_file\u003e:\u003crke_state_file\u003e`\n\n```sh\n$ pulumi import rke:index/cluster:Cluster foo \u0026lt;cluster_config_file\u0026gt;:\u0026lt;rke_state_file\u0026gt;\n```\nAs experimental feature, dind rke_cluster can be also imported adding `dind` as 3rd import parameter `\u003ccluster_config_file\u003e:\u003crke_state_file\u003e:dind`\n\n```sh\n$ pulumi import rke:index/cluster:Cluster foo \u0026lt;cluster_config_file\u0026gt;:\u0026lt;rke_state_file\u0026gt;:dind\n```\n",
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                },
                "addons": {
                    "type": "string",
                    "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                },
                "apiServerUrl": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster api server url (string)\n"
                },
                "authentication": {
                    "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                    "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                },
                "authorization": {
                    "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                    "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                    "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                },
                "caCrt": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster CA certificate (string)\n",
                    "secret": true
                },
                "certDir": {
                    "type": "string",
                    "description": "Specify a certificate dir path (string)\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCertificate:ClusterCertificate"
                    },
                    "description": "(Computed/Sensitive) RKE k8s cluster certificates (string)\n",
                    "secret": true
                },
                "clientCert": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster client certificate (string)\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster client key (string)\n",
                    "secret": true
                },
                "cloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                    "description": "RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)\n"
                },
                "clusterCidr": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster cidr (string)\n"
                },
                "clusterDnsServer": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster dns server (string)\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster domain (string)\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "RKE k8s cluster name used in the kube config (string)\n"
                },
                "clusterYaml": {
                    "type": "string",
                    "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n",
                    "secret": true
                },
                "controlPlaneHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost"
                    },
                    "description": "(Computed) RKE k8s cluster control plane nodes (list)\n"
                },
                "customCerts": {
                    "type": "boolean",
                    "description": "Use custom certificates from a cert dir (string)\n"
                },
                "delayOnCreation": {
                    "type": "integer",
                    "description": "RKE k8s cluster delay on creation (int)\n"
                },
                "dind": {
                    "type": "boolean",
                    "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                },
                "dindDnsServer": {
                    "type": "string",
                    "description": "DinD RKE cluster dns (string)\n"
                },
                "dindStorageDriver": {
                    "type": "string",
                    "description": "DinD RKE cluster storage driver (string)\n"
                },
                "disablePortCheck": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                },
                "dns": {
                    "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                    "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)\n"
                },
                "etcdHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterEtcdHost:ClusterEtcdHost"
                    },
                    "description": "(Computed) RKE k8s cluster etcd nodes (list)\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                },
                "inactiveHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterInactiveHost:ClusterInactiveHost"
                    },
                    "description": "(Computed) RKE k8s cluster inactive nodes (list)\n"
                },
                "ingress": {
                    "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                    "description": "RKE k8s cluster ingress controller configuration (list maxitems:1)\n"
                },
                "internalKubeConfigYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)\n",
                    "deprecationMessage": "Use kube_config_yaml instead",
                    "secret": true
                },
                "kubeAdminUser": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster admin user (string)\n"
                },
                "kubeConfigYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster kube config yaml (string)\n",
                    "secret": true
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                },
                "monitoring": {
                    "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                    "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                    "description": "RKE k8s cluster network configuration (list maxitems:1)\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                    },
                    "description": "RKE k8s cluster nodes (list)\n"
                },
                "nodesConfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "Use cluster_yaml instead"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "RKE k8s directory path (string)\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                    },
                    "description": "RKE k8s cluster private docker registries (list)\n"
                },
                "restore": {
                    "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                    "description": "RKE k8s cluster restore configuration (list maxitems:1)\n"
                },
                "rkeClusterYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster config yaml (string)\n",
                    "secret": true
                },
                "rkeState": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster state (string)\n",
                    "secret": true
                },
                "rotateCertificates": {
                    "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                    "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                },
                "runningSystemImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterRunningSystemImage:ClusterRunningSystemImage"
                    },
                    "description": "(Computed) RKE k8s cluster running system images list (list)\n"
                },
                "services": {
                    "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                    "description": "RKE k8s cluster services (list maxitems:1)\n"
                },
                "servicesEtcdDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                    "description": "Use services.etcd instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.etcd instead"
                },
                "servicesKubeApiDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                    "description": "Use services.kube_api instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_api instead"
                },
                "servicesKubeControllerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                    "description": "Use services.kube_controller instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_controller instead"
                },
                "servicesKubeProxyDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                    "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubeproxy instead"
                },
                "servicesKubeSchedulerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                    "description": "Use services.scheduler instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.scheduler instead"
                },
                "servicesKubeletDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                    "description": "Use services.kubelet instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubelet instead"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate Path (string)\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key Path (string)\n"
                },
                "systemImages": {
                    "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                    "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                },
                "updateOnly": {
                    "type": "boolean",
                    "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                    "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                },
                "workerHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterWorkerHost:ClusterWorkerHost"
                    },
                    "description": "(Computed) RKE k8s cluster worker nodes (list)\n"
                }
            },
            "required": [
                "apiServerUrl",
                "caCrt",
                "certificates",
                "clientCert",
                "clientKey",
                "clusterCidr",
                "clusterDnsServer",
                "clusterDomain",
                "controlPlaneHosts",
                "etcdHosts",
                "inactiveHosts",
                "internalKubeConfigYaml",
                "kubeAdminUser",
                "kubeConfigYaml",
                "rkeClusterYaml",
                "rkeState",
                "runningSystemImages",
                "sshAgentAuth",
                "workerHosts"
            ],
            "inputProperties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                },
                "addons": {
                    "type": "string",
                    "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                },
                "authentication": {
                    "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                    "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                },
                "authorization": {
                    "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                    "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                    "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                },
                "certDir": {
                    "type": "string",
                    "description": "Specify a certificate dir path (string)\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                    "description": "RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "RKE k8s cluster name used in the kube config (string)\n"
                },
                "clusterYaml": {
                    "type": "string",
                    "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n",
                    "secret": true
                },
                "customCerts": {
                    "type": "boolean",
                    "description": "Use custom certificates from a cert dir (string)\n"
                },
                "delayOnCreation": {
                    "type": "integer",
                    "description": "RKE k8s cluster delay on creation (int)\n"
                },
                "dind": {
                    "type": "boolean",
                    "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                },
                "dindDnsServer": {
                    "type": "string",
                    "description": "DinD RKE cluster dns (string)\n"
                },
                "dindStorageDriver": {
                    "type": "string",
                    "description": "DinD RKE cluster storage driver (string)\n"
                },
                "disablePortCheck": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                },
                "dns": {
                    "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                    "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                },
                "ingress": {
                    "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                    "description": "RKE k8s cluster ingress controller configuration (list maxitems:1)\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                },
                "monitoring": {
                    "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                    "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                    "description": "RKE k8s cluster network configuration (list maxitems:1)\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                    },
                    "description": "RKE k8s cluster nodes (list)\n"
                },
                "nodesConfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "Use cluster_yaml instead"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "RKE k8s directory path (string)\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                    },
                    "description": "RKE k8s cluster private docker registries (list)\n"
                },
                "restore": {
                    "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                    "description": "RKE k8s cluster restore configuration (list maxitems:1)\n"
                },
                "rotateCertificates": {
                    "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                    "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                },
                "services": {
                    "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                    "description": "RKE k8s cluster services (list maxitems:1)\n"
                },
                "servicesEtcdDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                    "description": "Use services.etcd instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.etcd instead"
                },
                "servicesKubeApiDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                    "description": "Use services.kube_api instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_api instead"
                },
                "servicesKubeControllerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                    "description": "Use services.kube_controller instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_controller instead"
                },
                "servicesKubeProxyDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                    "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubeproxy instead"
                },
                "servicesKubeSchedulerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                    "description": "Use services.scheduler instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.scheduler instead"
                },
                "servicesKubeletDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                    "description": "Use services.kubelet instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubelet instead"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate Path (string)\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key Path (string)\n"
                },
                "systemImages": {
                    "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                    "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                },
                "updateOnly": {
                    "type": "boolean",
                    "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                    "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "addonJobTimeout": {
                        "type": "integer",
                        "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                    },
                    "addons": {
                        "type": "string",
                        "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                    },
                    "addonsIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                    },
                    "apiServerUrl": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster api server url (string)\n"
                    },
                    "authentication": {
                        "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                        "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                    },
                    "authorization": {
                        "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                        "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                    },
                    "bastionHost": {
                        "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                        "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                    },
                    "caCrt": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster CA certificate (string)\n",
                        "secret": true
                    },
                    "certDir": {
                        "type": "string",
                        "description": "Specify a certificate dir path (string)\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterCertificate:ClusterCertificate"
                        },
                        "description": "(Computed/Sensitive) RKE k8s cluster certificates (string)\n",
                        "secret": true
                    },
                    "clientCert": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster client certificate (string)\n",
                        "secret": true
                    },
                    "clientKey": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster client key (string)\n",
                        "secret": true
                    },
                    "cloudProvider": {
                        "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                        "description": "RKE k8s cluster cloud provider configuration [rke-cloud-providers](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/) (list maxitems:1)\n"
                    },
                    "clusterCidr": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster cidr (string)\n"
                    },
                    "clusterDnsServer": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster dns server (string)\n"
                    },
                    "clusterDomain": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster domain (string)\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "RKE k8s cluster name used in the kube config (string)\n"
                    },
                    "clusterYaml": {
                        "type": "string",
                        "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n",
                        "secret": true
                    },
                    "controlPlaneHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost"
                        },
                        "description": "(Computed) RKE k8s cluster control plane nodes (list)\n"
                    },
                    "customCerts": {
                        "type": "boolean",
                        "description": "Use custom certificates from a cert dir (string)\n"
                    },
                    "delayOnCreation": {
                        "type": "integer",
                        "description": "RKE k8s cluster delay on creation (int)\n"
                    },
                    "dind": {
                        "type": "boolean",
                        "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                    },
                    "dindDnsServer": {
                        "type": "string",
                        "description": "DinD RKE cluster dns (string)\n"
                    },
                    "dindStorageDriver": {
                        "type": "string",
                        "description": "DinD RKE cluster storage driver (string)\n"
                    },
                    "disablePortCheck": {
                        "type": "boolean",
                        "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                    },
                    "dns": {
                        "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                        "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                    },
                    "enableCriDockerd": {
                        "type": "boolean",
                        "description": "Enable/Disable CRI dockerd for kubelet; set it to true starting from Kubernetes version 1.24 or later. Default `false` (bool)\n"
                    },
                    "etcdHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterEtcdHost:ClusterEtcdHost"
                        },
                        "description": "(Computed) RKE k8s cluster etcd nodes (list)\n"
                    },
                    "ignoreDockerVersion": {
                        "type": "boolean",
                        "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                    },
                    "inactiveHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterInactiveHost:ClusterInactiveHost"
                        },
                        "description": "(Computed) RKE k8s cluster inactive nodes (list)\n"
                    },
                    "ingress": {
                        "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                        "description": "RKE k8s cluster ingress controller configuration (list maxitems:1)\n"
                    },
                    "internalKubeConfigYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)\n",
                        "deprecationMessage": "Use kube_config_yaml instead",
                        "secret": true
                    },
                    "kubeAdminUser": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster admin user (string)\n"
                    },
                    "kubeConfigYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster kube config yaml (string)\n",
                        "secret": true
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                    },
                    "monitoring": {
                        "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                        "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                    },
                    "network": {
                        "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                        "description": "RKE k8s cluster network configuration (list maxitems:1)\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                        },
                        "description": "RKE k8s cluster nodes (list)\n"
                    },
                    "nodesConfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use cluster_yaml instead"
                    },
                    "prefixPath": {
                        "type": "string",
                        "description": "RKE k8s directory path (string)\n"
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                        },
                        "description": "RKE k8s cluster private docker registries (list)\n"
                    },
                    "restore": {
                        "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                        "description": "RKE k8s cluster restore configuration (list maxitems:1)\n"
                    },
                    "rkeClusterYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster config yaml (string)\n",
                        "secret": true
                    },
                    "rkeState": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster state (string)\n",
                        "secret": true
                    },
                    "rotateCertificates": {
                        "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                        "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                    },
                    "runningSystemImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterRunningSystemImage:ClusterRunningSystemImage"
                        },
                        "description": "(Computed) RKE k8s cluster running system images list (list)\n"
                    },
                    "services": {
                        "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                        "description": "RKE k8s cluster services (list maxitems:1)\n"
                    },
                    "servicesEtcdDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                        "description": "Use services.etcd instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.etcd instead"
                    },
                    "servicesKubeApiDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                        "description": "Use services.kube_api instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kube_api instead"
                    },
                    "servicesKubeControllerDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                        "description": "Use services.kube_controller instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kube_controller instead"
                    },
                    "servicesKubeProxyDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                        "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kubeproxy instead"
                    },
                    "servicesKubeSchedulerDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                        "description": "Use services.scheduler instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.scheduler instead"
                    },
                    "servicesKubeletDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                        "description": "Use services.kubelet instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kubelet instead"
                    },
                    "sshAgentAuth": {
                        "type": "boolean",
                        "description": "SSH Agent Auth enable (bool)\n"
                    },
                    "sshCertPath": {
                        "type": "string",
                        "description": "SSH Certificate Path (string)\n"
                    },
                    "sshKeyPath": {
                        "type": "string",
                        "description": "SSH Private Key Path (string)\n"
                    },
                    "systemImages": {
                        "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                        "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                    },
                    "updateOnly": {
                        "type": "boolean",
                        "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                    },
                    "upgradeStrategy": {
                        "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                        "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                    },
                    "workerHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterWorkerHost:ClusterWorkerHost"
                        },
                        "description": "(Computed) RKE k8s cluster worker nodes (list)\n"
                    }
                },
                "type": "object"
            }
        }
    }
}