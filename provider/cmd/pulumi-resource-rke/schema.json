{
    "name": "rke",
    "description": "A Pulumi package for creating and managing rke cloud resources.",
    "keywords": [
        "pulumi",
        "rke"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rke` Terraform Provider](https://github.com/rancher/terraform-provider-rke).",
    "repository": "https://github.com/pulumi/pulumi-rke",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "debug": {
                "type": "boolean",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RKE_DEBUG"
                    ]
                }
            },
            "logFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RKE_LOG_FILE"
                    ]
                }
            }
        }
    },
    "types": {
        "rke:index/ClusterAuthentication:ClusterAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional hostnames and IPs to include in the api server PKI cert (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Authentication strategy that will be used in RKE k8s cluster. Default: `x509` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webhook": {
                    "$ref": "#/types/rke:index/ClusterAuthenticationWebhook:ClusterAuthenticationWebhook",
                    "description": "Webhook configuration options (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "webhook"
                    ]
                }
            }
        },
        "rke:index/ClusterAuthenticationWebhook:ClusterAuthenticationWebhook": {
            "properties": {
                "cacheTimeout": {
                    "type": "string",
                    "description": "Controls how long to cache authentication decisions (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "Multiline string that represent a custom webhook config file (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterAuthorization:ClusterAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network provider options (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterBastionHost:ClusterBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCert": {
                    "type": "string",
                    "description": "SSH Certificate (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH Private Key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshAgentAuth",
                        "sshCertPath",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rke:index/ClusterCertificate:ClusterCertificate": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "config": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configEnvName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyEnvName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of virtualcenter config for Vsphere Cloud Provider config (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ouName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificate",
                        "commonName",
                        "config",
                        "configEnvName",
                        "configPath",
                        "envName",
                        "id",
                        "key",
                        "keyEnvName",
                        "keyPath",
                        "name",
                        "ouName",
                        "path"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProvider:ClusterCloudProvider": {
            "properties": {
                "awsCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfig:ClusterCloudProviderAwsCloudConfig",
                    "description": "Use aws_cloud_provider instead\n",
                    "deprecationMessage": "Use aws_cloud_provider instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProvider:ClusterCloudProviderAwsCloudProvider",
                    "description": "AWS Cloud Provider config [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAzureCloudConfig:ClusterCloudProviderAzureCloudConfig",
                    "description": "Use azure_cloud_provider instead\n",
                    "deprecationMessage": "Use azure_cloud_provider instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAzureCloudProvider:ClusterCloudProviderAzureCloudProvider",
                    "description": "Azure Cloud Provider config [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudConfig": {
                    "type": "string",
                    "description": "Use custom_cloud_provider instead\n",
                    "deprecationMessage": "Use custom_cloud_provider instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudProvider": {
                    "type": "string",
                    "description": "Custom Cloud Provider config (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of virtualcenter config for Vsphere Cloud Provider config (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfig:ClusterCloudProviderOpenstackCloudConfig",
                    "description": "Use openstack_cloud_provider instead\n",
                    "deprecationMessage": "Use openstack_cloud_provider instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProvider:ClusterCloudProviderOpenstackCloudProvider",
                    "description": "Openstack Cloud Provider config [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudConfig": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfig:ClusterCloudProviderVsphereCloudConfig",
                    "description": "Use vsphere_cloud_provider instead\n",
                    "deprecationMessage": "Use vsphere_cloud_provider instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProvider:ClusterCloudProviderVsphereCloudProvider",
                    "description": "Vsphere Cloud Provider config [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rke:index/ClusterCloudProviderAwsCloudConfig:ClusterCloudProviderAwsCloudConfig": {
            "properties": {
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfigGlobal:ClusterCloudProviderAwsCloudConfigGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudConfigServiceOverride:ClusterCloudProviderAwsCloudConfigServiceOverride"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudConfigGlobal:ClusterCloudProviderAwsCloudConfigGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Disables the automatic ingress creation. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Setting this to true will disable the check and provide a warning that the check was skipped. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "Use these ELB security groups instead create new (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "The cluster id we'll use to identify our cluster resources (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "Legacy cluster id we'll use to identify our cluster resources (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "IAM role to assume when interaction with AWS APIs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Enables using a specific RouteTable (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The AWS zone (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudConfigServiceOverride:ClusterCloudProviderAwsCloudConfigServiceOverride": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "deprecationMessage": "Use service instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "service",
                        "signingMethod"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAwsCloudProvider:ClusterCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProviderGlobal:ClusterCloudProviderAwsCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderAwsCloudProviderServiceOverride:ClusterCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudProviderGlobal:ClusterCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Disables the automatic ingress creation. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Setting this to true will disable the check and provide a warning that the check was skipped. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "Use these ELB security groups instead create new (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "The cluster id we'll use to identify our cluster resources (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "Legacy cluster id we'll use to identify our cluster resources (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "IAM role to assume when interaction with AWS APIs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Enables using a specific RouteTable (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC flag enables the possibility to run the master components on a different aws account, on a different cloud provider or on-premises. If the flag is set also the KubernetesClusterTag must be provided (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The AWS zone (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderAwsCloudProviderServiceOverride:ClusterCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "deprecationMessage": "Use service instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "service",
                        "signingMethod"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAzureCloudConfig:ClusterCloudProviderAzureCloudConfig": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if `tenant_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientId",
                        "aadClientSecret",
                        "cloudProviderRateLimitBucket",
                        "subscriptionId",
                        "tenantId"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderAzureCloudProvider:ClusterCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if `tenant_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientId",
                        "aadClientSecret",
                        "cloudProviderRateLimitBucket",
                        "subscriptionId",
                        "tenantId"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfig:ClusterCloudProviderOpenstackCloudConfig": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigBlockStorage:ClusterCloudProviderOpenstackCloudConfigBlockStorage",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigGlobal:ClusterCloudProviderOpenstackCloudConfigGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigLoadBalancer:ClusterCloudProviderOpenstackCloudConfigLoadBalancer",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigMetadata:ClusterCloudProviderOpenstackCloudConfigMetadata",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudConfigRoute:ClusterCloudProviderOpenstackCloudConfigRoute",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigBlockStorage:ClusterCloudProviderOpenstackCloudConfigBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigGlobal:ClusterCloudProviderOpenstackCloudConfigGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "Required if `domain_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "Required if `domain_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if `tenant_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "description": "Required if `tenant_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "description": "Required if `username` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Required if `user_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password"
            ]
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigLoadBalancer:ClusterCloudProviderOpenstackCloudConfigLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigMetadata:ClusterCloudProviderOpenstackCloudConfigMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudConfigRoute:ClusterCloudProviderOpenstackCloudConfigRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProvider:ClusterCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderBlockStorage:ClusterCloudProviderOpenstackCloudProviderBlockStorage",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderGlobal:ClusterCloudProviderOpenstackCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderLoadBalancer:ClusterCloudProviderOpenstackCloudProviderLoadBalancer",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderMetadata:ClusterCloudProviderOpenstackCloudProviderMetadata",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderOpenstackCloudProviderRoute:ClusterCloudProviderOpenstackCloudProviderRoute",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderBlockStorage:ClusterCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderGlobal:ClusterCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "Required if `domain_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "Required if `domain_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if `tenant_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "description": "Required if `tenant_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "description": "Required if `username` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Required if `user_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password"
            ]
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderLoadBalancer:ClusterCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderMetadata:ClusterCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderOpenstackCloudProviderRoute:ClusterCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfig:ClusterCloudProviderVsphereCloudConfig": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigDisk:ClusterCloudProviderVsphereCloudConfigDisk",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigGlobal:ClusterCloudProviderVsphereCloudConfigGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigNetwork:ClusterCloudProviderVsphereCloudConfigNetwork",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigVirtualCenter:ClusterCloudProviderVsphereCloudConfigVirtualCenter"
                    },
                    "description": "(List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudConfigWorkspace:ClusterCloudProviderVsphereCloudConfigWorkspace",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigDisk:ClusterCloudProviderVsphereCloudConfigDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigGlobal:ClusterCloudProviderVsphereCloudConfigGlobal": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datastore": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmUuid": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workingDir": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigNetwork:ClusterCloudProviderVsphereCloudConfigNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigVirtualCenter:ClusterCloudProviderVsphereCloudConfigVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of virtualcenter config for Vsphere Cloud Provider config (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudConfigWorkspace:ClusterCloudProviderVsphereCloudConfigWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "server"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudProvider:ClusterCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderDisk:ClusterCloudProviderVsphereCloudProviderDisk",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderGlobal:ClusterCloudProviderVsphereCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderNetwork:ClusterCloudProviderVsphereCloudProviderNetwork",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderVirtualCenter:ClusterCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "description": "(List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rke:index/ClusterCloudProviderVsphereCloudProviderWorkspace:ClusterCloudProviderVsphereCloudProviderWorkspace",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderDisk:ClusterCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderGlobal:ClusterCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datastore": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmUuid": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workingDir": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters"
                    ]
                }
            }
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderNetwork:ClusterCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderVirtualCenter:ClusterCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of virtualcenter config for Vsphere Cloud Provider config (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ]
        },
        "rke:index/ClusterCloudProviderVsphereCloudProviderWorkspace:ClusterCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "server"
            ]
        },
        "rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterDns:ClusterDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rke:index/ClusterDnsNodelocal:ClusterDnsNodelocal",
                    "description": "Docker image for nodelocal (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Reverse CIDRs  (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Upstream nameservers  (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterDnsNodelocal:ClusterDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "Nodelocal dns ip address (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterEtcdHost:ClusterEtcdHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterInactiveHost:ClusterInactiveHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        },
        "rke:index/ClusterIngress:ClusterIngress": {
            "properties": {
                "dnsPolicy": {
                    "type": "string",
                    "description": "Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network provider options (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterMonitoring:ClusterMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node selector key pair (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network provider options (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "provider"
                    ]
                }
            }
        },
        "rke:index/ClusterNetwork:ClusterNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkAciNetworkProvider:ClusterNetworkAciNetworkProvider",
                    "description": "Aci network provider config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkCalicoNetworkProvider:ClusterNetworkCalicoNetworkProvider",
                    "description": "Calico network provider config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkCanalNetworkProvider:ClusterNetworkCanalNetworkProvider",
                    "description": "Canal network provider config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkFlannelNetworkProvider:ClusterNetworkFlannelNetworkProvider",
                    "description": "Flannel network provider config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "description": "Network provider MTU. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network provider options (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "type": "string",
                    "description": "Network provider plugin. `calico`, `canal` (default), `flannel`, `none` and `weave` are supported. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rke:index/ClusterNetworkWeaveNetworkProvider:ClusterNetworkWeaveNetworkProvider",
                    "description": "Weave network provider config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkAciNetworkProvider:ClusterNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string",
                    "description": "Attachment entity profile name on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ip address for apic hosts (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apicUserCrt": {
                    "type": "string",
                    "description": "Base64 encoded certificate for aci apic user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apicUserKey": {
                    "type": "string",
                    "description": "Base64 encoded private key for aci apic user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apicUserName": {
                    "type": "string",
                    "description": "User name for aci apic (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapType": {
                    "type": "string",
                    "description": "One of the supported encap types for aci(vlan/vxlan) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externDynamic": {
                    "type": "string",
                    "description": "Subnet to use for dynamic external IPs on aci (string)\n* `extern_static\"` - (Required) Subnet to use for static external IPs on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externStatic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraVlan": {
                    "type": "string",
                    "description": "Vlan for infra network on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApiVlan": {
                    "type": "string",
                    "description": "Vlan for node network on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "l3out": {
                    "type": "string",
                    "description": "L3Out on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "L3out external networks on aci (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mcastRangeEnd": {
                    "type": "string",
                    "description": "Mcast range end address for endpoint groups on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mcastRangeStart": {
                    "type": "string",
                    "description": "Mcast range start address for endpoint groups on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSubnet": {
                    "type": "string",
                    "description": "Kubernetes node address subnet (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSvcSubnet": {
                    "type": "string",
                    "description": "Subnet to use for service graph endpoints on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceVlan": {
                    "type": "string",
                    "description": "Vlan for service graph nodes on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPortRangeEnd": {
                    "type": "string",
                    "description": "Port end range for Source Network Address Translation on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPortRangeStart": {
                    "type": "string",
                    "description": "Port start range for Source Network Address Translation on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPortsPerNode": {
                    "type": "string",
                    "description": "Ports per node for Source Network Address Translation on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemId": {
                    "type": "string",
                    "description": "Unique suffix for all cluster related objects in aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "UUID for this version of the input configuration (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrfName": {
                    "type": "string",
                    "description": "VRF Name on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrfTenant": {
                    "type": "string",
                    "description": "Tenant for VRF on aci (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "infraVlan",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ]
        },
        "rke:index/ClusterNetworkCalicoNetworkProvider:ClusterNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Calico cloud provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkCanalNetworkProvider:ClusterNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Flannel network interface (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkFlannelNetworkProvider:ClusterNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Flannel network interface (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rke:index/ClusterNetworkWeaveNetworkProvider:ClusterNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rke:index/ClusterNode:ClusterNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerSocket": {
                    "type": "string",
                    "description": "Docker socket on the node that will be used in tunneling (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameOverride": {
                    "type": "string",
                    "description": "Hostname override for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddress": {
                    "type": "string",
                    "description": "Internal address that will be used for components communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node labels (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port used for SSH communication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Node roles in k8s cluster. `controlplane`, `etcd` and `worker` are supported. (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rolesDeprecated": {
                    "type": "string",
                    "deprecationMessage": "Use role instead",
                    "language": {
                        "csharp": {
                            "name": "RolesDeprecated"
                        },
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCert": {
                    "type": "string",
                    "description": "SSH Certificate (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH Private Key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNodeTaint:ClusterNodeTaint"
                    },
                    "description": "Node taints (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "roles",
                        "sshAgentAuth",
                        "user"
                    ]
                }
            }
        },
        "rke:index/ClusterNodeTaint:ClusterNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Taint effect. `NoExecute`, `NoSchedule` (default) and `PreferNoSchedule` are supported (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Taint value (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Set as default registry. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rke:index/ClusterRestore:ClusterRestore": {
            "properties": {
                "restore": {
                    "type": "boolean",
                    "description": "Restore cluster. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Snapshot name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterRotateCertificates:ClusterRotateCertificates": {
            "properties": {
                "caCertificates": {
                    "type": "boolean",
                    "description": "Rotate CA Certificates. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterRunningSystemImages:ClusterRunningSystemImages": {
            "properties": {
                "aciCniDeployContainer": {
                    "type": "string",
                    "description": "Docker image for aci_cni_deploy_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciControllerContainer": {
                    "type": "string",
                    "description": "Docker image for aci_controller_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciHostContainer": {
                    "type": "string",
                    "description": "Docker image for aci_host_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciMcastContainer": {
                    "type": "string",
                    "description": "Docker image for aci_mcast_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciOpflexContainer": {
                    "type": "string",
                    "description": "Docker image for aci_opflex_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciOvsContainer": {
                    "type": "string",
                    "description": "Docker image for aci_ovs_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alpine": {
                    "type": "string",
                    "description": "Docker image for alpine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoCni": {
                    "type": "string",
                    "description": "Docker image for calico_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoControllers": {
                    "type": "string",
                    "description": "Docker image for calico_controllers (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoCtl": {
                    "type": "string",
                    "description": "Docker image for calico_ctl (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoFlexVol": {
                    "type": "string",
                    "description": "Docker image for calico_flex_vol (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoNode": {
                    "type": "string",
                    "description": "Docker image for calico_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalCni": {
                    "type": "string",
                    "description": "Docker image for canal_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalFlannel": {
                    "type": "string",
                    "description": "Docker image for canal_flannel (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalFlexVol": {
                    "type": "string",
                    "description": "Docker image for canal_flex_vol (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNode": {
                    "type": "string",
                    "description": "Docker image for canal_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certDownloader": {
                    "type": "string",
                    "description": "Docker image for cert_downloader (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "coredns": {
                    "type": "string",
                    "description": "Docker image for coredns (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "corednsAutoscaler": {
                    "type": "string",
                    "description": "Docker image for coredns_autoscaler (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsmasq": {
                    "type": "string",
                    "description": "Docker image for dnsmasq (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "etcd": {
                    "type": "string",
                    "description": "Docker image for etcd (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannel": {
                    "type": "string",
                    "description": "Docker image for flannel (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelCni": {
                    "type": "string",
                    "description": "Docker image for flannel_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "type": "string",
                    "description": "Docker image for ingress (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingressBackend": {
                    "type": "string",
                    "description": "Docker image for ingress_backend (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDns": {
                    "type": "string",
                    "description": "Docker image for kube_dns (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDnsAutoscaler": {
                    "type": "string",
                    "description": "Docker image for kube_dns_autoscaler (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDnsSidecar": {
                    "type": "string",
                    "description": "Docker image for kube_dns_sidecar (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "string",
                    "description": "Docker image for kubernetes (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesServicesSidecar": {
                    "type": "string",
                    "description": "Docker image for kubernetes_services_sidecar (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsServer": {
                    "type": "string",
                    "description": "Docker image for metrics_server (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nginxProxy": {
                    "type": "string",
                    "description": "Docker image for nginx_proxy (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "type": "string",
                    "description": "Docker image for nodelocal (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podInfraContainer": {
                    "type": "string",
                    "description": "Docker image for pod_infra_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveCni": {
                    "type": "string",
                    "description": "Docker image for weave_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNode": {
                    "type": "string",
                    "description": "Docker image for weave_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsPodInfraContainer": {
                    "type": "string",
                    "description": "Docker image for windows_pod_infra_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServices:ClusterServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcd:ClusterServicesEtcd",
                    "description": "Docker image for etcd (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApi": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApi:ClusterServicesKubeApi",
                    "description": "Kube API options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeController": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeController:ClusterServicesKubeController",
                    "description": "Kube Controller options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubelet": {
                    "$ref": "#/types/rke:index/ClusterServicesKubelet:ClusterServicesKubelet",
                    "description": "Kubelet options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeproxy": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeproxy:ClusterServicesKubeproxy",
                    "description": "Kubeproxy options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduler": {
                    "$ref": "#/types/rke:index/ClusterServicesScheduler:ClusterServicesScheduler",
                    "description": "Scheduler options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcd:ClusterServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdBackupConfig:ClusterServicesEtcdBackupConfig",
                    "description": "Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "description": "TLS CA certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "description": "TLS certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "description": "Creation option for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External urls for etcd service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "description": "Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Snapshot option for etcd service. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "description": "Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "externalUrls",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "key",
                        "path",
                        "retention"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcdBackupConfig:ClusterServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default `12` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdBackupConfigS3BackupConfig:ClusterServicesEtcdBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "description": "Safe timestamp for etcd backup. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdBackupConfigS3BackupConfig:ClusterServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecatedBackupConfig:ClusterServicesEtcdDeprecatedBackupConfig",
                    "description": "Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "description": "TLS CA certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "description": "TLS certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "description": "Creation option for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External urls for etcd service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "description": "Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Snapshot option for etcd service. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "description": "Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "externalUrls",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "key",
                        "path",
                        "retention"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesEtcdDeprecatedBackupConfig:ClusterServicesEtcdDeprecatedBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default `12` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig:ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "description": "Safe timestamp for etcd backup. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig:ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterServicesKubeApi:ClusterServicesKubeApi": {
            "properties": {
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiAuditLog:ClusterServicesKubeApiAuditLog",
                    "description": "K8s audit log configuration. (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiEventRateLimit:ClusterServicesKubeApiEventRateLimit",
                    "description": "K8s event rate limit configuration. (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "description": "Pod Security Policy option for kube API service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiSecretsEncryptionConfig:ClusterServicesKubeApiSecretsEncryptionConfig",
                    "description": "[Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Service Node Port Range option for kube API service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alwaysPullImages",
                        "auditLog",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "podSecurityPolicy",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiAuditLog:ClusterServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiAuditLogConfiguration:ClusterServicesKubeApiAuditLogConfiguration",
                    "description": "Event rate limit yaml encoded configuration. `\"apiVersion\"` and `\"kind\":\"Configuration\"` fields are required in the yaml. Ex. `apiVersion: eventratelimit.admission.k8s.io/v1alpha1\\nkind: Configuration\\nlimits:\\n- type: Server\\n  burst: 30000\\n  qps: 6000\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiAuditLogConfiguration:ClusterServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Audit log format (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "description": "Audit log max age (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "description": "Audit log max backup. Default: `10` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "Audit log max size. Default: `100` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Audit policy json encoded definition. `\"apiVersion\"` and `\"kind\":\"Policy\",\"rules\"` fields are required in the json. Ex. `jsonencode({\"apiVersion\":\"audit.k8s.io/v1\",\"kind\":\"Policy\",\"rules\":[{\"level\":\"RequestResponse\",\"resources\":[{\"group\":\"\",\"resources\":[\"pods\"]}]}]})` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "maxAge",
                        "maxBackup",
                        "maxSize",
                        "path",
                        "policy"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated": {
            "properties": {
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedAuditLog:ClusterServicesKubeApiDeprecatedAuditLog",
                    "description": "K8s audit log configuration. (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedEventRateLimit:ClusterServicesKubeApiDeprecatedEventRateLimit",
                    "description": "K8s event rate limit configuration. (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "description": "Pod Security Policy option for kube API service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig:ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig",
                    "description": "[Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Service Node Port Range option for kube API service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alwaysPullImages",
                        "auditLog",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "podSecurityPolicy",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedAuditLog:ClusterServicesKubeApiDeprecatedAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecatedAuditLogConfiguration:ClusterServicesKubeApiDeprecatedAuditLogConfiguration",
                    "description": "Event rate limit yaml encoded configuration. `\"apiVersion\"` and `\"kind\":\"Configuration\"` fields are required in the yaml. Ex. `apiVersion: eventratelimit.admission.k8s.io/v1alpha1\\nkind: Configuration\\nlimits:\\n- type: Server\\n  burst: 30000\\n  qps: 6000\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedAuditLogConfiguration:ClusterServicesKubeApiDeprecatedAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Audit log format (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "description": "Audit log max age (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "description": "Audit log max backup. Default: `10` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "Audit log max size. Default: `100` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Audit policy json encoded definition. `\"apiVersion\"` and `\"kind\":\"Policy\",\"rules\"` fields are required in the json. Ex. `jsonencode({\"apiVersion\":\"audit.k8s.io/v1\",\"kind\":\"Policy\",\"rules\":[{\"level\":\"RequestResponse\",\"resources\":[{\"group\":\"\",\"resources\":[\"pods\"]}]}]})` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "maxAge",
                        "maxBackup",
                        "maxSize",
                        "path",
                        "policy"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedEventRateLimit:ClusterServicesKubeApiDeprecatedEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Event rate limit yaml encoded configuration. `\"apiVersion\"` and `\"kind\":\"Configuration\"` fields are required in the yaml. Ex. `apiVersion: eventratelimit.admission.k8s.io/v1alpha1\\nkind: Configuration\\nlimits:\\n- type: Server\\n  burst: 30000\\n  qps: 6000\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig:ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string",
                    "description": "Secrets encryption yaml encoded custom configuration. `\"apiVersion\"` and `\"kind\":\"EncryptionConfiguration\"` fields are required in the yaml. Ex. `apiVersion: apiserver.config.k8s.io/v1\\nkind: EncryptionConfiguration\\nresources:\\n- resources:\\n  - secrets\\n  providers:\\n  - aescbc:\\n      keys:\\n      - name: k-fw5hn\\n        secret: RTczRjFDODMwQzAyMDVBREU4NDJBMUZFNDhCNzM5N0I=\\n    identity: {}\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customConfig",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiEventRateLimit:ClusterServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Event rate limit yaml encoded configuration. `\"apiVersion\"` and `\"kind\":\"Configuration\"` fields are required in the yaml. Ex. `apiVersion: eventratelimit.admission.k8s.io/v1alpha1\\nkind: Configuration\\nlimits:\\n- type: Server\\n  burst: 30000\\n  qps: 6000\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeApiSecretsEncryptionConfig:ClusterServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string",
                    "description": "Secrets encryption yaml encoded custom configuration. `\"apiVersion\"` and `\"kind\":\"EncryptionConfiguration\"` fields are required in the yaml. Ex. `apiVersion: apiserver.config.k8s.io/v1\\nkind: EncryptionConfiguration\\nresources:\\n- resources:\\n  - secrets\\n  providers:\\n  - aescbc:\\n      keys:\\n      - name: k-fw5hn\\n        secret: RTczRjFDODMwQzAyMDVBREU4NDJBMUZFNDhCNzM5N0I=\\n    identity: {}\\n` [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable secrets encryption (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customConfig",
                        "enabled"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeController:ClusterServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "Cluster CIDR option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "Cluster CIDR option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubelet:ClusterServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "Cluster DNS Server option for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "Cluster Domain option for kubelet service. Default `cluster.local` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Enable or disable failing when swap on is not supported (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "description": "[Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "Infra container image for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "Cluster DNS Server option for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "Cluster Domain option for kubelet service. Default `cluster.local` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Enable or disable failing when swap on is not supported (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "description": "[Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "Infra container image for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesKubeproxy:ClusterServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterServicesScheduler:ClusterServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "extraBinds",
                        "extraEnvs",
                        "image"
                    ]
                }
            }
        },
        "rke:index/ClusterSystemImages:ClusterSystemImages": {
            "properties": {
                "aciCniDeployContainer": {
                    "type": "string",
                    "description": "Docker image for aci_cni_deploy_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciControllerContainer": {
                    "type": "string",
                    "description": "Docker image for aci_controller_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciHostContainer": {
                    "type": "string",
                    "description": "Docker image for aci_host_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciMcastContainer": {
                    "type": "string",
                    "description": "Docker image for aci_mcast_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciOpflexContainer": {
                    "type": "string",
                    "description": "Docker image for aci_opflex_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aciOvsContainer": {
                    "type": "string",
                    "description": "Docker image for aci_ovs_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alpine": {
                    "type": "string",
                    "description": "Docker image for alpine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoCni": {
                    "type": "string",
                    "description": "Docker image for calico_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoControllers": {
                    "type": "string",
                    "description": "Docker image for calico_controllers (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoCtl": {
                    "type": "string",
                    "description": "Docker image for calico_ctl (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoFlexVol": {
                    "type": "string",
                    "description": "Docker image for calico_flex_vol (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "calicoNode": {
                    "type": "string",
                    "description": "Docker image for calico_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalCni": {
                    "type": "string",
                    "description": "Docker image for canal_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalFlannel": {
                    "type": "string",
                    "description": "Docker image for canal_flannel (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalFlexVol": {
                    "type": "string",
                    "description": "Docker image for canal_flex_vol (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNode": {
                    "type": "string",
                    "description": "Docker image for canal_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certDownloader": {
                    "type": "string",
                    "description": "Docker image for cert_downloader (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "coredns": {
                    "type": "string",
                    "description": "Docker image for coredns (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "corednsAutoscaler": {
                    "type": "string",
                    "description": "Docker image for coredns_autoscaler (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsmasq": {
                    "type": "string",
                    "description": "Docker image for dnsmasq (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "etcd": {
                    "type": "string",
                    "description": "Docker image for etcd (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannel": {
                    "type": "string",
                    "description": "Docker image for flannel (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelCni": {
                    "type": "string",
                    "description": "Docker image for flannel_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "type": "string",
                    "description": "Docker image for ingress (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingressBackend": {
                    "type": "string",
                    "description": "Docker image for ingress_backend (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDns": {
                    "type": "string",
                    "description": "Docker image for kube_dns (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDnsAutoscaler": {
                    "type": "string",
                    "description": "Docker image for kube_dns_autoscaler (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeDnsSidecar": {
                    "type": "string",
                    "description": "Docker image for kube_dns_sidecar (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "string",
                    "description": "Docker image for kubernetes (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesServicesSidecar": {
                    "type": "string",
                    "description": "Docker image for kubernetes_services_sidecar (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsServer": {
                    "type": "string",
                    "description": "Docker image for metrics_server (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nginxProxy": {
                    "type": "string",
                    "description": "Docker image for nginx_proxy (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "type": "string",
                    "description": "Docker image for nodelocal (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podInfraContainer": {
                    "type": "string",
                    "description": "Docker image for pod_infra_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveCni": {
                    "type": "string",
                    "description": "Docker image for weave_cni (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNode": {
                    "type": "string",
                    "description": "Docker image for weave_node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsPodInfraContainer": {
                    "type": "string",
                    "description": "Docker image for windows_pod_infra_container (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "description": "RKE drain nodes (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainInput": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategyDrainInput:ClusterUpgradeStrategyDrainInput",
                    "description": "RKE drain node input (list Maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "description": "RKE max unavailable controlplane nodes (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "description": "RKE max unavailable worker nodes (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drain",
                        "drainInput",
                        "maxUnavailableControlplane",
                        "maxUnavailableWorker"
                    ]
                }
            }
        },
        "rke:index/ClusterUpgradeStrategyDrainInput:ClusterUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "description": "Delete RKE node local data (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "description": "Force RKE node drain (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "RKE node drain grace period (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Ignore RKE daemon sets (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteLocalData",
                        "force",
                        "gracePeriod",
                        "ignoreDaemonSets",
                        "timeout"
                    ]
                }
            }
        },
        "rke:index/ClusterWorkerHost:ClusterWorkerHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "Name of the host provisioned via docker machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "nodeName"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the rke package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "debug": {
                "type": "boolean"
            },
            "logFile": {
                "type": "string"
            }
        },
        "inputProperties": {
            "debug": {
                "type": "boolean",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RKE_DEBUG"
                    ]
                }
            },
            "logFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RKE_LOG_FILE"
                    ]
                }
            }
        }
    },
    "resources": {
        "rke:index/cluster:Cluster": {
            "description": "\n\n\n## Import\n\nrke_cluster can be imported using the RKE cluster config and state files as ID in the format `\u003ccluster_config_file\u003e:\u003crke_state_file\u003e`\n\n```sh\n $ pulumi import rke:index/cluster:Cluster foo \u0026lt;cluster_config_file\u0026gt;:\u0026lt;rke_state_file\u0026gt;\n```\n\n As experimental feature, dind rke_cluster can be also imported adding `dind` as 3rd import parameter `\u003ccluster_config_file\u003e:\u003crke_state_file\u003e:dind`\n\n```sh\n $ pulumi import rke:index/cluster:Cluster foo \u0026lt;cluster_config_file\u0026gt;:\u0026lt;rke_state_file\u0026gt;:dind\n```\n\n ",
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                },
                "addons": {
                    "type": "string",
                    "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                },
                "apiServerUrl": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster api server url (string)\n"
                },
                "authentication": {
                    "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                    "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                },
                "authorization": {
                    "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                    "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                    "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                },
                "caCrt": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster CA certificate (string)\n"
                },
                "certDir": {
                    "type": "string",
                    "description": "Specify a certificate dir path (string)\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterCertificate:ClusterCertificate"
                    },
                    "description": "(Computed/Sensitive) RKE k8s cluster certificates (string)\n"
                },
                "clientCert": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster client certificate (string)\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster client key (string)\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                    "description": "Calico cloud provider (string)\n"
                },
                "clusterCidr": {
                    "type": "string",
                    "description": "Cluster CIDR option for kube controller service (string)\n"
                },
                "clusterDnsServer": {
                    "type": "string",
                    "description": "Cluster DNS Server option for kubelet service (string)\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "Cluster Domain option for kubelet service. Default `cluster.local` (string)\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "RKE k8s cluster name used in the kube config (string)\n"
                },
                "clusterYaml": {
                    "type": "string",
                    "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n"
                },
                "controlPlaneHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost"
                    },
                    "description": "(Computed) RKE k8s cluster control plane nodes (list)\n"
                },
                "customCerts": {
                    "type": "boolean",
                    "description": "Use custom certificates from a cert dir (string)\n"
                },
                "delayOnCreation": {
                    "type": "integer",
                    "description": "RKE k8s cluster delay on creation (int)\n"
                },
                "dind": {
                    "type": "boolean",
                    "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                },
                "dindDnsServer": {
                    "type": "string",
                    "description": "DinD RKE cluster dns (string)\n"
                },
                "dindStorageDriver": {
                    "type": "string",
                    "description": "DinD RKE cluster storage driver (string)\n"
                },
                "disablePortCheck": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                },
                "dns": {
                    "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                    "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                },
                "etcdHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterEtcdHost:ClusterEtcdHost"
                    },
                    "description": "(Computed) RKE k8s cluster etcd nodes (list)\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                },
                "inactiveHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterInactiveHost:ClusterInactiveHost"
                    },
                    "description": "(Computed) RKE k8s cluster inactive nodes (list)\n"
                },
                "ingress": {
                    "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                    "description": "Docker image for ingress (string)\n"
                },
                "internalKubeConfigYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)\n",
                    "deprecationMessage": "Use kube_config_yaml instead"
                },
                "kubeAdminUser": {
                    "type": "string",
                    "description": "(Computed) RKE k8s cluster admin user (string)\n"
                },
                "kubeConfigYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster kube config yaml (string)\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                },
                "monitoring": {
                    "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                    "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                    "description": "(list maxitems:1)\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                    },
                    "description": "RKE k8s cluster nodes (list)\n"
                },
                "nodesConfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "Use cluster_yaml instead"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "RKE k8s directory path (string)\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                    },
                    "description": "RKE k8s cluster private docker registries (list)\n"
                },
                "restore": {
                    "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                    "description": "Restore cluster. Default `false` (bool)\n"
                },
                "rkeClusterYaml": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster config yaml (string)\n"
                },
                "rkeState": {
                    "type": "string",
                    "description": "(Computed/Sensitive) RKE k8s cluster state (string)\n"
                },
                "rotateCertificates": {
                    "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                    "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                },
                "runningSystemImages": {
                    "$ref": "#/types/rke:index/ClusterRunningSystemImages:ClusterRunningSystemImages",
                    "description": "(Computed) RKE k8s cluster running system images list (list)\n"
                },
                "services": {
                    "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                    "description": "Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)\n"
                },
                "servicesEtcdDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                    "description": "Use services.etcd instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.etcd instead"
                },
                "servicesKubeApiDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                    "description": "Use services.kube_api instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_api instead"
                },
                "servicesKubeControllerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                    "description": "Use services.kube_controller instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_controller instead"
                },
                "servicesKubeProxyDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                    "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubeproxy instead"
                },
                "servicesKubeSchedulerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                    "description": "Use services.scheduler instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.scheduler instead"
                },
                "servicesKubeletDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                    "description": "Use services.kubelet instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubelet instead"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate path (string)\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key path (string)\n"
                },
                "systemImages": {
                    "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                    "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                },
                "updateOnly": {
                    "type": "boolean",
                    "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                    "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                },
                "workerHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterWorkerHost:ClusterWorkerHost"
                    },
                    "description": "(Computed) RKE k8s cluster worker nodes (list)\n"
                }
            },
            "required": [
                "apiServerUrl",
                "caCrt",
                "certificates",
                "clientCert",
                "clientKey",
                "clusterCidr",
                "clusterDnsServer",
                "clusterDomain",
                "controlPlaneHosts",
                "etcdHosts",
                "inactiveHosts",
                "internalKubeConfigYaml",
                "kubeAdminUser",
                "kubeConfigYaml",
                "rkeClusterYaml",
                "rkeState",
                "runningSystemImages",
                "sshAgentAuth",
                "workerHosts"
            ],
            "inputProperties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                },
                "addons": {
                    "type": "string",
                    "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                },
                "authentication": {
                    "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                    "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                },
                "authorization": {
                    "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                    "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                    "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                },
                "certDir": {
                    "type": "string",
                    "description": "Specify a certificate dir path (string)\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                    "description": "Calico cloud provider (string)\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "RKE k8s cluster name used in the kube config (string)\n"
                },
                "clusterYaml": {
                    "type": "string",
                    "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n"
                },
                "customCerts": {
                    "type": "boolean",
                    "description": "Use custom certificates from a cert dir (string)\n"
                },
                "delayOnCreation": {
                    "type": "integer",
                    "description": "RKE k8s cluster delay on creation (int)\n"
                },
                "dind": {
                    "type": "boolean",
                    "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                },
                "dindDnsServer": {
                    "type": "string",
                    "description": "DinD RKE cluster dns (string)\n"
                },
                "dindStorageDriver": {
                    "type": "string",
                    "description": "DinD RKE cluster storage driver (string)\n"
                },
                "disablePortCheck": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                },
                "dns": {
                    "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                    "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                },
                "ingress": {
                    "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                    "description": "Docker image for ingress (string)\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                },
                "monitoring": {
                    "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                    "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                },
                "network": {
                    "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                    "description": "(list maxitems:1)\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                    },
                    "description": "RKE k8s cluster nodes (list)\n"
                },
                "nodesConfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "Use cluster_yaml instead"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "RKE k8s directory path (string)\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                    },
                    "description": "RKE k8s cluster private docker registries (list)\n"
                },
                "restore": {
                    "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                    "description": "Restore cluster. Default `false` (bool)\n"
                },
                "rotateCertificates": {
                    "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                    "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                },
                "services": {
                    "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                    "description": "Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)\n"
                },
                "servicesEtcdDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                    "description": "Use services.etcd instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.etcd instead"
                },
                "servicesKubeApiDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                    "description": "Use services.kube_api instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_api instead"
                },
                "servicesKubeControllerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                    "description": "Use services.kube_controller instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kube_controller instead"
                },
                "servicesKubeProxyDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                    "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubeproxy instead"
                },
                "servicesKubeSchedulerDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                    "description": "Use services.scheduler instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.scheduler instead"
                },
                "servicesKubeletDeprecated": {
                    "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                    "description": "Use services.kubelet instead (list maxitems:1)\n",
                    "deprecationMessage": "Use services.kubelet instead"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "SSH Agent Auth enable (bool)\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "SSH Certificate path (string)\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH Private Key path (string)\n"
                },
                "systemImages": {
                    "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                    "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                },
                "updateOnly": {
                    "type": "boolean",
                    "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                    "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "addonJobTimeout": {
                        "type": "integer",
                        "description": "RKE k8s cluster addon deployment timeout in seconds for status check (int)\n"
                    },
                    "addons": {
                        "type": "string",
                        "description": "RKE k8s cluster user addons YAML manifest to be deployed (string)\n"
                    },
                    "addonsIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "RKE k8s cluster user addons YAML manifest urls or paths to be deployed (list)\n"
                    },
                    "apiServerUrl": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster api server url (string)\n"
                    },
                    "authentication": {
                        "$ref": "#/types/rke:index/ClusterAuthentication:ClusterAuthentication",
                        "description": "RKE k8s cluster authentication configuration (list maxitems:1)\n"
                    },
                    "authorization": {
                        "$ref": "#/types/rke:index/ClusterAuthorization:ClusterAuthorization",
                        "description": "RKE k8s cluster authorization mode configuration (list maxitems:1)\n"
                    },
                    "bastionHost": {
                        "$ref": "#/types/rke:index/ClusterBastionHost:ClusterBastionHost",
                        "description": "RKE k8s cluster bastion Host configuration (list maxitems:1)\n"
                    },
                    "caCrt": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster CA certificate (string)\n"
                    },
                    "certDir": {
                        "type": "string",
                        "description": "Specify a certificate dir path (string)\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterCertificate:ClusterCertificate"
                        },
                        "description": "(Computed/Sensitive) RKE k8s cluster certificates (string)\n"
                    },
                    "clientCert": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster client certificate (string)\n"
                    },
                    "clientKey": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster client key (string)\n"
                    },
                    "cloudProvider": {
                        "$ref": "#/types/rke:index/ClusterCloudProvider:ClusterCloudProvider",
                        "description": "Calico cloud provider (string)\n"
                    },
                    "clusterCidr": {
                        "type": "string",
                        "description": "Cluster CIDR option for kube controller service (string)\n"
                    },
                    "clusterDnsServer": {
                        "type": "string",
                        "description": "Cluster DNS Server option for kubelet service (string)\n"
                    },
                    "clusterDomain": {
                        "type": "string",
                        "description": "Cluster Domain option for kubelet service. Default `cluster.local` (string)\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "RKE k8s cluster name used in the kube config (string)\n"
                    },
                    "clusterYaml": {
                        "type": "string",
                        "description": "RKE k8s cluster config yaml encoded. Provider arguments take precedence over this one (string)\n"
                    },
                    "controlPlaneHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterControlPlaneHost:ClusterControlPlaneHost"
                        },
                        "description": "(Computed) RKE k8s cluster control plane nodes (list)\n"
                    },
                    "customCerts": {
                        "type": "boolean",
                        "description": "Use custom certificates from a cert dir (string)\n"
                    },
                    "delayOnCreation": {
                        "type": "integer",
                        "description": "RKE k8s cluster delay on creation (int)\n"
                    },
                    "dind": {
                        "type": "boolean",
                        "description": "Deploy RKE cluster on a dind environment. Default: `false` (bool)\n"
                    },
                    "dindDnsServer": {
                        "type": "string",
                        "description": "DinD RKE cluster dns (string)\n"
                    },
                    "dindStorageDriver": {
                        "type": "string",
                        "description": "DinD RKE cluster storage driver (string)\n"
                    },
                    "disablePortCheck": {
                        "type": "boolean",
                        "description": "Enable/Disable RKE k8s cluster port checking. Default `false` (bool)\n"
                    },
                    "dns": {
                        "$ref": "#/types/rke:index/ClusterDns:ClusterDns",
                        "description": "RKE k8s cluster DNS Config (list maxitems:1)\n"
                    },
                    "etcdHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterEtcdHost:ClusterEtcdHost"
                        },
                        "description": "(Computed) RKE k8s cluster etcd nodes (list)\n"
                    },
                    "ignoreDockerVersion": {
                        "type": "boolean",
                        "description": "Enable/Disable RKE k8s cluster strict docker version checking. Default `false` (bool)\n"
                    },
                    "inactiveHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterInactiveHost:ClusterInactiveHost"
                        },
                        "description": "(Computed) RKE k8s cluster inactive nodes (list)\n"
                    },
                    "ingress": {
                        "$ref": "#/types/rke:index/ClusterIngress:ClusterIngress",
                        "description": "Docker image for ingress (string)\n"
                    },
                    "internalKubeConfigYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster internal kube config yaml (string)\n",
                        "deprecationMessage": "Use kube_config_yaml instead"
                    },
                    "kubeAdminUser": {
                        "type": "string",
                        "description": "(Computed) RKE k8s cluster admin user (string)\n"
                    },
                    "kubeConfigYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster kube config yaml (string)\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "K8s version to deploy. If kubernetes image is specified, image version takes precedence. Default: `rke default` (string)\n"
                    },
                    "monitoring": {
                        "$ref": "#/types/rke:index/ClusterMonitoring:ClusterMonitoring",
                        "description": "RKE k8s cluster monitoring Config (list maxitems:1)\n"
                    },
                    "network": {
                        "$ref": "#/types/rke:index/ClusterNetwork:ClusterNetwork",
                        "description": "(list maxitems:1)\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterNode:ClusterNode"
                        },
                        "description": "RKE k8s cluster nodes (list)\n"
                    },
                    "nodesConfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use cluster_yaml instead"
                    },
                    "prefixPath": {
                        "type": "string",
                        "description": "RKE k8s directory path (string)\n"
                    },
                    "privateRegistries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterPrivateRegistry:ClusterPrivateRegistry"
                        },
                        "description": "RKE k8s cluster private docker registries (list)\n"
                    },
                    "restore": {
                        "$ref": "#/types/rke:index/ClusterRestore:ClusterRestore",
                        "description": "Restore cluster. Default `false` (bool)\n"
                    },
                    "rkeClusterYaml": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster config yaml (string)\n"
                    },
                    "rkeState": {
                        "type": "string",
                        "description": "(Computed/Sensitive) RKE k8s cluster state (string)\n"
                    },
                    "rotateCertificates": {
                        "$ref": "#/types/rke:index/ClusterRotateCertificates:ClusterRotateCertificates",
                        "description": "RKE k8s cluster rotate certificates configuration (list maxitems:1)\n"
                    },
                    "runningSystemImages": {
                        "$ref": "#/types/rke:index/ClusterRunningSystemImages:ClusterRunningSystemImages",
                        "description": "(Computed) RKE k8s cluster running system images list (list)\n"
                    },
                    "services": {
                        "$ref": "#/types/rke:index/ClusterServices:ClusterServices",
                        "description": "Services to rotate their certs. `etcd`, `kubelet`, `kube-apiserver`, `kube-proxy`, `kube-scheduler` and `kube-controller-manager` are supported (list)\n"
                    },
                    "servicesEtcdDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesEtcdDeprecated:ClusterServicesEtcdDeprecated",
                        "description": "Use services.etcd instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.etcd instead"
                    },
                    "servicesKubeApiDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeApiDeprecated:ClusterServicesKubeApiDeprecated",
                        "description": "Use services.kube_api instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kube_api instead"
                    },
                    "servicesKubeControllerDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeControllerDeprecated:ClusterServicesKubeControllerDeprecated",
                        "description": "Use services.kube_controller instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kube_controller instead"
                    },
                    "servicesKubeProxyDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeProxyDeprecated:ClusterServicesKubeProxyDeprecated",
                        "description": "Use services.kubeproxy instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kubeproxy instead"
                    },
                    "servicesKubeSchedulerDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeSchedulerDeprecated:ClusterServicesKubeSchedulerDeprecated",
                        "description": "Use services.scheduler instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.scheduler instead"
                    },
                    "servicesKubeletDeprecated": {
                        "$ref": "#/types/rke:index/ClusterServicesKubeletDeprecated:ClusterServicesKubeletDeprecated",
                        "description": "Use services.kubelet instead (list maxitems:1)\n",
                        "deprecationMessage": "Use services.kubelet instead"
                    },
                    "sshAgentAuth": {
                        "type": "boolean",
                        "description": "SSH Agent Auth enable (bool)\n"
                    },
                    "sshCertPath": {
                        "type": "string",
                        "description": "SSH Certificate path (string)\n"
                    },
                    "sshKeyPath": {
                        "type": "string",
                        "description": "SSH Private Key path (string)\n"
                    },
                    "systemImages": {
                        "$ref": "#/types/rke:index/ClusterSystemImages:ClusterSystemImages",
                        "description": "RKE k8s cluster system images list (list maxitems:1)\n"
                    },
                    "updateOnly": {
                        "type": "boolean",
                        "description": "Skip idempotent deployment of control and etcd plane. Default `false` (bool)\n"
                    },
                    "upgradeStrategy": {
                        "$ref": "#/types/rke:index/ClusterUpgradeStrategy:ClusterUpgradeStrategy",
                        "description": "RKE k8s cluster upgrade strategy (list maxitems:1)\n"
                    },
                    "workerHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rke:index/ClusterWorkerHost:ClusterWorkerHost"
                        },
                        "description": "(Computed) RKE k8s cluster worker nodes (list)\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "index": "index",
                "rke": "Rke"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing rke cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rke)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rke` repo](https://github.com/pulumi/pulumi-rke/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`rancher/terraform-provider-rke` repo](https://github.com/rancher/terraform-provider-rke/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rke)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rke` repo](https://github.com/pulumi/pulumi-rke/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`rancher/terraform-provider-rke` repo](https://github.com/rancher/terraform-provider-rke/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}